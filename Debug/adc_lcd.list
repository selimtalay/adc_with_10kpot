
adc_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009108  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  080091c8  080091c8  000191c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009580  08009580  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009588  08009588  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009588  08009588  00019588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800958c  0800958c  0001958c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001dc  0800976c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  0800976c  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ecc  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001979  00000000  00000000  0002a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0002ba50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002c460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000106fb  00000000  00000000  0002cd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e3b  00000000  00000000  0003d483  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000669d9  00000000  00000000  000462be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000acc97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003114  00000000  00000000  000acd14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080091b0 	.word	0x080091b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	080091b0 	.word	0x080091b0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 f8f1 	bl	8001610 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 f849 	bl	80014d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f8e3 	bl	8001610 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8d9 	bl	8001610 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f86b 	bl	8001548 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f861 	bl	8001548 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 f9a9 	bl	80007f4 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 f92b 	bl	8000708 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f99b 	bl	80007f4 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f991 	bl	80007f4 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f939 	bl	8000758 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f92f 	bl	8000758 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_uldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d10f      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 8000510:	2900      	cmp	r1, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_uldivmod+0xe>
 8000514:	2800      	cmp	r0, #0
 8000516:	d002      	beq.n	800051e <__aeabi_uldivmod+0x16>
 8000518:	2100      	movs	r1, #0
 800051a:	43c9      	mvns	r1, r1
 800051c:	1c08      	adds	r0, r1, #0
 800051e:	b407      	push	{r0, r1, r2}
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <__aeabi_uldivmod+0x24>)
 8000522:	a102      	add	r1, pc, #8	; (adr r1, 800052c <__aeabi_uldivmod+0x24>)
 8000524:	1840      	adds	r0, r0, r1
 8000526:	9002      	str	r0, [sp, #8]
 8000528:	bd03      	pop	{r0, r1, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	fffffee9 	.word	0xfffffee9
 8000530:	b403      	push	{r0, r1}
 8000532:	4668      	mov	r0, sp
 8000534:	b501      	push	{r0, lr}
 8000536:	9802      	ldr	r0, [sp, #8]
 8000538:	f000 f824 	bl	8000584 <__udivmoddi4>
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	469e      	mov	lr, r3
 8000540:	b002      	add	sp, #8
 8000542:	bc0c      	pop	{r2, r3}
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			; (mov r8, r8)

08000548 <__aeabi_d2uiz>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	2200      	movs	r2, #0
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <__aeabi_d2uiz+0x38>)
 800054e:	0004      	movs	r4, r0
 8000550:	000d      	movs	r5, r1
 8000552:	f7ff ff95 	bl	8000480 <__aeabi_dcmpge>
 8000556:	2800      	cmp	r0, #0
 8000558:	d104      	bne.n	8000564 <__aeabi_d2uiz+0x1c>
 800055a:	0020      	movs	r0, r4
 800055c:	0029      	movs	r1, r5
 800055e:	f001 fe95 	bl	800228c <__aeabi_d2iz>
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <__aeabi_d2uiz+0x38>)
 8000566:	2200      	movs	r2, #0
 8000568:	0020      	movs	r0, r4
 800056a:	0029      	movs	r1, r5
 800056c:	f001 fb2a 	bl	8001bc4 <__aeabi_dsub>
 8000570:	f001 fe8c 	bl	800228c <__aeabi_d2iz>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	061b      	lsls	r3, r3, #24
 8000578:	469c      	mov	ip, r3
 800057a:	4460      	add	r0, ip
 800057c:	e7f1      	b.n	8000562 <__aeabi_d2uiz+0x1a>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	41e00000 	.word	0x41e00000

08000584 <__udivmoddi4>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	464f      	mov	r7, r9
 8000588:	4646      	mov	r6, r8
 800058a:	46d6      	mov	lr, sl
 800058c:	b5c0      	push	{r6, r7, lr}
 800058e:	0004      	movs	r4, r0
 8000590:	b082      	sub	sp, #8
 8000592:	000d      	movs	r5, r1
 8000594:	4691      	mov	r9, r2
 8000596:	4698      	mov	r8, r3
 8000598:	428b      	cmp	r3, r1
 800059a:	d82f      	bhi.n	80005fc <__udivmoddi4+0x78>
 800059c:	d02c      	beq.n	80005f8 <__udivmoddi4+0x74>
 800059e:	4641      	mov	r1, r8
 80005a0:	4648      	mov	r0, r9
 80005a2:	f002 f809 	bl	80025b8 <__clzdi2>
 80005a6:	0029      	movs	r1, r5
 80005a8:	0006      	movs	r6, r0
 80005aa:	0020      	movs	r0, r4
 80005ac:	f002 f804 	bl	80025b8 <__clzdi2>
 80005b0:	1a33      	subs	r3, r6, r0
 80005b2:	469c      	mov	ip, r3
 80005b4:	3b20      	subs	r3, #32
 80005b6:	469a      	mov	sl, r3
 80005b8:	d500      	bpl.n	80005bc <__udivmoddi4+0x38>
 80005ba:	e076      	b.n	80006aa <__udivmoddi4+0x126>
 80005bc:	464b      	mov	r3, r9
 80005be:	4652      	mov	r2, sl
 80005c0:	4093      	lsls	r3, r2
 80005c2:	001f      	movs	r7, r3
 80005c4:	464b      	mov	r3, r9
 80005c6:	4662      	mov	r2, ip
 80005c8:	4093      	lsls	r3, r2
 80005ca:	001e      	movs	r6, r3
 80005cc:	42af      	cmp	r7, r5
 80005ce:	d828      	bhi.n	8000622 <__udivmoddi4+0x9e>
 80005d0:	d025      	beq.n	800061e <__udivmoddi4+0x9a>
 80005d2:	4653      	mov	r3, sl
 80005d4:	1ba4      	subs	r4, r4, r6
 80005d6:	41bd      	sbcs	r5, r7
 80005d8:	2b00      	cmp	r3, #0
 80005da:	da00      	bge.n	80005de <__udivmoddi4+0x5a>
 80005dc:	e07b      	b.n	80006d6 <__udivmoddi4+0x152>
 80005de:	2200      	movs	r2, #0
 80005e0:	2300      	movs	r3, #0
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2301      	movs	r3, #1
 80005e8:	4652      	mov	r2, sl
 80005ea:	4093      	lsls	r3, r2
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	4662      	mov	r2, ip
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	e018      	b.n	800062a <__udivmoddi4+0xa6>
 80005f8:	4282      	cmp	r2, r0
 80005fa:	d9d0      	bls.n	800059e <__udivmoddi4+0x1a>
 80005fc:	2200      	movs	r2, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	9200      	str	r2, [sp, #0]
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <__udivmoddi4+0x8a>
 800060a:	601c      	str	r4, [r3, #0]
 800060c:	605d      	str	r5, [r3, #4]
 800060e:	9800      	ldr	r0, [sp, #0]
 8000610:	9901      	ldr	r1, [sp, #4]
 8000612:	b002      	add	sp, #8
 8000614:	bc1c      	pop	{r2, r3, r4}
 8000616:	4690      	mov	r8, r2
 8000618:	4699      	mov	r9, r3
 800061a:	46a2      	mov	sl, r4
 800061c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061e:	42a3      	cmp	r3, r4
 8000620:	d9d7      	bls.n	80005d2 <__udivmoddi4+0x4e>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	4663      	mov	r3, ip
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e9      	beq.n	8000604 <__udivmoddi4+0x80>
 8000630:	07fb      	lsls	r3, r7, #31
 8000632:	4698      	mov	r8, r3
 8000634:	4641      	mov	r1, r8
 8000636:	0872      	lsrs	r2, r6, #1
 8000638:	430a      	orrs	r2, r1
 800063a:	087b      	lsrs	r3, r7, #1
 800063c:	4666      	mov	r6, ip
 800063e:	e00e      	b.n	800065e <__udivmoddi4+0xda>
 8000640:	42ab      	cmp	r3, r5
 8000642:	d101      	bne.n	8000648 <__udivmoddi4+0xc4>
 8000644:	42a2      	cmp	r2, r4
 8000646:	d80c      	bhi.n	8000662 <__udivmoddi4+0xde>
 8000648:	1aa4      	subs	r4, r4, r2
 800064a:	419d      	sbcs	r5, r3
 800064c:	2001      	movs	r0, #1
 800064e:	1924      	adds	r4, r4, r4
 8000650:	416d      	adcs	r5, r5
 8000652:	2100      	movs	r1, #0
 8000654:	3e01      	subs	r6, #1
 8000656:	1824      	adds	r4, r4, r0
 8000658:	414d      	adcs	r5, r1
 800065a:	2e00      	cmp	r6, #0
 800065c:	d006      	beq.n	800066c <__udivmoddi4+0xe8>
 800065e:	42ab      	cmp	r3, r5
 8000660:	d9ee      	bls.n	8000640 <__udivmoddi4+0xbc>
 8000662:	3e01      	subs	r6, #1
 8000664:	1924      	adds	r4, r4, r4
 8000666:	416d      	adcs	r5, r5
 8000668:	2e00      	cmp	r6, #0
 800066a:	d1f8      	bne.n	800065e <__udivmoddi4+0xda>
 800066c:	9800      	ldr	r0, [sp, #0]
 800066e:	9901      	ldr	r1, [sp, #4]
 8000670:	4653      	mov	r3, sl
 8000672:	1900      	adds	r0, r0, r4
 8000674:	4169      	adcs	r1, r5
 8000676:	2b00      	cmp	r3, #0
 8000678:	db23      	blt.n	80006c2 <__udivmoddi4+0x13e>
 800067a:	002b      	movs	r3, r5
 800067c:	4652      	mov	r2, sl
 800067e:	40d3      	lsrs	r3, r2
 8000680:	002a      	movs	r2, r5
 8000682:	4664      	mov	r4, ip
 8000684:	40e2      	lsrs	r2, r4
 8000686:	001c      	movs	r4, r3
 8000688:	4653      	mov	r3, sl
 800068a:	0015      	movs	r5, r2
 800068c:	2b00      	cmp	r3, #0
 800068e:	db2d      	blt.n	80006ec <__udivmoddi4+0x168>
 8000690:	0026      	movs	r6, r4
 8000692:	4657      	mov	r7, sl
 8000694:	40be      	lsls	r6, r7
 8000696:	0033      	movs	r3, r6
 8000698:	0026      	movs	r6, r4
 800069a:	4667      	mov	r7, ip
 800069c:	40be      	lsls	r6, r7
 800069e:	0032      	movs	r2, r6
 80006a0:	1a80      	subs	r0, r0, r2
 80006a2:	4199      	sbcs	r1, r3
 80006a4:	9000      	str	r0, [sp, #0]
 80006a6:	9101      	str	r1, [sp, #4]
 80006a8:	e7ac      	b.n	8000604 <__udivmoddi4+0x80>
 80006aa:	4662      	mov	r2, ip
 80006ac:	2320      	movs	r3, #32
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	464a      	mov	r2, r9
 80006b2:	40da      	lsrs	r2, r3
 80006b4:	4661      	mov	r1, ip
 80006b6:	0013      	movs	r3, r2
 80006b8:	4642      	mov	r2, r8
 80006ba:	408a      	lsls	r2, r1
 80006bc:	0017      	movs	r7, r2
 80006be:	431f      	orrs	r7, r3
 80006c0:	e780      	b.n	80005c4 <__udivmoddi4+0x40>
 80006c2:	4662      	mov	r2, ip
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	002a      	movs	r2, r5
 80006ca:	4666      	mov	r6, ip
 80006cc:	409a      	lsls	r2, r3
 80006ce:	0023      	movs	r3, r4
 80006d0:	40f3      	lsrs	r3, r6
 80006d2:	4313      	orrs	r3, r2
 80006d4:	e7d4      	b.n	8000680 <__udivmoddi4+0xfc>
 80006d6:	4662      	mov	r2, ip
 80006d8:	2320      	movs	r3, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	2200      	movs	r2, #0
 80006e0:	9100      	str	r1, [sp, #0]
 80006e2:	9201      	str	r2, [sp, #4]
 80006e4:	2201      	movs	r2, #1
 80006e6:	40da      	lsrs	r2, r3
 80006e8:	9201      	str	r2, [sp, #4]
 80006ea:	e780      	b.n	80005ee <__udivmoddi4+0x6a>
 80006ec:	2320      	movs	r3, #32
 80006ee:	4662      	mov	r2, ip
 80006f0:	0026      	movs	r6, r4
 80006f2:	1a9b      	subs	r3, r3, r2
 80006f4:	40de      	lsrs	r6, r3
 80006f6:	002f      	movs	r7, r5
 80006f8:	46b0      	mov	r8, r6
 80006fa:	4666      	mov	r6, ip
 80006fc:	40b7      	lsls	r7, r6
 80006fe:	4646      	mov	r6, r8
 8000700:	003b      	movs	r3, r7
 8000702:	4333      	orrs	r3, r6
 8000704:	e7c8      	b.n	8000698 <__udivmoddi4+0x114>
 8000706:	46c0      	nop			; (mov r8, r8)

08000708 <__eqsf2>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	0042      	lsls	r2, r0, #1
 800070c:	024e      	lsls	r6, r1, #9
 800070e:	004c      	lsls	r4, r1, #1
 8000710:	0245      	lsls	r5, r0, #9
 8000712:	0a6d      	lsrs	r5, r5, #9
 8000714:	0e12      	lsrs	r2, r2, #24
 8000716:	0fc3      	lsrs	r3, r0, #31
 8000718:	0a76      	lsrs	r6, r6, #9
 800071a:	0e24      	lsrs	r4, r4, #24
 800071c:	0fc9      	lsrs	r1, r1, #31
 800071e:	2aff      	cmp	r2, #255	; 0xff
 8000720:	d00f      	beq.n	8000742 <__eqsf2+0x3a>
 8000722:	2cff      	cmp	r4, #255	; 0xff
 8000724:	d011      	beq.n	800074a <__eqsf2+0x42>
 8000726:	2001      	movs	r0, #1
 8000728:	42a2      	cmp	r2, r4
 800072a:	d000      	beq.n	800072e <__eqsf2+0x26>
 800072c:	bd70      	pop	{r4, r5, r6, pc}
 800072e:	42b5      	cmp	r5, r6
 8000730:	d1fc      	bne.n	800072c <__eqsf2+0x24>
 8000732:	428b      	cmp	r3, r1
 8000734:	d00d      	beq.n	8000752 <__eqsf2+0x4a>
 8000736:	2a00      	cmp	r2, #0
 8000738:	d1f8      	bne.n	800072c <__eqsf2+0x24>
 800073a:	0028      	movs	r0, r5
 800073c:	1e45      	subs	r5, r0, #1
 800073e:	41a8      	sbcs	r0, r5
 8000740:	e7f4      	b.n	800072c <__eqsf2+0x24>
 8000742:	2001      	movs	r0, #1
 8000744:	2d00      	cmp	r5, #0
 8000746:	d1f1      	bne.n	800072c <__eqsf2+0x24>
 8000748:	e7eb      	b.n	8000722 <__eqsf2+0x1a>
 800074a:	2001      	movs	r0, #1
 800074c:	2e00      	cmp	r6, #0
 800074e:	d1ed      	bne.n	800072c <__eqsf2+0x24>
 8000750:	e7e9      	b.n	8000726 <__eqsf2+0x1e>
 8000752:	2000      	movs	r0, #0
 8000754:	e7ea      	b.n	800072c <__eqsf2+0x24>
 8000756:	46c0      	nop			; (mov r8, r8)

08000758 <__gesf2>:
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	004a      	lsls	r2, r1, #1
 800075c:	024e      	lsls	r6, r1, #9
 800075e:	0245      	lsls	r5, r0, #9
 8000760:	0044      	lsls	r4, r0, #1
 8000762:	0a6d      	lsrs	r5, r5, #9
 8000764:	0e24      	lsrs	r4, r4, #24
 8000766:	0fc3      	lsrs	r3, r0, #31
 8000768:	0a76      	lsrs	r6, r6, #9
 800076a:	0e12      	lsrs	r2, r2, #24
 800076c:	0fc9      	lsrs	r1, r1, #31
 800076e:	2cff      	cmp	r4, #255	; 0xff
 8000770:	d015      	beq.n	800079e <__gesf2+0x46>
 8000772:	2aff      	cmp	r2, #255	; 0xff
 8000774:	d00e      	beq.n	8000794 <__gesf2+0x3c>
 8000776:	2c00      	cmp	r4, #0
 8000778:	d115      	bne.n	80007a6 <__gesf2+0x4e>
 800077a:	2a00      	cmp	r2, #0
 800077c:	d101      	bne.n	8000782 <__gesf2+0x2a>
 800077e:	2e00      	cmp	r6, #0
 8000780:	d01c      	beq.n	80007bc <__gesf2+0x64>
 8000782:	2d00      	cmp	r5, #0
 8000784:	d014      	beq.n	80007b0 <__gesf2+0x58>
 8000786:	428b      	cmp	r3, r1
 8000788:	d027      	beq.n	80007da <__gesf2+0x82>
 800078a:	2002      	movs	r0, #2
 800078c:	3b01      	subs	r3, #1
 800078e:	4018      	ands	r0, r3
 8000790:	3801      	subs	r0, #1
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	2e00      	cmp	r6, #0
 8000796:	d0ee      	beq.n	8000776 <__gesf2+0x1e>
 8000798:	2002      	movs	r0, #2
 800079a:	4240      	negs	r0, r0
 800079c:	e7f9      	b.n	8000792 <__gesf2+0x3a>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	d1fa      	bne.n	8000798 <__gesf2+0x40>
 80007a2:	2aff      	cmp	r2, #255	; 0xff
 80007a4:	d00e      	beq.n	80007c4 <__gesf2+0x6c>
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d10e      	bne.n	80007c8 <__gesf2+0x70>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d0ed      	beq.n	800078a <__gesf2+0x32>
 80007ae:	e00b      	b.n	80007c8 <__gesf2+0x70>
 80007b0:	2301      	movs	r3, #1
 80007b2:	3901      	subs	r1, #1
 80007b4:	4399      	bics	r1, r3
 80007b6:	0008      	movs	r0, r1
 80007b8:	3001      	adds	r0, #1
 80007ba:	e7ea      	b.n	8000792 <__gesf2+0x3a>
 80007bc:	2000      	movs	r0, #0
 80007be:	2d00      	cmp	r5, #0
 80007c0:	d0e7      	beq.n	8000792 <__gesf2+0x3a>
 80007c2:	e7e2      	b.n	800078a <__gesf2+0x32>
 80007c4:	2e00      	cmp	r6, #0
 80007c6:	d1e7      	bne.n	8000798 <__gesf2+0x40>
 80007c8:	428b      	cmp	r3, r1
 80007ca:	d1de      	bne.n	800078a <__gesf2+0x32>
 80007cc:	4294      	cmp	r4, r2
 80007ce:	dd05      	ble.n	80007dc <__gesf2+0x84>
 80007d0:	2102      	movs	r1, #2
 80007d2:	1e58      	subs	r0, r3, #1
 80007d4:	4008      	ands	r0, r1
 80007d6:	3801      	subs	r0, #1
 80007d8:	e7db      	b.n	8000792 <__gesf2+0x3a>
 80007da:	2400      	movs	r4, #0
 80007dc:	42a2      	cmp	r2, r4
 80007de:	dc04      	bgt.n	80007ea <__gesf2+0x92>
 80007e0:	42b5      	cmp	r5, r6
 80007e2:	d8d2      	bhi.n	800078a <__gesf2+0x32>
 80007e4:	2000      	movs	r0, #0
 80007e6:	42b5      	cmp	r5, r6
 80007e8:	d2d3      	bcs.n	8000792 <__gesf2+0x3a>
 80007ea:	1e58      	subs	r0, r3, #1
 80007ec:	2301      	movs	r3, #1
 80007ee:	4398      	bics	r0, r3
 80007f0:	3001      	adds	r0, #1
 80007f2:	e7ce      	b.n	8000792 <__gesf2+0x3a>

080007f4 <__lesf2>:
 80007f4:	b530      	push	{r4, r5, lr}
 80007f6:	0042      	lsls	r2, r0, #1
 80007f8:	0244      	lsls	r4, r0, #9
 80007fa:	024d      	lsls	r5, r1, #9
 80007fc:	0fc3      	lsrs	r3, r0, #31
 80007fe:	0048      	lsls	r0, r1, #1
 8000800:	0a64      	lsrs	r4, r4, #9
 8000802:	0e12      	lsrs	r2, r2, #24
 8000804:	0a6d      	lsrs	r5, r5, #9
 8000806:	0e00      	lsrs	r0, r0, #24
 8000808:	0fc9      	lsrs	r1, r1, #31
 800080a:	2aff      	cmp	r2, #255	; 0xff
 800080c:	d012      	beq.n	8000834 <__lesf2+0x40>
 800080e:	28ff      	cmp	r0, #255	; 0xff
 8000810:	d00c      	beq.n	800082c <__lesf2+0x38>
 8000812:	2a00      	cmp	r2, #0
 8000814:	d112      	bne.n	800083c <__lesf2+0x48>
 8000816:	2800      	cmp	r0, #0
 8000818:	d119      	bne.n	800084e <__lesf2+0x5a>
 800081a:	2d00      	cmp	r5, #0
 800081c:	d117      	bne.n	800084e <__lesf2+0x5a>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d02b      	beq.n	800087a <__lesf2+0x86>
 8000822:	2002      	movs	r0, #2
 8000824:	3b01      	subs	r3, #1
 8000826:	4018      	ands	r0, r3
 8000828:	3801      	subs	r0, #1
 800082a:	e026      	b.n	800087a <__lesf2+0x86>
 800082c:	2d00      	cmp	r5, #0
 800082e:	d0f0      	beq.n	8000812 <__lesf2+0x1e>
 8000830:	2002      	movs	r0, #2
 8000832:	e022      	b.n	800087a <__lesf2+0x86>
 8000834:	2c00      	cmp	r4, #0
 8000836:	d1fb      	bne.n	8000830 <__lesf2+0x3c>
 8000838:	28ff      	cmp	r0, #255	; 0xff
 800083a:	d01f      	beq.n	800087c <__lesf2+0x88>
 800083c:	2800      	cmp	r0, #0
 800083e:	d11f      	bne.n	8000880 <__lesf2+0x8c>
 8000840:	2d00      	cmp	r5, #0
 8000842:	d11d      	bne.n	8000880 <__lesf2+0x8c>
 8000844:	2002      	movs	r0, #2
 8000846:	3b01      	subs	r3, #1
 8000848:	4018      	ands	r0, r3
 800084a:	3801      	subs	r0, #1
 800084c:	e015      	b.n	800087a <__lesf2+0x86>
 800084e:	2c00      	cmp	r4, #0
 8000850:	d00e      	beq.n	8000870 <__lesf2+0x7c>
 8000852:	428b      	cmp	r3, r1
 8000854:	d1e5      	bne.n	8000822 <__lesf2+0x2e>
 8000856:	2200      	movs	r2, #0
 8000858:	4290      	cmp	r0, r2
 800085a:	dc04      	bgt.n	8000866 <__lesf2+0x72>
 800085c:	42ac      	cmp	r4, r5
 800085e:	d8e0      	bhi.n	8000822 <__lesf2+0x2e>
 8000860:	2000      	movs	r0, #0
 8000862:	42ac      	cmp	r4, r5
 8000864:	d209      	bcs.n	800087a <__lesf2+0x86>
 8000866:	1e58      	subs	r0, r3, #1
 8000868:	2301      	movs	r3, #1
 800086a:	4398      	bics	r0, r3
 800086c:	3001      	adds	r0, #1
 800086e:	e004      	b.n	800087a <__lesf2+0x86>
 8000870:	2301      	movs	r3, #1
 8000872:	3901      	subs	r1, #1
 8000874:	4399      	bics	r1, r3
 8000876:	0008      	movs	r0, r1
 8000878:	3001      	adds	r0, #1
 800087a:	bd30      	pop	{r4, r5, pc}
 800087c:	2d00      	cmp	r5, #0
 800087e:	d1d7      	bne.n	8000830 <__lesf2+0x3c>
 8000880:	428b      	cmp	r3, r1
 8000882:	d1ce      	bne.n	8000822 <__lesf2+0x2e>
 8000884:	4282      	cmp	r2, r0
 8000886:	dde7      	ble.n	8000858 <__lesf2+0x64>
 8000888:	2102      	movs	r1, #2
 800088a:	1e58      	subs	r0, r3, #1
 800088c:	4008      	ands	r0, r1
 800088e:	3801      	subs	r0, #1
 8000890:	e7f3      	b.n	800087a <__lesf2+0x86>
 8000892:	46c0      	nop			; (mov r8, r8)

08000894 <__aeabi_dadd>:
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	464f      	mov	r7, r9
 8000898:	4646      	mov	r6, r8
 800089a:	46d6      	mov	lr, sl
 800089c:	000c      	movs	r4, r1
 800089e:	0309      	lsls	r1, r1, #12
 80008a0:	b5c0      	push	{r6, r7, lr}
 80008a2:	0a49      	lsrs	r1, r1, #9
 80008a4:	0f47      	lsrs	r7, r0, #29
 80008a6:	005e      	lsls	r6, r3, #1
 80008a8:	4339      	orrs	r1, r7
 80008aa:	031f      	lsls	r7, r3, #12
 80008ac:	0fdb      	lsrs	r3, r3, #31
 80008ae:	469c      	mov	ip, r3
 80008b0:	0065      	lsls	r5, r4, #1
 80008b2:	0a7b      	lsrs	r3, r7, #9
 80008b4:	0f57      	lsrs	r7, r2, #29
 80008b6:	431f      	orrs	r7, r3
 80008b8:	0d6d      	lsrs	r5, r5, #21
 80008ba:	0fe4      	lsrs	r4, r4, #31
 80008bc:	0d76      	lsrs	r6, r6, #21
 80008be:	46a1      	mov	r9, r4
 80008c0:	00c0      	lsls	r0, r0, #3
 80008c2:	46b8      	mov	r8, r7
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	1bab      	subs	r3, r5, r6
 80008c8:	4564      	cmp	r4, ip
 80008ca:	d07b      	beq.n	80009c4 <__aeabi_dadd+0x130>
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	dd5f      	ble.n	8000990 <__aeabi_dadd+0xfc>
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d000      	beq.n	80008d6 <__aeabi_dadd+0x42>
 80008d4:	e0a4      	b.n	8000a20 <__aeabi_dadd+0x18c>
 80008d6:	003e      	movs	r6, r7
 80008d8:	4316      	orrs	r6, r2
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x4a>
 80008dc:	e112      	b.n	8000b04 <__aeabi_dadd+0x270>
 80008de:	1e5e      	subs	r6, r3, #1
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x52>
 80008e4:	e19e      	b.n	8000c24 <__aeabi_dadd+0x390>
 80008e6:	1a87      	subs	r7, r0, r2
 80008e8:	4643      	mov	r3, r8
 80008ea:	42b8      	cmp	r0, r7
 80008ec:	4180      	sbcs	r0, r0
 80008ee:	2501      	movs	r5, #1
 80008f0:	1ac9      	subs	r1, r1, r3
 80008f2:	4240      	negs	r0, r0
 80008f4:	1a09      	subs	r1, r1, r0
 80008f6:	020b      	lsls	r3, r1, #8
 80008f8:	d400      	bmi.n	80008fc <__aeabi_dadd+0x68>
 80008fa:	e131      	b.n	8000b60 <__aeabi_dadd+0x2cc>
 80008fc:	0249      	lsls	r1, r1, #9
 80008fe:	0a4e      	lsrs	r6, r1, #9
 8000900:	2e00      	cmp	r6, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_dadd+0x72>
 8000904:	e16e      	b.n	8000be4 <__aeabi_dadd+0x350>
 8000906:	0030      	movs	r0, r6
 8000908:	f001 fe38 	bl	800257c <__clzsi2>
 800090c:	0003      	movs	r3, r0
 800090e:	3b08      	subs	r3, #8
 8000910:	2b1f      	cmp	r3, #31
 8000912:	dd00      	ble.n	8000916 <__aeabi_dadd+0x82>
 8000914:	e161      	b.n	8000bda <__aeabi_dadd+0x346>
 8000916:	2220      	movs	r2, #32
 8000918:	0039      	movs	r1, r7
 800091a:	1ad2      	subs	r2, r2, r3
 800091c:	409e      	lsls	r6, r3
 800091e:	40d1      	lsrs	r1, r2
 8000920:	409f      	lsls	r7, r3
 8000922:	430e      	orrs	r6, r1
 8000924:	429d      	cmp	r5, r3
 8000926:	dd00      	ble.n	800092a <__aeabi_dadd+0x96>
 8000928:	e151      	b.n	8000bce <__aeabi_dadd+0x33a>
 800092a:	1b5d      	subs	r5, r3, r5
 800092c:	1c6b      	adds	r3, r5, #1
 800092e:	2b1f      	cmp	r3, #31
 8000930:	dd00      	ble.n	8000934 <__aeabi_dadd+0xa0>
 8000932:	e17c      	b.n	8000c2e <__aeabi_dadd+0x39a>
 8000934:	2120      	movs	r1, #32
 8000936:	1ac9      	subs	r1, r1, r3
 8000938:	003d      	movs	r5, r7
 800093a:	0030      	movs	r0, r6
 800093c:	408f      	lsls	r7, r1
 800093e:	4088      	lsls	r0, r1
 8000940:	40dd      	lsrs	r5, r3
 8000942:	1e79      	subs	r1, r7, #1
 8000944:	418f      	sbcs	r7, r1
 8000946:	0031      	movs	r1, r6
 8000948:	2207      	movs	r2, #7
 800094a:	4328      	orrs	r0, r5
 800094c:	40d9      	lsrs	r1, r3
 800094e:	2500      	movs	r5, #0
 8000950:	4307      	orrs	r7, r0
 8000952:	403a      	ands	r2, r7
 8000954:	2a00      	cmp	r2, #0
 8000956:	d009      	beq.n	800096c <__aeabi_dadd+0xd8>
 8000958:	230f      	movs	r3, #15
 800095a:	403b      	ands	r3, r7
 800095c:	2b04      	cmp	r3, #4
 800095e:	d005      	beq.n	800096c <__aeabi_dadd+0xd8>
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	42bb      	cmp	r3, r7
 8000964:	41bf      	sbcs	r7, r7
 8000966:	427f      	negs	r7, r7
 8000968:	19c9      	adds	r1, r1, r7
 800096a:	001f      	movs	r7, r3
 800096c:	020b      	lsls	r3, r1, #8
 800096e:	d400      	bmi.n	8000972 <__aeabi_dadd+0xde>
 8000970:	e226      	b.n	8000dc0 <__aeabi_dadd+0x52c>
 8000972:	1c6a      	adds	r2, r5, #1
 8000974:	4bc6      	ldr	r3, [pc, #792]	; (8000c90 <__aeabi_dadd+0x3fc>)
 8000976:	0555      	lsls	r5, r2, #21
 8000978:	0d6d      	lsrs	r5, r5, #21
 800097a:	429a      	cmp	r2, r3
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0xec>
 800097e:	e106      	b.n	8000b8e <__aeabi_dadd+0x2fa>
 8000980:	4ac4      	ldr	r2, [pc, #784]	; (8000c94 <__aeabi_dadd+0x400>)
 8000982:	08ff      	lsrs	r7, r7, #3
 8000984:	400a      	ands	r2, r1
 8000986:	0753      	lsls	r3, r2, #29
 8000988:	0252      	lsls	r2, r2, #9
 800098a:	433b      	orrs	r3, r7
 800098c:	0b12      	lsrs	r2, r2, #12
 800098e:	e08e      	b.n	8000aae <__aeabi_dadd+0x21a>
 8000990:	2b00      	cmp	r3, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x102>
 8000994:	e0b8      	b.n	8000b08 <__aeabi_dadd+0x274>
 8000996:	1c6b      	adds	r3, r5, #1
 8000998:	055b      	lsls	r3, r3, #21
 800099a:	0d5b      	lsrs	r3, r3, #21
 800099c:	2b01      	cmp	r3, #1
 800099e:	dc00      	bgt.n	80009a2 <__aeabi_dadd+0x10e>
 80009a0:	e130      	b.n	8000c04 <__aeabi_dadd+0x370>
 80009a2:	1a87      	subs	r7, r0, r2
 80009a4:	4643      	mov	r3, r8
 80009a6:	42b8      	cmp	r0, r7
 80009a8:	41b6      	sbcs	r6, r6
 80009aa:	1acb      	subs	r3, r1, r3
 80009ac:	4276      	negs	r6, r6
 80009ae:	1b9e      	subs	r6, r3, r6
 80009b0:	0233      	lsls	r3, r6, #8
 80009b2:	d500      	bpl.n	80009b6 <__aeabi_dadd+0x122>
 80009b4:	e14c      	b.n	8000c50 <__aeabi_dadd+0x3bc>
 80009b6:	003b      	movs	r3, r7
 80009b8:	4333      	orrs	r3, r6
 80009ba:	d1a1      	bne.n	8000900 <__aeabi_dadd+0x6c>
 80009bc:	2200      	movs	r2, #0
 80009be:	2400      	movs	r4, #0
 80009c0:	2500      	movs	r5, #0
 80009c2:	e070      	b.n	8000aa6 <__aeabi_dadd+0x212>
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	dc00      	bgt.n	80009ca <__aeabi_dadd+0x136>
 80009c8:	e0e5      	b.n	8000b96 <__aeabi_dadd+0x302>
 80009ca:	2e00      	cmp	r6, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x13c>
 80009ce:	e083      	b.n	8000ad8 <__aeabi_dadd+0x244>
 80009d0:	4eaf      	ldr	r6, [pc, #700]	; (8000c90 <__aeabi_dadd+0x3fc>)
 80009d2:	42b5      	cmp	r5, r6
 80009d4:	d060      	beq.n	8000a98 <__aeabi_dadd+0x204>
 80009d6:	2680      	movs	r6, #128	; 0x80
 80009d8:	0436      	lsls	r6, r6, #16
 80009da:	4337      	orrs	r7, r6
 80009dc:	46b8      	mov	r8, r7
 80009de:	2b38      	cmp	r3, #56	; 0x38
 80009e0:	dc00      	bgt.n	80009e4 <__aeabi_dadd+0x150>
 80009e2:	e13e      	b.n	8000c62 <__aeabi_dadd+0x3ce>
 80009e4:	4643      	mov	r3, r8
 80009e6:	4313      	orrs	r3, r2
 80009e8:	001f      	movs	r7, r3
 80009ea:	1e7a      	subs	r2, r7, #1
 80009ec:	4197      	sbcs	r7, r2
 80009ee:	183f      	adds	r7, r7, r0
 80009f0:	4287      	cmp	r7, r0
 80009f2:	4180      	sbcs	r0, r0
 80009f4:	4240      	negs	r0, r0
 80009f6:	1809      	adds	r1, r1, r0
 80009f8:	020b      	lsls	r3, r1, #8
 80009fa:	d400      	bmi.n	80009fe <__aeabi_dadd+0x16a>
 80009fc:	e0b0      	b.n	8000b60 <__aeabi_dadd+0x2cc>
 80009fe:	4ba4      	ldr	r3, [pc, #656]	; (8000c90 <__aeabi_dadd+0x3fc>)
 8000a00:	3501      	adds	r5, #1
 8000a02:	429d      	cmp	r5, r3
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x174>
 8000a06:	e0c3      	b.n	8000b90 <__aeabi_dadd+0x2fc>
 8000a08:	4aa2      	ldr	r2, [pc, #648]	; (8000c94 <__aeabi_dadd+0x400>)
 8000a0a:	087b      	lsrs	r3, r7, #1
 8000a0c:	400a      	ands	r2, r1
 8000a0e:	2101      	movs	r1, #1
 8000a10:	400f      	ands	r7, r1
 8000a12:	431f      	orrs	r7, r3
 8000a14:	0851      	lsrs	r1, r2, #1
 8000a16:	07d3      	lsls	r3, r2, #31
 8000a18:	2207      	movs	r2, #7
 8000a1a:	431f      	orrs	r7, r3
 8000a1c:	403a      	ands	r2, r7
 8000a1e:	e799      	b.n	8000954 <__aeabi_dadd+0xc0>
 8000a20:	4e9b      	ldr	r6, [pc, #620]	; (8000c90 <__aeabi_dadd+0x3fc>)
 8000a22:	42b5      	cmp	r5, r6
 8000a24:	d038      	beq.n	8000a98 <__aeabi_dadd+0x204>
 8000a26:	2680      	movs	r6, #128	; 0x80
 8000a28:	0436      	lsls	r6, r6, #16
 8000a2a:	4337      	orrs	r7, r6
 8000a2c:	46b8      	mov	r8, r7
 8000a2e:	2b38      	cmp	r3, #56	; 0x38
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_dadd+0x1a0>
 8000a32:	e0dc      	b.n	8000bee <__aeabi_dadd+0x35a>
 8000a34:	2b1f      	cmp	r3, #31
 8000a36:	dc00      	bgt.n	8000a3a <__aeabi_dadd+0x1a6>
 8000a38:	e130      	b.n	8000c9c <__aeabi_dadd+0x408>
 8000a3a:	001e      	movs	r6, r3
 8000a3c:	4647      	mov	r7, r8
 8000a3e:	3e20      	subs	r6, #32
 8000a40:	40f7      	lsrs	r7, r6
 8000a42:	46bc      	mov	ip, r7
 8000a44:	2b20      	cmp	r3, #32
 8000a46:	d004      	beq.n	8000a52 <__aeabi_dadd+0x1be>
 8000a48:	2640      	movs	r6, #64	; 0x40
 8000a4a:	1af3      	subs	r3, r6, r3
 8000a4c:	4646      	mov	r6, r8
 8000a4e:	409e      	lsls	r6, r3
 8000a50:	4332      	orrs	r2, r6
 8000a52:	0017      	movs	r7, r2
 8000a54:	4663      	mov	r3, ip
 8000a56:	1e7a      	subs	r2, r7, #1
 8000a58:	4197      	sbcs	r7, r2
 8000a5a:	431f      	orrs	r7, r3
 8000a5c:	e0cc      	b.n	8000bf8 <__aeabi_dadd+0x364>
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x1d0>
 8000a62:	e204      	b.n	8000e6e <__aeabi_dadd+0x5da>
 8000a64:	4643      	mov	r3, r8
 8000a66:	4313      	orrs	r3, r2
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dadd+0x1d8>
 8000a6a:	e159      	b.n	8000d20 <__aeabi_dadd+0x48c>
 8000a6c:	074b      	lsls	r3, r1, #29
 8000a6e:	08c0      	lsrs	r0, r0, #3
 8000a70:	4318      	orrs	r0, r3
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	08c9      	lsrs	r1, r1, #3
 8000a76:	031b      	lsls	r3, r3, #12
 8000a78:	4219      	tst	r1, r3
 8000a7a:	d008      	beq.n	8000a8e <__aeabi_dadd+0x1fa>
 8000a7c:	4645      	mov	r5, r8
 8000a7e:	08ed      	lsrs	r5, r5, #3
 8000a80:	421d      	tst	r5, r3
 8000a82:	d104      	bne.n	8000a8e <__aeabi_dadd+0x1fa>
 8000a84:	4643      	mov	r3, r8
 8000a86:	08d0      	lsrs	r0, r2, #3
 8000a88:	0759      	lsls	r1, r3, #29
 8000a8a:	4308      	orrs	r0, r1
 8000a8c:	0029      	movs	r1, r5
 8000a8e:	0f42      	lsrs	r2, r0, #29
 8000a90:	00c9      	lsls	r1, r1, #3
 8000a92:	4d7f      	ldr	r5, [pc, #508]	; (8000c90 <__aeabi_dadd+0x3fc>)
 8000a94:	4311      	orrs	r1, r2
 8000a96:	00c0      	lsls	r0, r0, #3
 8000a98:	074b      	lsls	r3, r1, #29
 8000a9a:	08ca      	lsrs	r2, r1, #3
 8000a9c:	497c      	ldr	r1, [pc, #496]	; (8000c90 <__aeabi_dadd+0x3fc>)
 8000a9e:	08c0      	lsrs	r0, r0, #3
 8000aa0:	4303      	orrs	r3, r0
 8000aa2:	428d      	cmp	r5, r1
 8000aa4:	d068      	beq.n	8000b78 <__aeabi_dadd+0x2e4>
 8000aa6:	0312      	lsls	r2, r2, #12
 8000aa8:	056d      	lsls	r5, r5, #21
 8000aaa:	0b12      	lsrs	r2, r2, #12
 8000aac:	0d6d      	lsrs	r5, r5, #21
 8000aae:	2100      	movs	r1, #0
 8000ab0:	0312      	lsls	r2, r2, #12
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	0b13      	lsrs	r3, r2, #12
 8000ab6:	0d0a      	lsrs	r2, r1, #20
 8000ab8:	0512      	lsls	r2, r2, #20
 8000aba:	431a      	orrs	r2, r3
 8000abc:	4b76      	ldr	r3, [pc, #472]	; (8000c98 <__aeabi_dadd+0x404>)
 8000abe:	052d      	lsls	r5, r5, #20
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	432b      	orrs	r3, r5
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	07e4      	lsls	r4, r4, #31
 8000ac8:	085b      	lsrs	r3, r3, #1
 8000aca:	4323      	orrs	r3, r4
 8000acc:	0019      	movs	r1, r3
 8000ace:	bc1c      	pop	{r2, r3, r4}
 8000ad0:	4690      	mov	r8, r2
 8000ad2:	4699      	mov	r9, r3
 8000ad4:	46a2      	mov	sl, r4
 8000ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad8:	003e      	movs	r6, r7
 8000ada:	4316      	orrs	r6, r2
 8000adc:	d012      	beq.n	8000b04 <__aeabi_dadd+0x270>
 8000ade:	1e5e      	subs	r6, r3, #1
 8000ae0:	2e00      	cmp	r6, #0
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_dadd+0x252>
 8000ae4:	e100      	b.n	8000ce8 <__aeabi_dadd+0x454>
 8000ae6:	1887      	adds	r7, r0, r2
 8000ae8:	4287      	cmp	r7, r0
 8000aea:	4180      	sbcs	r0, r0
 8000aec:	4441      	add	r1, r8
 8000aee:	4240      	negs	r0, r0
 8000af0:	1809      	adds	r1, r1, r0
 8000af2:	2501      	movs	r5, #1
 8000af4:	020b      	lsls	r3, r1, #8
 8000af6:	d533      	bpl.n	8000b60 <__aeabi_dadd+0x2cc>
 8000af8:	2502      	movs	r5, #2
 8000afa:	e785      	b.n	8000a08 <__aeabi_dadd+0x174>
 8000afc:	4664      	mov	r4, ip
 8000afe:	0033      	movs	r3, r6
 8000b00:	4641      	mov	r1, r8
 8000b02:	0010      	movs	r0, r2
 8000b04:	001d      	movs	r5, r3
 8000b06:	e7c7      	b.n	8000a98 <__aeabi_dadd+0x204>
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x27a>
 8000b0c:	e0da      	b.n	8000cc4 <__aeabi_dadd+0x430>
 8000b0e:	000c      	movs	r4, r1
 8000b10:	4304      	orrs	r4, r0
 8000b12:	d0f3      	beq.n	8000afc <__aeabi_dadd+0x268>
 8000b14:	1c5c      	adds	r4, r3, #1
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x286>
 8000b18:	e19f      	b.n	8000e5a <__aeabi_dadd+0x5c6>
 8000b1a:	4c5d      	ldr	r4, [pc, #372]	; (8000c90 <__aeabi_dadd+0x3fc>)
 8000b1c:	42a6      	cmp	r6, r4
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x28e>
 8000b20:	e12f      	b.n	8000d82 <__aeabi_dadd+0x4ee>
 8000b22:	43db      	mvns	r3, r3
 8000b24:	2b38      	cmp	r3, #56	; 0x38
 8000b26:	dd00      	ble.n	8000b2a <__aeabi_dadd+0x296>
 8000b28:	e166      	b.n	8000df8 <__aeabi_dadd+0x564>
 8000b2a:	2b1f      	cmp	r3, #31
 8000b2c:	dd00      	ble.n	8000b30 <__aeabi_dadd+0x29c>
 8000b2e:	e183      	b.n	8000e38 <__aeabi_dadd+0x5a4>
 8000b30:	2420      	movs	r4, #32
 8000b32:	0005      	movs	r5, r0
 8000b34:	1ae4      	subs	r4, r4, r3
 8000b36:	000f      	movs	r7, r1
 8000b38:	40dd      	lsrs	r5, r3
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	40a0      	lsls	r0, r4
 8000b3e:	4643      	mov	r3, r8
 8000b40:	40a7      	lsls	r7, r4
 8000b42:	1a5b      	subs	r3, r3, r1
 8000b44:	1e44      	subs	r4, r0, #1
 8000b46:	41a0      	sbcs	r0, r4
 8000b48:	4698      	mov	r8, r3
 8000b4a:	432f      	orrs	r7, r5
 8000b4c:	4338      	orrs	r0, r7
 8000b4e:	1a17      	subs	r7, r2, r0
 8000b50:	42ba      	cmp	r2, r7
 8000b52:	4192      	sbcs	r2, r2
 8000b54:	4643      	mov	r3, r8
 8000b56:	4252      	negs	r2, r2
 8000b58:	1a99      	subs	r1, r3, r2
 8000b5a:	4664      	mov	r4, ip
 8000b5c:	0035      	movs	r5, r6
 8000b5e:	e6ca      	b.n	80008f6 <__aeabi_dadd+0x62>
 8000b60:	2207      	movs	r2, #7
 8000b62:	403a      	ands	r2, r7
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	d000      	beq.n	8000b6a <__aeabi_dadd+0x2d6>
 8000b68:	e6f6      	b.n	8000958 <__aeabi_dadd+0xc4>
 8000b6a:	074b      	lsls	r3, r1, #29
 8000b6c:	08ca      	lsrs	r2, r1, #3
 8000b6e:	4948      	ldr	r1, [pc, #288]	; (8000c90 <__aeabi_dadd+0x3fc>)
 8000b70:	08ff      	lsrs	r7, r7, #3
 8000b72:	433b      	orrs	r3, r7
 8000b74:	428d      	cmp	r5, r1
 8000b76:	d196      	bne.n	8000aa6 <__aeabi_dadd+0x212>
 8000b78:	0019      	movs	r1, r3
 8000b7a:	4311      	orrs	r1, r2
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dadd+0x2ec>
 8000b7e:	e19e      	b.n	8000ebe <__aeabi_dadd+0x62a>
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	0309      	lsls	r1, r1, #12
 8000b84:	430a      	orrs	r2, r1
 8000b86:	0312      	lsls	r2, r2, #12
 8000b88:	0b12      	lsrs	r2, r2, #12
 8000b8a:	4d41      	ldr	r5, [pc, #260]	; (8000c90 <__aeabi_dadd+0x3fc>)
 8000b8c:	e78f      	b.n	8000aae <__aeabi_dadd+0x21a>
 8000b8e:	0015      	movs	r5, r2
 8000b90:	2200      	movs	r2, #0
 8000b92:	2300      	movs	r3, #0
 8000b94:	e78b      	b.n	8000aae <__aeabi_dadd+0x21a>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d000      	beq.n	8000b9c <__aeabi_dadd+0x308>
 8000b9a:	e0c7      	b.n	8000d2c <__aeabi_dadd+0x498>
 8000b9c:	1c6b      	adds	r3, r5, #1
 8000b9e:	055f      	lsls	r7, r3, #21
 8000ba0:	0d7f      	lsrs	r7, r7, #21
 8000ba2:	2f01      	cmp	r7, #1
 8000ba4:	dc00      	bgt.n	8000ba8 <__aeabi_dadd+0x314>
 8000ba6:	e0f1      	b.n	8000d8c <__aeabi_dadd+0x4f8>
 8000ba8:	4d39      	ldr	r5, [pc, #228]	; (8000c90 <__aeabi_dadd+0x3fc>)
 8000baa:	42ab      	cmp	r3, r5
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_dadd+0x31c>
 8000bae:	e0b9      	b.n	8000d24 <__aeabi_dadd+0x490>
 8000bb0:	1885      	adds	r5, r0, r2
 8000bb2:	000a      	movs	r2, r1
 8000bb4:	4285      	cmp	r5, r0
 8000bb6:	4189      	sbcs	r1, r1
 8000bb8:	4442      	add	r2, r8
 8000bba:	4249      	negs	r1, r1
 8000bbc:	1851      	adds	r1, r2, r1
 8000bbe:	2207      	movs	r2, #7
 8000bc0:	07cf      	lsls	r7, r1, #31
 8000bc2:	086d      	lsrs	r5, r5, #1
 8000bc4:	432f      	orrs	r7, r5
 8000bc6:	0849      	lsrs	r1, r1, #1
 8000bc8:	403a      	ands	r2, r7
 8000bca:	001d      	movs	r5, r3
 8000bcc:	e6c2      	b.n	8000954 <__aeabi_dadd+0xc0>
 8000bce:	2207      	movs	r2, #7
 8000bd0:	4930      	ldr	r1, [pc, #192]	; (8000c94 <__aeabi_dadd+0x400>)
 8000bd2:	1aed      	subs	r5, r5, r3
 8000bd4:	4031      	ands	r1, r6
 8000bd6:	403a      	ands	r2, r7
 8000bd8:	e6bc      	b.n	8000954 <__aeabi_dadd+0xc0>
 8000bda:	003e      	movs	r6, r7
 8000bdc:	3828      	subs	r0, #40	; 0x28
 8000bde:	4086      	lsls	r6, r0
 8000be0:	2700      	movs	r7, #0
 8000be2:	e69f      	b.n	8000924 <__aeabi_dadd+0x90>
 8000be4:	0038      	movs	r0, r7
 8000be6:	f001 fcc9 	bl	800257c <__clzsi2>
 8000bea:	3020      	adds	r0, #32
 8000bec:	e68e      	b.n	800090c <__aeabi_dadd+0x78>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	001f      	movs	r7, r3
 8000bf4:	1e7a      	subs	r2, r7, #1
 8000bf6:	4197      	sbcs	r7, r2
 8000bf8:	1bc7      	subs	r7, r0, r7
 8000bfa:	42b8      	cmp	r0, r7
 8000bfc:	4180      	sbcs	r0, r0
 8000bfe:	4240      	negs	r0, r0
 8000c00:	1a09      	subs	r1, r1, r0
 8000c02:	e678      	b.n	80008f6 <__aeabi_dadd+0x62>
 8000c04:	000e      	movs	r6, r1
 8000c06:	003b      	movs	r3, r7
 8000c08:	4306      	orrs	r6, r0
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	2d00      	cmp	r5, #0
 8000c0e:	d161      	bne.n	8000cd4 <__aeabi_dadd+0x440>
 8000c10:	2e00      	cmp	r6, #0
 8000c12:	d000      	beq.n	8000c16 <__aeabi_dadd+0x382>
 8000c14:	e0f4      	b.n	8000e00 <__aeabi_dadd+0x56c>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dadd+0x388>
 8000c1a:	e11b      	b.n	8000e54 <__aeabi_dadd+0x5c0>
 8000c1c:	4664      	mov	r4, ip
 8000c1e:	0039      	movs	r1, r7
 8000c20:	0010      	movs	r0, r2
 8000c22:	e739      	b.n	8000a98 <__aeabi_dadd+0x204>
 8000c24:	4f1a      	ldr	r7, [pc, #104]	; (8000c90 <__aeabi_dadd+0x3fc>)
 8000c26:	42bb      	cmp	r3, r7
 8000c28:	d07a      	beq.n	8000d20 <__aeabi_dadd+0x48c>
 8000c2a:	0033      	movs	r3, r6
 8000c2c:	e6ff      	b.n	8000a2e <__aeabi_dadd+0x19a>
 8000c2e:	0030      	movs	r0, r6
 8000c30:	3d1f      	subs	r5, #31
 8000c32:	40e8      	lsrs	r0, r5
 8000c34:	2b20      	cmp	r3, #32
 8000c36:	d003      	beq.n	8000c40 <__aeabi_dadd+0x3ac>
 8000c38:	2140      	movs	r1, #64	; 0x40
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	409e      	lsls	r6, r3
 8000c3e:	4337      	orrs	r7, r6
 8000c40:	1e7b      	subs	r3, r7, #1
 8000c42:	419f      	sbcs	r7, r3
 8000c44:	2207      	movs	r2, #7
 8000c46:	4307      	orrs	r7, r0
 8000c48:	403a      	ands	r2, r7
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	e789      	b.n	8000b64 <__aeabi_dadd+0x2d0>
 8000c50:	1a17      	subs	r7, r2, r0
 8000c52:	4643      	mov	r3, r8
 8000c54:	42ba      	cmp	r2, r7
 8000c56:	41b6      	sbcs	r6, r6
 8000c58:	1a59      	subs	r1, r3, r1
 8000c5a:	4276      	negs	r6, r6
 8000c5c:	1b8e      	subs	r6, r1, r6
 8000c5e:	4664      	mov	r4, ip
 8000c60:	e64e      	b.n	8000900 <__aeabi_dadd+0x6c>
 8000c62:	2b1f      	cmp	r3, #31
 8000c64:	dd00      	ble.n	8000c68 <__aeabi_dadd+0x3d4>
 8000c66:	e0ad      	b.n	8000dc4 <__aeabi_dadd+0x530>
 8000c68:	2620      	movs	r6, #32
 8000c6a:	4647      	mov	r7, r8
 8000c6c:	1af6      	subs	r6, r6, r3
 8000c6e:	40b7      	lsls	r7, r6
 8000c70:	46b9      	mov	r9, r7
 8000c72:	0017      	movs	r7, r2
 8000c74:	46b2      	mov	sl, r6
 8000c76:	40df      	lsrs	r7, r3
 8000c78:	464e      	mov	r6, r9
 8000c7a:	433e      	orrs	r6, r7
 8000c7c:	0037      	movs	r7, r6
 8000c7e:	4656      	mov	r6, sl
 8000c80:	40b2      	lsls	r2, r6
 8000c82:	1e56      	subs	r6, r2, #1
 8000c84:	41b2      	sbcs	r2, r6
 8000c86:	4317      	orrs	r7, r2
 8000c88:	4642      	mov	r2, r8
 8000c8a:	40da      	lsrs	r2, r3
 8000c8c:	1889      	adds	r1, r1, r2
 8000c8e:	e6ae      	b.n	80009ee <__aeabi_dadd+0x15a>
 8000c90:	000007ff 	.word	0x000007ff
 8000c94:	ff7fffff 	.word	0xff7fffff
 8000c98:	800fffff 	.word	0x800fffff
 8000c9c:	2620      	movs	r6, #32
 8000c9e:	4647      	mov	r7, r8
 8000ca0:	1af6      	subs	r6, r6, r3
 8000ca2:	40b7      	lsls	r7, r6
 8000ca4:	46b9      	mov	r9, r7
 8000ca6:	0017      	movs	r7, r2
 8000ca8:	46b2      	mov	sl, r6
 8000caa:	40df      	lsrs	r7, r3
 8000cac:	464e      	mov	r6, r9
 8000cae:	433e      	orrs	r6, r7
 8000cb0:	0037      	movs	r7, r6
 8000cb2:	4656      	mov	r6, sl
 8000cb4:	40b2      	lsls	r2, r6
 8000cb6:	1e56      	subs	r6, r2, #1
 8000cb8:	41b2      	sbcs	r2, r6
 8000cba:	4317      	orrs	r7, r2
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	40da      	lsrs	r2, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	e799      	b.n	8000bf8 <__aeabi_dadd+0x364>
 8000cc4:	4c7f      	ldr	r4, [pc, #508]	; (8000ec4 <__aeabi_dadd+0x630>)
 8000cc6:	42a6      	cmp	r6, r4
 8000cc8:	d05b      	beq.n	8000d82 <__aeabi_dadd+0x4ee>
 8000cca:	2480      	movs	r4, #128	; 0x80
 8000ccc:	0424      	lsls	r4, r4, #16
 8000cce:	425b      	negs	r3, r3
 8000cd0:	4321      	orrs	r1, r4
 8000cd2:	e727      	b.n	8000b24 <__aeabi_dadd+0x290>
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d10c      	bne.n	8000cf2 <__aeabi_dadd+0x45e>
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x44a>
 8000cdc:	e0cb      	b.n	8000e76 <__aeabi_dadd+0x5e2>
 8000cde:	4664      	mov	r4, ip
 8000ce0:	0039      	movs	r1, r7
 8000ce2:	0010      	movs	r0, r2
 8000ce4:	4d77      	ldr	r5, [pc, #476]	; (8000ec4 <__aeabi_dadd+0x630>)
 8000ce6:	e6d7      	b.n	8000a98 <__aeabi_dadd+0x204>
 8000ce8:	4f76      	ldr	r7, [pc, #472]	; (8000ec4 <__aeabi_dadd+0x630>)
 8000cea:	42bb      	cmp	r3, r7
 8000cec:	d018      	beq.n	8000d20 <__aeabi_dadd+0x48c>
 8000cee:	0033      	movs	r3, r6
 8000cf0:	e675      	b.n	80009de <__aeabi_dadd+0x14a>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d014      	beq.n	8000d20 <__aeabi_dadd+0x48c>
 8000cf6:	074b      	lsls	r3, r1, #29
 8000cf8:	08c0      	lsrs	r0, r0, #3
 8000cfa:	4318      	orrs	r0, r3
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	08c9      	lsrs	r1, r1, #3
 8000d00:	031b      	lsls	r3, r3, #12
 8000d02:	4219      	tst	r1, r3
 8000d04:	d007      	beq.n	8000d16 <__aeabi_dadd+0x482>
 8000d06:	08fc      	lsrs	r4, r7, #3
 8000d08:	421c      	tst	r4, r3
 8000d0a:	d104      	bne.n	8000d16 <__aeabi_dadd+0x482>
 8000d0c:	0779      	lsls	r1, r7, #29
 8000d0e:	08d0      	lsrs	r0, r2, #3
 8000d10:	4308      	orrs	r0, r1
 8000d12:	46e1      	mov	r9, ip
 8000d14:	0021      	movs	r1, r4
 8000d16:	464c      	mov	r4, r9
 8000d18:	0f42      	lsrs	r2, r0, #29
 8000d1a:	00c9      	lsls	r1, r1, #3
 8000d1c:	4311      	orrs	r1, r2
 8000d1e:	00c0      	lsls	r0, r0, #3
 8000d20:	4d68      	ldr	r5, [pc, #416]	; (8000ec4 <__aeabi_dadd+0x630>)
 8000d22:	e6b9      	b.n	8000a98 <__aeabi_dadd+0x204>
 8000d24:	001d      	movs	r5, r3
 8000d26:	2200      	movs	r2, #0
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e6c0      	b.n	8000aae <__aeabi_dadd+0x21a>
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d15b      	bne.n	8000de8 <__aeabi_dadd+0x554>
 8000d30:	000d      	movs	r5, r1
 8000d32:	4305      	orrs	r5, r0
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dadd+0x4a4>
 8000d36:	e6e2      	b.n	8000afe <__aeabi_dadd+0x26a>
 8000d38:	1c5d      	adds	r5, r3, #1
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dadd+0x4aa>
 8000d3c:	e0b0      	b.n	8000ea0 <__aeabi_dadd+0x60c>
 8000d3e:	4d61      	ldr	r5, [pc, #388]	; (8000ec4 <__aeabi_dadd+0x630>)
 8000d40:	42ae      	cmp	r6, r5
 8000d42:	d01f      	beq.n	8000d84 <__aeabi_dadd+0x4f0>
 8000d44:	43db      	mvns	r3, r3
 8000d46:	2b38      	cmp	r3, #56	; 0x38
 8000d48:	dc71      	bgt.n	8000e2e <__aeabi_dadd+0x59a>
 8000d4a:	2b1f      	cmp	r3, #31
 8000d4c:	dd00      	ble.n	8000d50 <__aeabi_dadd+0x4bc>
 8000d4e:	e096      	b.n	8000e7e <__aeabi_dadd+0x5ea>
 8000d50:	2520      	movs	r5, #32
 8000d52:	000f      	movs	r7, r1
 8000d54:	1aed      	subs	r5, r5, r3
 8000d56:	40af      	lsls	r7, r5
 8000d58:	46b9      	mov	r9, r7
 8000d5a:	0007      	movs	r7, r0
 8000d5c:	46aa      	mov	sl, r5
 8000d5e:	40df      	lsrs	r7, r3
 8000d60:	464d      	mov	r5, r9
 8000d62:	433d      	orrs	r5, r7
 8000d64:	002f      	movs	r7, r5
 8000d66:	4655      	mov	r5, sl
 8000d68:	40a8      	lsls	r0, r5
 8000d6a:	40d9      	lsrs	r1, r3
 8000d6c:	1e45      	subs	r5, r0, #1
 8000d6e:	41a8      	sbcs	r0, r5
 8000d70:	4488      	add	r8, r1
 8000d72:	4307      	orrs	r7, r0
 8000d74:	18bf      	adds	r7, r7, r2
 8000d76:	4297      	cmp	r7, r2
 8000d78:	4192      	sbcs	r2, r2
 8000d7a:	4251      	negs	r1, r2
 8000d7c:	4441      	add	r1, r8
 8000d7e:	0035      	movs	r5, r6
 8000d80:	e63a      	b.n	80009f8 <__aeabi_dadd+0x164>
 8000d82:	4664      	mov	r4, ip
 8000d84:	0035      	movs	r5, r6
 8000d86:	4641      	mov	r1, r8
 8000d88:	0010      	movs	r0, r2
 8000d8a:	e685      	b.n	8000a98 <__aeabi_dadd+0x204>
 8000d8c:	000b      	movs	r3, r1
 8000d8e:	4303      	orrs	r3, r0
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d000      	beq.n	8000d96 <__aeabi_dadd+0x502>
 8000d94:	e663      	b.n	8000a5e <__aeabi_dadd+0x1ca>
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f5      	beq.n	8000d86 <__aeabi_dadd+0x4f2>
 8000d9a:	4643      	mov	r3, r8
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dadd+0x50e>
 8000da0:	e67a      	b.n	8000a98 <__aeabi_dadd+0x204>
 8000da2:	1887      	adds	r7, r0, r2
 8000da4:	4287      	cmp	r7, r0
 8000da6:	4180      	sbcs	r0, r0
 8000da8:	2207      	movs	r2, #7
 8000daa:	4441      	add	r1, r8
 8000dac:	4240      	negs	r0, r0
 8000dae:	1809      	adds	r1, r1, r0
 8000db0:	403a      	ands	r2, r7
 8000db2:	020b      	lsls	r3, r1, #8
 8000db4:	d400      	bmi.n	8000db8 <__aeabi_dadd+0x524>
 8000db6:	e6d5      	b.n	8000b64 <__aeabi_dadd+0x2d0>
 8000db8:	4b43      	ldr	r3, [pc, #268]	; (8000ec8 <__aeabi_dadd+0x634>)
 8000dba:	3501      	adds	r5, #1
 8000dbc:	4019      	ands	r1, r3
 8000dbe:	e5c9      	b.n	8000954 <__aeabi_dadd+0xc0>
 8000dc0:	0038      	movs	r0, r7
 8000dc2:	e669      	b.n	8000a98 <__aeabi_dadd+0x204>
 8000dc4:	001e      	movs	r6, r3
 8000dc6:	4647      	mov	r7, r8
 8000dc8:	3e20      	subs	r6, #32
 8000dca:	40f7      	lsrs	r7, r6
 8000dcc:	46bc      	mov	ip, r7
 8000dce:	2b20      	cmp	r3, #32
 8000dd0:	d004      	beq.n	8000ddc <__aeabi_dadd+0x548>
 8000dd2:	2640      	movs	r6, #64	; 0x40
 8000dd4:	1af3      	subs	r3, r6, r3
 8000dd6:	4646      	mov	r6, r8
 8000dd8:	409e      	lsls	r6, r3
 8000dda:	4332      	orrs	r2, r6
 8000ddc:	0017      	movs	r7, r2
 8000dde:	4663      	mov	r3, ip
 8000de0:	1e7a      	subs	r2, r7, #1
 8000de2:	4197      	sbcs	r7, r2
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e602      	b.n	80009ee <__aeabi_dadd+0x15a>
 8000de8:	4d36      	ldr	r5, [pc, #216]	; (8000ec4 <__aeabi_dadd+0x630>)
 8000dea:	42ae      	cmp	r6, r5
 8000dec:	d0ca      	beq.n	8000d84 <__aeabi_dadd+0x4f0>
 8000dee:	2580      	movs	r5, #128	; 0x80
 8000df0:	042d      	lsls	r5, r5, #16
 8000df2:	425b      	negs	r3, r3
 8000df4:	4329      	orrs	r1, r5
 8000df6:	e7a6      	b.n	8000d46 <__aeabi_dadd+0x4b2>
 8000df8:	4308      	orrs	r0, r1
 8000dfa:	1e41      	subs	r1, r0, #1
 8000dfc:	4188      	sbcs	r0, r1
 8000dfe:	e6a6      	b.n	8000b4e <__aeabi_dadd+0x2ba>
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x572>
 8000e04:	e648      	b.n	8000a98 <__aeabi_dadd+0x204>
 8000e06:	1a87      	subs	r7, r0, r2
 8000e08:	4643      	mov	r3, r8
 8000e0a:	42b8      	cmp	r0, r7
 8000e0c:	41b6      	sbcs	r6, r6
 8000e0e:	1acb      	subs	r3, r1, r3
 8000e10:	4276      	negs	r6, r6
 8000e12:	1b9e      	subs	r6, r3, r6
 8000e14:	0233      	lsls	r3, r6, #8
 8000e16:	d54b      	bpl.n	8000eb0 <__aeabi_dadd+0x61c>
 8000e18:	1a17      	subs	r7, r2, r0
 8000e1a:	4643      	mov	r3, r8
 8000e1c:	42ba      	cmp	r2, r7
 8000e1e:	4192      	sbcs	r2, r2
 8000e20:	1a59      	subs	r1, r3, r1
 8000e22:	4252      	negs	r2, r2
 8000e24:	1a89      	subs	r1, r1, r2
 8000e26:	2207      	movs	r2, #7
 8000e28:	4664      	mov	r4, ip
 8000e2a:	403a      	ands	r2, r7
 8000e2c:	e592      	b.n	8000954 <__aeabi_dadd+0xc0>
 8000e2e:	4301      	orrs	r1, r0
 8000e30:	000f      	movs	r7, r1
 8000e32:	1e79      	subs	r1, r7, #1
 8000e34:	418f      	sbcs	r7, r1
 8000e36:	e79d      	b.n	8000d74 <__aeabi_dadd+0x4e0>
 8000e38:	001c      	movs	r4, r3
 8000e3a:	000f      	movs	r7, r1
 8000e3c:	3c20      	subs	r4, #32
 8000e3e:	40e7      	lsrs	r7, r4
 8000e40:	2b20      	cmp	r3, #32
 8000e42:	d003      	beq.n	8000e4c <__aeabi_dadd+0x5b8>
 8000e44:	2440      	movs	r4, #64	; 0x40
 8000e46:	1ae3      	subs	r3, r4, r3
 8000e48:	4099      	lsls	r1, r3
 8000e4a:	4308      	orrs	r0, r1
 8000e4c:	1e41      	subs	r1, r0, #1
 8000e4e:	4188      	sbcs	r0, r1
 8000e50:	4338      	orrs	r0, r7
 8000e52:	e67c      	b.n	8000b4e <__aeabi_dadd+0x2ba>
 8000e54:	2200      	movs	r2, #0
 8000e56:	2400      	movs	r4, #0
 8000e58:	e625      	b.n	8000aa6 <__aeabi_dadd+0x212>
 8000e5a:	1a17      	subs	r7, r2, r0
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	42ba      	cmp	r2, r7
 8000e60:	4192      	sbcs	r2, r2
 8000e62:	1a59      	subs	r1, r3, r1
 8000e64:	4252      	negs	r2, r2
 8000e66:	1a89      	subs	r1, r1, r2
 8000e68:	4664      	mov	r4, ip
 8000e6a:	0035      	movs	r5, r6
 8000e6c:	e543      	b.n	80008f6 <__aeabi_dadd+0x62>
 8000e6e:	4641      	mov	r1, r8
 8000e70:	0010      	movs	r0, r2
 8000e72:	4d14      	ldr	r5, [pc, #80]	; (8000ec4 <__aeabi_dadd+0x630>)
 8000e74:	e610      	b.n	8000a98 <__aeabi_dadd+0x204>
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	2400      	movs	r4, #0
 8000e7a:	0312      	lsls	r2, r2, #12
 8000e7c:	e680      	b.n	8000b80 <__aeabi_dadd+0x2ec>
 8000e7e:	001d      	movs	r5, r3
 8000e80:	000f      	movs	r7, r1
 8000e82:	3d20      	subs	r5, #32
 8000e84:	40ef      	lsrs	r7, r5
 8000e86:	46bc      	mov	ip, r7
 8000e88:	2b20      	cmp	r3, #32
 8000e8a:	d003      	beq.n	8000e94 <__aeabi_dadd+0x600>
 8000e8c:	2540      	movs	r5, #64	; 0x40
 8000e8e:	1aeb      	subs	r3, r5, r3
 8000e90:	4099      	lsls	r1, r3
 8000e92:	4308      	orrs	r0, r1
 8000e94:	0007      	movs	r7, r0
 8000e96:	4663      	mov	r3, ip
 8000e98:	1e78      	subs	r0, r7, #1
 8000e9a:	4187      	sbcs	r7, r0
 8000e9c:	431f      	orrs	r7, r3
 8000e9e:	e769      	b.n	8000d74 <__aeabi_dadd+0x4e0>
 8000ea0:	1887      	adds	r7, r0, r2
 8000ea2:	4297      	cmp	r7, r2
 8000ea4:	419b      	sbcs	r3, r3
 8000ea6:	4441      	add	r1, r8
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	18c9      	adds	r1, r1, r3
 8000eac:	0035      	movs	r5, r6
 8000eae:	e5a3      	b.n	80009f8 <__aeabi_dadd+0x164>
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	4333      	orrs	r3, r6
 8000eb4:	d0ce      	beq.n	8000e54 <__aeabi_dadd+0x5c0>
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	0031      	movs	r1, r6
 8000eba:	403a      	ands	r2, r7
 8000ebc:	e652      	b.n	8000b64 <__aeabi_dadd+0x2d0>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	e5f4      	b.n	8000aae <__aeabi_dadd+0x21a>
 8000ec4:	000007ff 	.word	0x000007ff
 8000ec8:	ff7fffff 	.word	0xff7fffff

08000ecc <__aeabi_ddiv>:
 8000ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ece:	4657      	mov	r7, sl
 8000ed0:	46de      	mov	lr, fp
 8000ed2:	464e      	mov	r6, r9
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	b5e0      	push	{r5, r6, r7, lr}
 8000ed8:	4683      	mov	fp, r0
 8000eda:	0007      	movs	r7, r0
 8000edc:	030e      	lsls	r6, r1, #12
 8000ede:	0048      	lsls	r0, r1, #1
 8000ee0:	b085      	sub	sp, #20
 8000ee2:	4692      	mov	sl, r2
 8000ee4:	001c      	movs	r4, r3
 8000ee6:	0b36      	lsrs	r6, r6, #12
 8000ee8:	0d40      	lsrs	r0, r0, #21
 8000eea:	0fcd      	lsrs	r5, r1, #31
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_ddiv+0x26>
 8000ef0:	e09d      	b.n	800102e <__aeabi_ddiv+0x162>
 8000ef2:	4b95      	ldr	r3, [pc, #596]	; (8001148 <__aeabi_ddiv+0x27c>)
 8000ef4:	4298      	cmp	r0, r3
 8000ef6:	d039      	beq.n	8000f6c <__aeabi_ddiv+0xa0>
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	00f6      	lsls	r6, r6, #3
 8000efc:	041b      	lsls	r3, r3, #16
 8000efe:	431e      	orrs	r6, r3
 8000f00:	4a92      	ldr	r2, [pc, #584]	; (800114c <__aeabi_ddiv+0x280>)
 8000f02:	0f7b      	lsrs	r3, r7, #29
 8000f04:	4333      	orrs	r3, r6
 8000f06:	4699      	mov	r9, r3
 8000f08:	4694      	mov	ip, r2
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	4463      	add	r3, ip
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2300      	movs	r3, #0
 8000f12:	2600      	movs	r6, #0
 8000f14:	00ff      	lsls	r7, r7, #3
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	0323      	lsls	r3, r4, #12
 8000f1a:	0b1b      	lsrs	r3, r3, #12
 8000f1c:	4698      	mov	r8, r3
 8000f1e:	0063      	lsls	r3, r4, #1
 8000f20:	0fe4      	lsrs	r4, r4, #31
 8000f22:	4652      	mov	r2, sl
 8000f24:	0d5b      	lsrs	r3, r3, #21
 8000f26:	9401      	str	r4, [sp, #4]
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x60>
 8000f2a:	e0b3      	b.n	8001094 <__aeabi_ddiv+0x1c8>
 8000f2c:	4986      	ldr	r1, [pc, #536]	; (8001148 <__aeabi_ddiv+0x27c>)
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x68>
 8000f32:	e09e      	b.n	8001072 <__aeabi_ddiv+0x1a6>
 8000f34:	4642      	mov	r2, r8
 8000f36:	00d1      	lsls	r1, r2, #3
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	0412      	lsls	r2, r2, #16
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	4651      	mov	r1, sl
 8000f40:	0f49      	lsrs	r1, r1, #29
 8000f42:	4311      	orrs	r1, r2
 8000f44:	468b      	mov	fp, r1
 8000f46:	4981      	ldr	r1, [pc, #516]	; (800114c <__aeabi_ddiv+0x280>)
 8000f48:	4652      	mov	r2, sl
 8000f4a:	468c      	mov	ip, r1
 8000f4c:	9900      	ldr	r1, [sp, #0]
 8000f4e:	4463      	add	r3, ip
 8000f50:	1acb      	subs	r3, r1, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	002b      	movs	r3, r5
 8000f5a:	4063      	eors	r3, r4
 8000f5c:	469a      	mov	sl, r3
 8000f5e:	2e0f      	cmp	r6, #15
 8000f60:	d900      	bls.n	8000f64 <__aeabi_ddiv+0x98>
 8000f62:	e105      	b.n	8001170 <__aeabi_ddiv+0x2a4>
 8000f64:	4b7a      	ldr	r3, [pc, #488]	; (8001150 <__aeabi_ddiv+0x284>)
 8000f66:	00b6      	lsls	r6, r6, #2
 8000f68:	599b      	ldr	r3, [r3, r6]
 8000f6a:	469f      	mov	pc, r3
 8000f6c:	465b      	mov	r3, fp
 8000f6e:	4333      	orrs	r3, r6
 8000f70:	4699      	mov	r9, r3
 8000f72:	d000      	beq.n	8000f76 <__aeabi_ddiv+0xaa>
 8000f74:	e0b8      	b.n	80010e8 <__aeabi_ddiv+0x21c>
 8000f76:	2302      	movs	r3, #2
 8000f78:	2608      	movs	r6, #8
 8000f7a:	2700      	movs	r7, #0
 8000f7c:	9000      	str	r0, [sp, #0]
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	e7ca      	b.n	8000f18 <__aeabi_ddiv+0x4c>
 8000f82:	46cb      	mov	fp, r9
 8000f84:	003a      	movs	r2, r7
 8000f86:	9902      	ldr	r1, [sp, #8]
 8000f88:	9501      	str	r5, [sp, #4]
 8000f8a:	9b01      	ldr	r3, [sp, #4]
 8000f8c:	469a      	mov	sl, r3
 8000f8e:	2902      	cmp	r1, #2
 8000f90:	d027      	beq.n	8000fe2 <__aeabi_ddiv+0x116>
 8000f92:	2903      	cmp	r1, #3
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0xcc>
 8000f96:	e280      	b.n	800149a <__aeabi_ddiv+0x5ce>
 8000f98:	2901      	cmp	r1, #1
 8000f9a:	d044      	beq.n	8001026 <__aeabi_ddiv+0x15a>
 8000f9c:	496d      	ldr	r1, [pc, #436]	; (8001154 <__aeabi_ddiv+0x288>)
 8000f9e:	9b00      	ldr	r3, [sp, #0]
 8000fa0:	468c      	mov	ip, r1
 8000fa2:	4463      	add	r3, ip
 8000fa4:	001c      	movs	r4, r3
 8000fa6:	2c00      	cmp	r4, #0
 8000fa8:	dd38      	ble.n	800101c <__aeabi_ddiv+0x150>
 8000faa:	0753      	lsls	r3, r2, #29
 8000fac:	d000      	beq.n	8000fb0 <__aeabi_ddiv+0xe4>
 8000fae:	e213      	b.n	80013d8 <__aeabi_ddiv+0x50c>
 8000fb0:	08d2      	lsrs	r2, r2, #3
 8000fb2:	465b      	mov	r3, fp
 8000fb4:	01db      	lsls	r3, r3, #7
 8000fb6:	d509      	bpl.n	8000fcc <__aeabi_ddiv+0x100>
 8000fb8:	4659      	mov	r1, fp
 8000fba:	4b67      	ldr	r3, [pc, #412]	; (8001158 <__aeabi_ddiv+0x28c>)
 8000fbc:	4019      	ands	r1, r3
 8000fbe:	468b      	mov	fp, r1
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	00c9      	lsls	r1, r1, #3
 8000fc4:	468c      	mov	ip, r1
 8000fc6:	9b00      	ldr	r3, [sp, #0]
 8000fc8:	4463      	add	r3, ip
 8000fca:	001c      	movs	r4, r3
 8000fcc:	4b63      	ldr	r3, [pc, #396]	; (800115c <__aeabi_ddiv+0x290>)
 8000fce:	429c      	cmp	r4, r3
 8000fd0:	dc07      	bgt.n	8000fe2 <__aeabi_ddiv+0x116>
 8000fd2:	465b      	mov	r3, fp
 8000fd4:	0564      	lsls	r4, r4, #21
 8000fd6:	075f      	lsls	r7, r3, #29
 8000fd8:	025b      	lsls	r3, r3, #9
 8000fda:	4317      	orrs	r7, r2
 8000fdc:	0b1b      	lsrs	r3, r3, #12
 8000fde:	0d62      	lsrs	r2, r4, #21
 8000fe0:	e002      	b.n	8000fe8 <__aeabi_ddiv+0x11c>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2700      	movs	r7, #0
 8000fe6:	4a58      	ldr	r2, [pc, #352]	; (8001148 <__aeabi_ddiv+0x27c>)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	031b      	lsls	r3, r3, #12
 8000fec:	0b1c      	lsrs	r4, r3, #12
 8000fee:	0d0b      	lsrs	r3, r1, #20
 8000ff0:	051b      	lsls	r3, r3, #20
 8000ff2:	4323      	orrs	r3, r4
 8000ff4:	0514      	lsls	r4, r2, #20
 8000ff6:	4a5a      	ldr	r2, [pc, #360]	; (8001160 <__aeabi_ddiv+0x294>)
 8000ff8:	0038      	movs	r0, r7
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	431c      	orrs	r4, r3
 8000ffe:	4653      	mov	r3, sl
 8001000:	0064      	lsls	r4, r4, #1
 8001002:	07db      	lsls	r3, r3, #31
 8001004:	0864      	lsrs	r4, r4, #1
 8001006:	431c      	orrs	r4, r3
 8001008:	0021      	movs	r1, r4
 800100a:	b005      	add	sp, #20
 800100c:	bc3c      	pop	{r2, r3, r4, r5}
 800100e:	4690      	mov	r8, r2
 8001010:	4699      	mov	r9, r3
 8001012:	46a2      	mov	sl, r4
 8001014:	46ab      	mov	fp, r5
 8001016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001018:	2201      	movs	r2, #1
 800101a:	4252      	negs	r2, r2
 800101c:	2301      	movs	r3, #1
 800101e:	1b1b      	subs	r3, r3, r4
 8001020:	2b38      	cmp	r3, #56	; 0x38
 8001022:	dc00      	bgt.n	8001026 <__aeabi_ddiv+0x15a>
 8001024:	e1ad      	b.n	8001382 <__aeabi_ddiv+0x4b6>
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	2700      	movs	r7, #0
 800102c:	e7dc      	b.n	8000fe8 <__aeabi_ddiv+0x11c>
 800102e:	465b      	mov	r3, fp
 8001030:	4333      	orrs	r3, r6
 8001032:	4699      	mov	r9, r3
 8001034:	d05e      	beq.n	80010f4 <__aeabi_ddiv+0x228>
 8001036:	2e00      	cmp	r6, #0
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x170>
 800103a:	e18a      	b.n	8001352 <__aeabi_ddiv+0x486>
 800103c:	0030      	movs	r0, r6
 800103e:	f001 fa9d 	bl	800257c <__clzsi2>
 8001042:	0003      	movs	r3, r0
 8001044:	3b0b      	subs	r3, #11
 8001046:	2b1c      	cmp	r3, #28
 8001048:	dd00      	ble.n	800104c <__aeabi_ddiv+0x180>
 800104a:	e17b      	b.n	8001344 <__aeabi_ddiv+0x478>
 800104c:	221d      	movs	r2, #29
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	465a      	mov	r2, fp
 8001052:	0001      	movs	r1, r0
 8001054:	40da      	lsrs	r2, r3
 8001056:	3908      	subs	r1, #8
 8001058:	408e      	lsls	r6, r1
 800105a:	0013      	movs	r3, r2
 800105c:	465f      	mov	r7, fp
 800105e:	4333      	orrs	r3, r6
 8001060:	4699      	mov	r9, r3
 8001062:	408f      	lsls	r7, r1
 8001064:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <__aeabi_ddiv+0x298>)
 8001066:	2600      	movs	r6, #0
 8001068:	1a1b      	subs	r3, r3, r0
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2300      	movs	r3, #0
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	e752      	b.n	8000f18 <__aeabi_ddiv+0x4c>
 8001072:	4641      	mov	r1, r8
 8001074:	4653      	mov	r3, sl
 8001076:	430b      	orrs	r3, r1
 8001078:	493b      	ldr	r1, [pc, #236]	; (8001168 <__aeabi_ddiv+0x29c>)
 800107a:	469b      	mov	fp, r3
 800107c:	468c      	mov	ip, r1
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	4463      	add	r3, ip
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	465b      	mov	r3, fp
 8001086:	2b00      	cmp	r3, #0
 8001088:	d13b      	bne.n	8001102 <__aeabi_ddiv+0x236>
 800108a:	2302      	movs	r3, #2
 800108c:	2200      	movs	r2, #0
 800108e:	431e      	orrs	r6, r3
 8001090:	2102      	movs	r1, #2
 8001092:	e761      	b.n	8000f58 <__aeabi_ddiv+0x8c>
 8001094:	4643      	mov	r3, r8
 8001096:	4313      	orrs	r3, r2
 8001098:	469b      	mov	fp, r3
 800109a:	d037      	beq.n	800110c <__aeabi_ddiv+0x240>
 800109c:	4643      	mov	r3, r8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d100      	bne.n	80010a4 <__aeabi_ddiv+0x1d8>
 80010a2:	e162      	b.n	800136a <__aeabi_ddiv+0x49e>
 80010a4:	4640      	mov	r0, r8
 80010a6:	f001 fa69 	bl	800257c <__clzsi2>
 80010aa:	0003      	movs	r3, r0
 80010ac:	3b0b      	subs	r3, #11
 80010ae:	2b1c      	cmp	r3, #28
 80010b0:	dd00      	ble.n	80010b4 <__aeabi_ddiv+0x1e8>
 80010b2:	e153      	b.n	800135c <__aeabi_ddiv+0x490>
 80010b4:	0002      	movs	r2, r0
 80010b6:	4641      	mov	r1, r8
 80010b8:	3a08      	subs	r2, #8
 80010ba:	4091      	lsls	r1, r2
 80010bc:	4688      	mov	r8, r1
 80010be:	211d      	movs	r1, #29
 80010c0:	1acb      	subs	r3, r1, r3
 80010c2:	4651      	mov	r1, sl
 80010c4:	40d9      	lsrs	r1, r3
 80010c6:	000b      	movs	r3, r1
 80010c8:	4641      	mov	r1, r8
 80010ca:	430b      	orrs	r3, r1
 80010cc:	469b      	mov	fp, r3
 80010ce:	4653      	mov	r3, sl
 80010d0:	4093      	lsls	r3, r2
 80010d2:	001a      	movs	r2, r3
 80010d4:	9b00      	ldr	r3, [sp, #0]
 80010d6:	4925      	ldr	r1, [pc, #148]	; (800116c <__aeabi_ddiv+0x2a0>)
 80010d8:	469c      	mov	ip, r3
 80010da:	4460      	add	r0, ip
 80010dc:	0003      	movs	r3, r0
 80010de:	468c      	mov	ip, r1
 80010e0:	4463      	add	r3, ip
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2100      	movs	r1, #0
 80010e6:	e737      	b.n	8000f58 <__aeabi_ddiv+0x8c>
 80010e8:	2303      	movs	r3, #3
 80010ea:	46b1      	mov	r9, r6
 80010ec:	9000      	str	r0, [sp, #0]
 80010ee:	260c      	movs	r6, #12
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	e711      	b.n	8000f18 <__aeabi_ddiv+0x4c>
 80010f4:	2300      	movs	r3, #0
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	2604      	movs	r6, #4
 80010fc:	2700      	movs	r7, #0
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	e70a      	b.n	8000f18 <__aeabi_ddiv+0x4c>
 8001102:	2303      	movs	r3, #3
 8001104:	46c3      	mov	fp, r8
 8001106:	431e      	orrs	r6, r3
 8001108:	2103      	movs	r1, #3
 800110a:	e725      	b.n	8000f58 <__aeabi_ddiv+0x8c>
 800110c:	3301      	adds	r3, #1
 800110e:	431e      	orrs	r6, r3
 8001110:	2200      	movs	r2, #0
 8001112:	2101      	movs	r1, #1
 8001114:	e720      	b.n	8000f58 <__aeabi_ddiv+0x8c>
 8001116:	2300      	movs	r3, #0
 8001118:	469a      	mov	sl, r3
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	2700      	movs	r7, #0
 800111e:	031b      	lsls	r3, r3, #12
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <__aeabi_ddiv+0x27c>)
 8001122:	e761      	b.n	8000fe8 <__aeabi_ddiv+0x11c>
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	4649      	mov	r1, r9
 8001128:	031b      	lsls	r3, r3, #12
 800112a:	4219      	tst	r1, r3
 800112c:	d100      	bne.n	8001130 <__aeabi_ddiv+0x264>
 800112e:	e0e2      	b.n	80012f6 <__aeabi_ddiv+0x42a>
 8001130:	4659      	mov	r1, fp
 8001132:	4219      	tst	r1, r3
 8001134:	d000      	beq.n	8001138 <__aeabi_ddiv+0x26c>
 8001136:	e0de      	b.n	80012f6 <__aeabi_ddiv+0x42a>
 8001138:	430b      	orrs	r3, r1
 800113a:	031b      	lsls	r3, r3, #12
 800113c:	0017      	movs	r7, r2
 800113e:	0b1b      	lsrs	r3, r3, #12
 8001140:	46a2      	mov	sl, r4
 8001142:	4a01      	ldr	r2, [pc, #4]	; (8001148 <__aeabi_ddiv+0x27c>)
 8001144:	e750      	b.n	8000fe8 <__aeabi_ddiv+0x11c>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	000007ff 	.word	0x000007ff
 800114c:	fffffc01 	.word	0xfffffc01
 8001150:	080091dc 	.word	0x080091dc
 8001154:	000003ff 	.word	0x000003ff
 8001158:	feffffff 	.word	0xfeffffff
 800115c:	000007fe 	.word	0x000007fe
 8001160:	800fffff 	.word	0x800fffff
 8001164:	fffffc0d 	.word	0xfffffc0d
 8001168:	fffff801 	.word	0xfffff801
 800116c:	000003f3 	.word	0x000003f3
 8001170:	45d9      	cmp	r9, fp
 8001172:	d900      	bls.n	8001176 <__aeabi_ddiv+0x2aa>
 8001174:	e0cb      	b.n	800130e <__aeabi_ddiv+0x442>
 8001176:	d100      	bne.n	800117a <__aeabi_ddiv+0x2ae>
 8001178:	e0c6      	b.n	8001308 <__aeabi_ddiv+0x43c>
 800117a:	003c      	movs	r4, r7
 800117c:	4648      	mov	r0, r9
 800117e:	2700      	movs	r7, #0
 8001180:	9b00      	ldr	r3, [sp, #0]
 8001182:	3b01      	subs	r3, #1
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	465b      	mov	r3, fp
 8001188:	0e16      	lsrs	r6, r2, #24
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	431e      	orrs	r6, r3
 800118e:	0213      	lsls	r3, r2, #8
 8001190:	4698      	mov	r8, r3
 8001192:	0433      	lsls	r3, r6, #16
 8001194:	0c1b      	lsrs	r3, r3, #16
 8001196:	4699      	mov	r9, r3
 8001198:	0c31      	lsrs	r1, r6, #16
 800119a:	9101      	str	r1, [sp, #4]
 800119c:	f7ff f84c 	bl	8000238 <__aeabi_uidivmod>
 80011a0:	464a      	mov	r2, r9
 80011a2:	4342      	muls	r2, r0
 80011a4:	040b      	lsls	r3, r1, #16
 80011a6:	0c21      	lsrs	r1, r4, #16
 80011a8:	0005      	movs	r5, r0
 80011aa:	4319      	orrs	r1, r3
 80011ac:	428a      	cmp	r2, r1
 80011ae:	d907      	bls.n	80011c0 <__aeabi_ddiv+0x2f4>
 80011b0:	1989      	adds	r1, r1, r6
 80011b2:	3d01      	subs	r5, #1
 80011b4:	428e      	cmp	r6, r1
 80011b6:	d803      	bhi.n	80011c0 <__aeabi_ddiv+0x2f4>
 80011b8:	428a      	cmp	r2, r1
 80011ba:	d901      	bls.n	80011c0 <__aeabi_ddiv+0x2f4>
 80011bc:	1e85      	subs	r5, r0, #2
 80011be:	1989      	adds	r1, r1, r6
 80011c0:	1a88      	subs	r0, r1, r2
 80011c2:	9901      	ldr	r1, [sp, #4]
 80011c4:	f7ff f838 	bl	8000238 <__aeabi_uidivmod>
 80011c8:	0409      	lsls	r1, r1, #16
 80011ca:	468c      	mov	ip, r1
 80011cc:	464a      	mov	r2, r9
 80011ce:	0421      	lsls	r1, r4, #16
 80011d0:	4664      	mov	r4, ip
 80011d2:	4342      	muls	r2, r0
 80011d4:	0c09      	lsrs	r1, r1, #16
 80011d6:	0003      	movs	r3, r0
 80011d8:	4321      	orrs	r1, r4
 80011da:	428a      	cmp	r2, r1
 80011dc:	d904      	bls.n	80011e8 <__aeabi_ddiv+0x31c>
 80011de:	1989      	adds	r1, r1, r6
 80011e0:	3b01      	subs	r3, #1
 80011e2:	428e      	cmp	r6, r1
 80011e4:	d800      	bhi.n	80011e8 <__aeabi_ddiv+0x31c>
 80011e6:	e0f1      	b.n	80013cc <__aeabi_ddiv+0x500>
 80011e8:	042d      	lsls	r5, r5, #16
 80011ea:	431d      	orrs	r5, r3
 80011ec:	46ab      	mov	fp, r5
 80011ee:	4643      	mov	r3, r8
 80011f0:	1a89      	subs	r1, r1, r2
 80011f2:	4642      	mov	r2, r8
 80011f4:	0c28      	lsrs	r0, r5, #16
 80011f6:	0412      	lsls	r2, r2, #16
 80011f8:	0c1d      	lsrs	r5, r3, #16
 80011fa:	465b      	mov	r3, fp
 80011fc:	0c14      	lsrs	r4, r2, #16
 80011fe:	0022      	movs	r2, r4
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	0c1b      	lsrs	r3, r3, #16
 8001204:	435a      	muls	r2, r3
 8001206:	9403      	str	r4, [sp, #12]
 8001208:	436b      	muls	r3, r5
 800120a:	4344      	muls	r4, r0
 800120c:	9502      	str	r5, [sp, #8]
 800120e:	4368      	muls	r0, r5
 8001210:	191b      	adds	r3, r3, r4
 8001212:	0c15      	lsrs	r5, r2, #16
 8001214:	18eb      	adds	r3, r5, r3
 8001216:	429c      	cmp	r4, r3
 8001218:	d903      	bls.n	8001222 <__aeabi_ddiv+0x356>
 800121a:	2480      	movs	r4, #128	; 0x80
 800121c:	0264      	lsls	r4, r4, #9
 800121e:	46a4      	mov	ip, r4
 8001220:	4460      	add	r0, ip
 8001222:	0c1c      	lsrs	r4, r3, #16
 8001224:	0415      	lsls	r5, r2, #16
 8001226:	041b      	lsls	r3, r3, #16
 8001228:	0c2d      	lsrs	r5, r5, #16
 800122a:	1820      	adds	r0, r4, r0
 800122c:	195d      	adds	r5, r3, r5
 800122e:	4281      	cmp	r1, r0
 8001230:	d377      	bcc.n	8001322 <__aeabi_ddiv+0x456>
 8001232:	d073      	beq.n	800131c <__aeabi_ddiv+0x450>
 8001234:	1a0c      	subs	r4, r1, r0
 8001236:	4aa2      	ldr	r2, [pc, #648]	; (80014c0 <__aeabi_ddiv+0x5f4>)
 8001238:	1b7d      	subs	r5, r7, r5
 800123a:	42af      	cmp	r7, r5
 800123c:	41bf      	sbcs	r7, r7
 800123e:	4694      	mov	ip, r2
 8001240:	9b00      	ldr	r3, [sp, #0]
 8001242:	427f      	negs	r7, r7
 8001244:	4463      	add	r3, ip
 8001246:	1be0      	subs	r0, r4, r7
 8001248:	001c      	movs	r4, r3
 800124a:	4286      	cmp	r6, r0
 800124c:	d100      	bne.n	8001250 <__aeabi_ddiv+0x384>
 800124e:	e0db      	b.n	8001408 <__aeabi_ddiv+0x53c>
 8001250:	9901      	ldr	r1, [sp, #4]
 8001252:	f7fe fff1 	bl	8000238 <__aeabi_uidivmod>
 8001256:	464a      	mov	r2, r9
 8001258:	4342      	muls	r2, r0
 800125a:	040b      	lsls	r3, r1, #16
 800125c:	0c29      	lsrs	r1, r5, #16
 800125e:	0007      	movs	r7, r0
 8001260:	4319      	orrs	r1, r3
 8001262:	428a      	cmp	r2, r1
 8001264:	d907      	bls.n	8001276 <__aeabi_ddiv+0x3aa>
 8001266:	1989      	adds	r1, r1, r6
 8001268:	3f01      	subs	r7, #1
 800126a:	428e      	cmp	r6, r1
 800126c:	d803      	bhi.n	8001276 <__aeabi_ddiv+0x3aa>
 800126e:	428a      	cmp	r2, r1
 8001270:	d901      	bls.n	8001276 <__aeabi_ddiv+0x3aa>
 8001272:	1e87      	subs	r7, r0, #2
 8001274:	1989      	adds	r1, r1, r6
 8001276:	1a88      	subs	r0, r1, r2
 8001278:	9901      	ldr	r1, [sp, #4]
 800127a:	f7fe ffdd 	bl	8000238 <__aeabi_uidivmod>
 800127e:	0409      	lsls	r1, r1, #16
 8001280:	464a      	mov	r2, r9
 8001282:	4689      	mov	r9, r1
 8001284:	0429      	lsls	r1, r5, #16
 8001286:	464d      	mov	r5, r9
 8001288:	4342      	muls	r2, r0
 800128a:	0c09      	lsrs	r1, r1, #16
 800128c:	0003      	movs	r3, r0
 800128e:	4329      	orrs	r1, r5
 8001290:	428a      	cmp	r2, r1
 8001292:	d907      	bls.n	80012a4 <__aeabi_ddiv+0x3d8>
 8001294:	1989      	adds	r1, r1, r6
 8001296:	3b01      	subs	r3, #1
 8001298:	428e      	cmp	r6, r1
 800129a:	d803      	bhi.n	80012a4 <__aeabi_ddiv+0x3d8>
 800129c:	428a      	cmp	r2, r1
 800129e:	d901      	bls.n	80012a4 <__aeabi_ddiv+0x3d8>
 80012a0:	1e83      	subs	r3, r0, #2
 80012a2:	1989      	adds	r1, r1, r6
 80012a4:	043f      	lsls	r7, r7, #16
 80012a6:	1a89      	subs	r1, r1, r2
 80012a8:	003a      	movs	r2, r7
 80012aa:	9f03      	ldr	r7, [sp, #12]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	0038      	movs	r0, r7
 80012b0:	0413      	lsls	r3, r2, #16
 80012b2:	0c1b      	lsrs	r3, r3, #16
 80012b4:	4358      	muls	r0, r3
 80012b6:	4681      	mov	r9, r0
 80012b8:	9802      	ldr	r0, [sp, #8]
 80012ba:	0c15      	lsrs	r5, r2, #16
 80012bc:	436f      	muls	r7, r5
 80012be:	4343      	muls	r3, r0
 80012c0:	4345      	muls	r5, r0
 80012c2:	4648      	mov	r0, r9
 80012c4:	0c00      	lsrs	r0, r0, #16
 80012c6:	4684      	mov	ip, r0
 80012c8:	19db      	adds	r3, r3, r7
 80012ca:	4463      	add	r3, ip
 80012cc:	429f      	cmp	r7, r3
 80012ce:	d903      	bls.n	80012d8 <__aeabi_ddiv+0x40c>
 80012d0:	2080      	movs	r0, #128	; 0x80
 80012d2:	0240      	lsls	r0, r0, #9
 80012d4:	4684      	mov	ip, r0
 80012d6:	4465      	add	r5, ip
 80012d8:	4648      	mov	r0, r9
 80012da:	0c1f      	lsrs	r7, r3, #16
 80012dc:	0400      	lsls	r0, r0, #16
 80012de:	041b      	lsls	r3, r3, #16
 80012e0:	0c00      	lsrs	r0, r0, #16
 80012e2:	197d      	adds	r5, r7, r5
 80012e4:	1818      	adds	r0, r3, r0
 80012e6:	42a9      	cmp	r1, r5
 80012e8:	d200      	bcs.n	80012ec <__aeabi_ddiv+0x420>
 80012ea:	e084      	b.n	80013f6 <__aeabi_ddiv+0x52a>
 80012ec:	d100      	bne.n	80012f0 <__aeabi_ddiv+0x424>
 80012ee:	e07f      	b.n	80013f0 <__aeabi_ddiv+0x524>
 80012f0:	2301      	movs	r3, #1
 80012f2:	431a      	orrs	r2, r3
 80012f4:	e657      	b.n	8000fa6 <__aeabi_ddiv+0xda>
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	464a      	mov	r2, r9
 80012fa:	031b      	lsls	r3, r3, #12
 80012fc:	4313      	orrs	r3, r2
 80012fe:	031b      	lsls	r3, r3, #12
 8001300:	0b1b      	lsrs	r3, r3, #12
 8001302:	46aa      	mov	sl, r5
 8001304:	4a6f      	ldr	r2, [pc, #444]	; (80014c4 <__aeabi_ddiv+0x5f8>)
 8001306:	e66f      	b.n	8000fe8 <__aeabi_ddiv+0x11c>
 8001308:	42ba      	cmp	r2, r7
 800130a:	d900      	bls.n	800130e <__aeabi_ddiv+0x442>
 800130c:	e735      	b.n	800117a <__aeabi_ddiv+0x2ae>
 800130e:	464b      	mov	r3, r9
 8001310:	07dc      	lsls	r4, r3, #31
 8001312:	0858      	lsrs	r0, r3, #1
 8001314:	087b      	lsrs	r3, r7, #1
 8001316:	431c      	orrs	r4, r3
 8001318:	07ff      	lsls	r7, r7, #31
 800131a:	e734      	b.n	8001186 <__aeabi_ddiv+0x2ba>
 800131c:	2400      	movs	r4, #0
 800131e:	42af      	cmp	r7, r5
 8001320:	d289      	bcs.n	8001236 <__aeabi_ddiv+0x36a>
 8001322:	4447      	add	r7, r8
 8001324:	4547      	cmp	r7, r8
 8001326:	41a4      	sbcs	r4, r4
 8001328:	465b      	mov	r3, fp
 800132a:	4264      	negs	r4, r4
 800132c:	19a4      	adds	r4, r4, r6
 800132e:	1864      	adds	r4, r4, r1
 8001330:	3b01      	subs	r3, #1
 8001332:	42a6      	cmp	r6, r4
 8001334:	d21e      	bcs.n	8001374 <__aeabi_ddiv+0x4a8>
 8001336:	42a0      	cmp	r0, r4
 8001338:	d86d      	bhi.n	8001416 <__aeabi_ddiv+0x54a>
 800133a:	d100      	bne.n	800133e <__aeabi_ddiv+0x472>
 800133c:	e0b6      	b.n	80014ac <__aeabi_ddiv+0x5e0>
 800133e:	1a24      	subs	r4, r4, r0
 8001340:	469b      	mov	fp, r3
 8001342:	e778      	b.n	8001236 <__aeabi_ddiv+0x36a>
 8001344:	0003      	movs	r3, r0
 8001346:	465a      	mov	r2, fp
 8001348:	3b28      	subs	r3, #40	; 0x28
 800134a:	409a      	lsls	r2, r3
 800134c:	2700      	movs	r7, #0
 800134e:	4691      	mov	r9, r2
 8001350:	e688      	b.n	8001064 <__aeabi_ddiv+0x198>
 8001352:	4658      	mov	r0, fp
 8001354:	f001 f912 	bl	800257c <__clzsi2>
 8001358:	3020      	adds	r0, #32
 800135a:	e672      	b.n	8001042 <__aeabi_ddiv+0x176>
 800135c:	0003      	movs	r3, r0
 800135e:	4652      	mov	r2, sl
 8001360:	3b28      	subs	r3, #40	; 0x28
 8001362:	409a      	lsls	r2, r3
 8001364:	4693      	mov	fp, r2
 8001366:	2200      	movs	r2, #0
 8001368:	e6b4      	b.n	80010d4 <__aeabi_ddiv+0x208>
 800136a:	4650      	mov	r0, sl
 800136c:	f001 f906 	bl	800257c <__clzsi2>
 8001370:	3020      	adds	r0, #32
 8001372:	e69a      	b.n	80010aa <__aeabi_ddiv+0x1de>
 8001374:	42a6      	cmp	r6, r4
 8001376:	d1e2      	bne.n	800133e <__aeabi_ddiv+0x472>
 8001378:	45b8      	cmp	r8, r7
 800137a:	d9dc      	bls.n	8001336 <__aeabi_ddiv+0x46a>
 800137c:	1a34      	subs	r4, r6, r0
 800137e:	469b      	mov	fp, r3
 8001380:	e759      	b.n	8001236 <__aeabi_ddiv+0x36a>
 8001382:	2b1f      	cmp	r3, #31
 8001384:	dc65      	bgt.n	8001452 <__aeabi_ddiv+0x586>
 8001386:	4c50      	ldr	r4, [pc, #320]	; (80014c8 <__aeabi_ddiv+0x5fc>)
 8001388:	9900      	ldr	r1, [sp, #0]
 800138a:	46a4      	mov	ip, r4
 800138c:	465c      	mov	r4, fp
 800138e:	4461      	add	r1, ip
 8001390:	0008      	movs	r0, r1
 8001392:	408c      	lsls	r4, r1
 8001394:	0011      	movs	r1, r2
 8001396:	4082      	lsls	r2, r0
 8001398:	40d9      	lsrs	r1, r3
 800139a:	1e50      	subs	r0, r2, #1
 800139c:	4182      	sbcs	r2, r0
 800139e:	430c      	orrs	r4, r1
 80013a0:	4314      	orrs	r4, r2
 80013a2:	465a      	mov	r2, fp
 80013a4:	40da      	lsrs	r2, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	0762      	lsls	r2, r4, #29
 80013aa:	d009      	beq.n	80013c0 <__aeabi_ddiv+0x4f4>
 80013ac:	220f      	movs	r2, #15
 80013ae:	4022      	ands	r2, r4
 80013b0:	2a04      	cmp	r2, #4
 80013b2:	d005      	beq.n	80013c0 <__aeabi_ddiv+0x4f4>
 80013b4:	0022      	movs	r2, r4
 80013b6:	1d14      	adds	r4, r2, #4
 80013b8:	4294      	cmp	r4, r2
 80013ba:	4189      	sbcs	r1, r1
 80013bc:	4249      	negs	r1, r1
 80013be:	185b      	adds	r3, r3, r1
 80013c0:	021a      	lsls	r2, r3, #8
 80013c2:	d562      	bpl.n	800148a <__aeabi_ddiv+0x5be>
 80013c4:	2201      	movs	r2, #1
 80013c6:	2300      	movs	r3, #0
 80013c8:	2700      	movs	r7, #0
 80013ca:	e60d      	b.n	8000fe8 <__aeabi_ddiv+0x11c>
 80013cc:	428a      	cmp	r2, r1
 80013ce:	d800      	bhi.n	80013d2 <__aeabi_ddiv+0x506>
 80013d0:	e70a      	b.n	80011e8 <__aeabi_ddiv+0x31c>
 80013d2:	1e83      	subs	r3, r0, #2
 80013d4:	1989      	adds	r1, r1, r6
 80013d6:	e707      	b.n	80011e8 <__aeabi_ddiv+0x31c>
 80013d8:	230f      	movs	r3, #15
 80013da:	4013      	ands	r3, r2
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d100      	bne.n	80013e2 <__aeabi_ddiv+0x516>
 80013e0:	e5e6      	b.n	8000fb0 <__aeabi_ddiv+0xe4>
 80013e2:	1d17      	adds	r7, r2, #4
 80013e4:	4297      	cmp	r7, r2
 80013e6:	4192      	sbcs	r2, r2
 80013e8:	4253      	negs	r3, r2
 80013ea:	449b      	add	fp, r3
 80013ec:	08fa      	lsrs	r2, r7, #3
 80013ee:	e5e0      	b.n	8000fb2 <__aeabi_ddiv+0xe6>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_ddiv+0x52a>
 80013f4:	e5d7      	b.n	8000fa6 <__aeabi_ddiv+0xda>
 80013f6:	1871      	adds	r1, r6, r1
 80013f8:	1e53      	subs	r3, r2, #1
 80013fa:	42b1      	cmp	r1, r6
 80013fc:	d327      	bcc.n	800144e <__aeabi_ddiv+0x582>
 80013fe:	42a9      	cmp	r1, r5
 8001400:	d315      	bcc.n	800142e <__aeabi_ddiv+0x562>
 8001402:	d058      	beq.n	80014b6 <__aeabi_ddiv+0x5ea>
 8001404:	001a      	movs	r2, r3
 8001406:	e773      	b.n	80012f0 <__aeabi_ddiv+0x424>
 8001408:	2b00      	cmp	r3, #0
 800140a:	dc00      	bgt.n	800140e <__aeabi_ddiv+0x542>
 800140c:	e604      	b.n	8001018 <__aeabi_ddiv+0x14c>
 800140e:	2301      	movs	r3, #1
 8001410:	2200      	movs	r2, #0
 8001412:	449b      	add	fp, r3
 8001414:	e5cd      	b.n	8000fb2 <__aeabi_ddiv+0xe6>
 8001416:	2302      	movs	r3, #2
 8001418:	4447      	add	r7, r8
 800141a:	4547      	cmp	r7, r8
 800141c:	4189      	sbcs	r1, r1
 800141e:	425b      	negs	r3, r3
 8001420:	469c      	mov	ip, r3
 8001422:	4249      	negs	r1, r1
 8001424:	1989      	adds	r1, r1, r6
 8001426:	190c      	adds	r4, r1, r4
 8001428:	44e3      	add	fp, ip
 800142a:	1a24      	subs	r4, r4, r0
 800142c:	e703      	b.n	8001236 <__aeabi_ddiv+0x36a>
 800142e:	4643      	mov	r3, r8
 8001430:	005f      	lsls	r7, r3, #1
 8001432:	4547      	cmp	r7, r8
 8001434:	419b      	sbcs	r3, r3
 8001436:	46b8      	mov	r8, r7
 8001438:	425b      	negs	r3, r3
 800143a:	199e      	adds	r6, r3, r6
 800143c:	3a02      	subs	r2, #2
 800143e:	1989      	adds	r1, r1, r6
 8001440:	42a9      	cmp	r1, r5
 8001442:	d000      	beq.n	8001446 <__aeabi_ddiv+0x57a>
 8001444:	e754      	b.n	80012f0 <__aeabi_ddiv+0x424>
 8001446:	4540      	cmp	r0, r8
 8001448:	d000      	beq.n	800144c <__aeabi_ddiv+0x580>
 800144a:	e751      	b.n	80012f0 <__aeabi_ddiv+0x424>
 800144c:	e5ab      	b.n	8000fa6 <__aeabi_ddiv+0xda>
 800144e:	001a      	movs	r2, r3
 8001450:	e7f6      	b.n	8001440 <__aeabi_ddiv+0x574>
 8001452:	211f      	movs	r1, #31
 8001454:	465f      	mov	r7, fp
 8001456:	4249      	negs	r1, r1
 8001458:	1b0c      	subs	r4, r1, r4
 800145a:	40e7      	lsrs	r7, r4
 800145c:	2b20      	cmp	r3, #32
 800145e:	d007      	beq.n	8001470 <__aeabi_ddiv+0x5a4>
 8001460:	491a      	ldr	r1, [pc, #104]	; (80014cc <__aeabi_ddiv+0x600>)
 8001462:	9b00      	ldr	r3, [sp, #0]
 8001464:	468c      	mov	ip, r1
 8001466:	4463      	add	r3, ip
 8001468:	0018      	movs	r0, r3
 800146a:	465b      	mov	r3, fp
 800146c:	4083      	lsls	r3, r0
 800146e:	431a      	orrs	r2, r3
 8001470:	1e50      	subs	r0, r2, #1
 8001472:	4182      	sbcs	r2, r0
 8001474:	433a      	orrs	r2, r7
 8001476:	2707      	movs	r7, #7
 8001478:	2300      	movs	r3, #0
 800147a:	4017      	ands	r7, r2
 800147c:	d009      	beq.n	8001492 <__aeabi_ddiv+0x5c6>
 800147e:	210f      	movs	r1, #15
 8001480:	2300      	movs	r3, #0
 8001482:	4011      	ands	r1, r2
 8001484:	0014      	movs	r4, r2
 8001486:	2904      	cmp	r1, #4
 8001488:	d195      	bne.n	80013b6 <__aeabi_ddiv+0x4ea>
 800148a:	0022      	movs	r2, r4
 800148c:	075f      	lsls	r7, r3, #29
 800148e:	025b      	lsls	r3, r3, #9
 8001490:	0b1b      	lsrs	r3, r3, #12
 8001492:	08d2      	lsrs	r2, r2, #3
 8001494:	4317      	orrs	r7, r2
 8001496:	2200      	movs	r2, #0
 8001498:	e5a6      	b.n	8000fe8 <__aeabi_ddiv+0x11c>
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	4659      	mov	r1, fp
 800149e:	031b      	lsls	r3, r3, #12
 80014a0:	430b      	orrs	r3, r1
 80014a2:	031b      	lsls	r3, r3, #12
 80014a4:	0017      	movs	r7, r2
 80014a6:	0b1b      	lsrs	r3, r3, #12
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <__aeabi_ddiv+0x5f8>)
 80014aa:	e59d      	b.n	8000fe8 <__aeabi_ddiv+0x11c>
 80014ac:	42bd      	cmp	r5, r7
 80014ae:	d8b2      	bhi.n	8001416 <__aeabi_ddiv+0x54a>
 80014b0:	469b      	mov	fp, r3
 80014b2:	2400      	movs	r4, #0
 80014b4:	e6bf      	b.n	8001236 <__aeabi_ddiv+0x36a>
 80014b6:	4580      	cmp	r8, r0
 80014b8:	d3b9      	bcc.n	800142e <__aeabi_ddiv+0x562>
 80014ba:	001a      	movs	r2, r3
 80014bc:	e7c3      	b.n	8001446 <__aeabi_ddiv+0x57a>
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	000003ff 	.word	0x000003ff
 80014c4:	000007ff 	.word	0x000007ff
 80014c8:	0000041e 	.word	0x0000041e
 80014cc:	0000043e 	.word	0x0000043e

080014d0 <__eqdf2>:
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	464f      	mov	r7, r9
 80014d4:	4646      	mov	r6, r8
 80014d6:	46d6      	mov	lr, sl
 80014d8:	4684      	mov	ip, r0
 80014da:	b5c0      	push	{r6, r7, lr}
 80014dc:	4680      	mov	r8, r0
 80014de:	4e19      	ldr	r6, [pc, #100]	; (8001544 <__eqdf2+0x74>)
 80014e0:	0318      	lsls	r0, r3, #12
 80014e2:	030f      	lsls	r7, r1, #12
 80014e4:	004d      	lsls	r5, r1, #1
 80014e6:	0b00      	lsrs	r0, r0, #12
 80014e8:	005c      	lsls	r4, r3, #1
 80014ea:	4682      	mov	sl, r0
 80014ec:	0b3f      	lsrs	r7, r7, #12
 80014ee:	0d6d      	lsrs	r5, r5, #21
 80014f0:	0fc9      	lsrs	r1, r1, #31
 80014f2:	4691      	mov	r9, r2
 80014f4:	0d64      	lsrs	r4, r4, #21
 80014f6:	0fdb      	lsrs	r3, r3, #31
 80014f8:	2001      	movs	r0, #1
 80014fa:	42b5      	cmp	r5, r6
 80014fc:	d00a      	beq.n	8001514 <__eqdf2+0x44>
 80014fe:	42b4      	cmp	r4, r6
 8001500:	d003      	beq.n	800150a <__eqdf2+0x3a>
 8001502:	42a5      	cmp	r5, r4
 8001504:	d101      	bne.n	800150a <__eqdf2+0x3a>
 8001506:	4557      	cmp	r7, sl
 8001508:	d00c      	beq.n	8001524 <__eqdf2+0x54>
 800150a:	bc1c      	pop	{r2, r3, r4}
 800150c:	4690      	mov	r8, r2
 800150e:	4699      	mov	r9, r3
 8001510:	46a2      	mov	sl, r4
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001514:	4666      	mov	r6, ip
 8001516:	433e      	orrs	r6, r7
 8001518:	d1f7      	bne.n	800150a <__eqdf2+0x3a>
 800151a:	42ac      	cmp	r4, r5
 800151c:	d1f5      	bne.n	800150a <__eqdf2+0x3a>
 800151e:	4654      	mov	r4, sl
 8001520:	4314      	orrs	r4, r2
 8001522:	d1f2      	bne.n	800150a <__eqdf2+0x3a>
 8001524:	2001      	movs	r0, #1
 8001526:	45c8      	cmp	r8, r9
 8001528:	d1ef      	bne.n	800150a <__eqdf2+0x3a>
 800152a:	4299      	cmp	r1, r3
 800152c:	d007      	beq.n	800153e <__eqdf2+0x6e>
 800152e:	2d00      	cmp	r5, #0
 8001530:	d1eb      	bne.n	800150a <__eqdf2+0x3a>
 8001532:	4663      	mov	r3, ip
 8001534:	431f      	orrs	r7, r3
 8001536:	0038      	movs	r0, r7
 8001538:	1e47      	subs	r7, r0, #1
 800153a:	41b8      	sbcs	r0, r7
 800153c:	e7e5      	b.n	800150a <__eqdf2+0x3a>
 800153e:	2000      	movs	r0, #0
 8001540:	e7e3      	b.n	800150a <__eqdf2+0x3a>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff

08001548 <__gedf2>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	464f      	mov	r7, r9
 800154c:	4646      	mov	r6, r8
 800154e:	46d6      	mov	lr, sl
 8001550:	004d      	lsls	r5, r1, #1
 8001552:	b5c0      	push	{r6, r7, lr}
 8001554:	030e      	lsls	r6, r1, #12
 8001556:	0fc9      	lsrs	r1, r1, #31
 8001558:	468a      	mov	sl, r1
 800155a:	492c      	ldr	r1, [pc, #176]	; (800160c <__gedf2+0xc4>)
 800155c:	031f      	lsls	r7, r3, #12
 800155e:	005c      	lsls	r4, r3, #1
 8001560:	4680      	mov	r8, r0
 8001562:	0b36      	lsrs	r6, r6, #12
 8001564:	0d6d      	lsrs	r5, r5, #21
 8001566:	4691      	mov	r9, r2
 8001568:	0b3f      	lsrs	r7, r7, #12
 800156a:	0d64      	lsrs	r4, r4, #21
 800156c:	0fdb      	lsrs	r3, r3, #31
 800156e:	428d      	cmp	r5, r1
 8001570:	d01e      	beq.n	80015b0 <__gedf2+0x68>
 8001572:	428c      	cmp	r4, r1
 8001574:	d016      	beq.n	80015a4 <__gedf2+0x5c>
 8001576:	2d00      	cmp	r5, #0
 8001578:	d11e      	bne.n	80015b8 <__gedf2+0x70>
 800157a:	4330      	orrs	r0, r6
 800157c:	4684      	mov	ip, r0
 800157e:	2c00      	cmp	r4, #0
 8001580:	d101      	bne.n	8001586 <__gedf2+0x3e>
 8001582:	433a      	orrs	r2, r7
 8001584:	d023      	beq.n	80015ce <__gedf2+0x86>
 8001586:	4662      	mov	r2, ip
 8001588:	2a00      	cmp	r2, #0
 800158a:	d01a      	beq.n	80015c2 <__gedf2+0x7a>
 800158c:	459a      	cmp	sl, r3
 800158e:	d029      	beq.n	80015e4 <__gedf2+0x9c>
 8001590:	4651      	mov	r1, sl
 8001592:	2002      	movs	r0, #2
 8001594:	3901      	subs	r1, #1
 8001596:	4008      	ands	r0, r1
 8001598:	3801      	subs	r0, #1
 800159a:	bc1c      	pop	{r2, r3, r4}
 800159c:	4690      	mov	r8, r2
 800159e:	4699      	mov	r9, r3
 80015a0:	46a2      	mov	sl, r4
 80015a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a4:	0039      	movs	r1, r7
 80015a6:	4311      	orrs	r1, r2
 80015a8:	d0e5      	beq.n	8001576 <__gedf2+0x2e>
 80015aa:	2002      	movs	r0, #2
 80015ac:	4240      	negs	r0, r0
 80015ae:	e7f4      	b.n	800159a <__gedf2+0x52>
 80015b0:	4330      	orrs	r0, r6
 80015b2:	d1fa      	bne.n	80015aa <__gedf2+0x62>
 80015b4:	42ac      	cmp	r4, r5
 80015b6:	d00f      	beq.n	80015d8 <__gedf2+0x90>
 80015b8:	2c00      	cmp	r4, #0
 80015ba:	d10f      	bne.n	80015dc <__gedf2+0x94>
 80015bc:	433a      	orrs	r2, r7
 80015be:	d0e7      	beq.n	8001590 <__gedf2+0x48>
 80015c0:	e00c      	b.n	80015dc <__gedf2+0x94>
 80015c2:	2201      	movs	r2, #1
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4393      	bics	r3, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	3001      	adds	r0, #1
 80015cc:	e7e5      	b.n	800159a <__gedf2+0x52>
 80015ce:	4663      	mov	r3, ip
 80015d0:	2000      	movs	r0, #0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0e1      	beq.n	800159a <__gedf2+0x52>
 80015d6:	e7db      	b.n	8001590 <__gedf2+0x48>
 80015d8:	433a      	orrs	r2, r7
 80015da:	d1e6      	bne.n	80015aa <__gedf2+0x62>
 80015dc:	459a      	cmp	sl, r3
 80015de:	d1d7      	bne.n	8001590 <__gedf2+0x48>
 80015e0:	42a5      	cmp	r5, r4
 80015e2:	dcd5      	bgt.n	8001590 <__gedf2+0x48>
 80015e4:	42a5      	cmp	r5, r4
 80015e6:	db05      	blt.n	80015f4 <__gedf2+0xac>
 80015e8:	42be      	cmp	r6, r7
 80015ea:	d8d1      	bhi.n	8001590 <__gedf2+0x48>
 80015ec:	d008      	beq.n	8001600 <__gedf2+0xb8>
 80015ee:	2000      	movs	r0, #0
 80015f0:	42be      	cmp	r6, r7
 80015f2:	d2d2      	bcs.n	800159a <__gedf2+0x52>
 80015f4:	4650      	mov	r0, sl
 80015f6:	2301      	movs	r3, #1
 80015f8:	3801      	subs	r0, #1
 80015fa:	4398      	bics	r0, r3
 80015fc:	3001      	adds	r0, #1
 80015fe:	e7cc      	b.n	800159a <__gedf2+0x52>
 8001600:	45c8      	cmp	r8, r9
 8001602:	d8c5      	bhi.n	8001590 <__gedf2+0x48>
 8001604:	2000      	movs	r0, #0
 8001606:	45c8      	cmp	r8, r9
 8001608:	d3f4      	bcc.n	80015f4 <__gedf2+0xac>
 800160a:	e7c6      	b.n	800159a <__gedf2+0x52>
 800160c:	000007ff 	.word	0x000007ff

08001610 <__ledf2>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	464f      	mov	r7, r9
 8001614:	4646      	mov	r6, r8
 8001616:	46d6      	mov	lr, sl
 8001618:	004d      	lsls	r5, r1, #1
 800161a:	b5c0      	push	{r6, r7, lr}
 800161c:	030e      	lsls	r6, r1, #12
 800161e:	0fc9      	lsrs	r1, r1, #31
 8001620:	468a      	mov	sl, r1
 8001622:	492e      	ldr	r1, [pc, #184]	; (80016dc <__ledf2+0xcc>)
 8001624:	031f      	lsls	r7, r3, #12
 8001626:	005c      	lsls	r4, r3, #1
 8001628:	4680      	mov	r8, r0
 800162a:	0b36      	lsrs	r6, r6, #12
 800162c:	0d6d      	lsrs	r5, r5, #21
 800162e:	4691      	mov	r9, r2
 8001630:	0b3f      	lsrs	r7, r7, #12
 8001632:	0d64      	lsrs	r4, r4, #21
 8001634:	0fdb      	lsrs	r3, r3, #31
 8001636:	428d      	cmp	r5, r1
 8001638:	d018      	beq.n	800166c <__ledf2+0x5c>
 800163a:	428c      	cmp	r4, r1
 800163c:	d011      	beq.n	8001662 <__ledf2+0x52>
 800163e:	2d00      	cmp	r5, #0
 8001640:	d118      	bne.n	8001674 <__ledf2+0x64>
 8001642:	4330      	orrs	r0, r6
 8001644:	4684      	mov	ip, r0
 8001646:	2c00      	cmp	r4, #0
 8001648:	d11e      	bne.n	8001688 <__ledf2+0x78>
 800164a:	433a      	orrs	r2, r7
 800164c:	d11c      	bne.n	8001688 <__ledf2+0x78>
 800164e:	4663      	mov	r3, ip
 8001650:	2000      	movs	r0, #0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d030      	beq.n	80016b8 <__ledf2+0xa8>
 8001656:	4651      	mov	r1, sl
 8001658:	2002      	movs	r0, #2
 800165a:	3901      	subs	r1, #1
 800165c:	4008      	ands	r0, r1
 800165e:	3801      	subs	r0, #1
 8001660:	e02a      	b.n	80016b8 <__ledf2+0xa8>
 8001662:	0039      	movs	r1, r7
 8001664:	4311      	orrs	r1, r2
 8001666:	d0ea      	beq.n	800163e <__ledf2+0x2e>
 8001668:	2002      	movs	r0, #2
 800166a:	e025      	b.n	80016b8 <__ledf2+0xa8>
 800166c:	4330      	orrs	r0, r6
 800166e:	d1fb      	bne.n	8001668 <__ledf2+0x58>
 8001670:	42ac      	cmp	r4, r5
 8001672:	d026      	beq.n	80016c2 <__ledf2+0xb2>
 8001674:	2c00      	cmp	r4, #0
 8001676:	d126      	bne.n	80016c6 <__ledf2+0xb6>
 8001678:	433a      	orrs	r2, r7
 800167a:	d124      	bne.n	80016c6 <__ledf2+0xb6>
 800167c:	4651      	mov	r1, sl
 800167e:	2002      	movs	r0, #2
 8001680:	3901      	subs	r1, #1
 8001682:	4008      	ands	r0, r1
 8001684:	3801      	subs	r0, #1
 8001686:	e017      	b.n	80016b8 <__ledf2+0xa8>
 8001688:	4662      	mov	r2, ip
 800168a:	2a00      	cmp	r2, #0
 800168c:	d00f      	beq.n	80016ae <__ledf2+0x9e>
 800168e:	459a      	cmp	sl, r3
 8001690:	d1e1      	bne.n	8001656 <__ledf2+0x46>
 8001692:	42a5      	cmp	r5, r4
 8001694:	db05      	blt.n	80016a2 <__ledf2+0x92>
 8001696:	42be      	cmp	r6, r7
 8001698:	d8dd      	bhi.n	8001656 <__ledf2+0x46>
 800169a:	d019      	beq.n	80016d0 <__ledf2+0xc0>
 800169c:	2000      	movs	r0, #0
 800169e:	42be      	cmp	r6, r7
 80016a0:	d20a      	bcs.n	80016b8 <__ledf2+0xa8>
 80016a2:	4650      	mov	r0, sl
 80016a4:	2301      	movs	r3, #1
 80016a6:	3801      	subs	r0, #1
 80016a8:	4398      	bics	r0, r3
 80016aa:	3001      	adds	r0, #1
 80016ac:	e004      	b.n	80016b8 <__ledf2+0xa8>
 80016ae:	2201      	movs	r2, #1
 80016b0:	3b01      	subs	r3, #1
 80016b2:	4393      	bics	r3, r2
 80016b4:	0018      	movs	r0, r3
 80016b6:	3001      	adds	r0, #1
 80016b8:	bc1c      	pop	{r2, r3, r4}
 80016ba:	4690      	mov	r8, r2
 80016bc:	4699      	mov	r9, r3
 80016be:	46a2      	mov	sl, r4
 80016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c2:	433a      	orrs	r2, r7
 80016c4:	d1d0      	bne.n	8001668 <__ledf2+0x58>
 80016c6:	459a      	cmp	sl, r3
 80016c8:	d1c5      	bne.n	8001656 <__ledf2+0x46>
 80016ca:	42a5      	cmp	r5, r4
 80016cc:	dcc3      	bgt.n	8001656 <__ledf2+0x46>
 80016ce:	e7e0      	b.n	8001692 <__ledf2+0x82>
 80016d0:	45c8      	cmp	r8, r9
 80016d2:	d8c0      	bhi.n	8001656 <__ledf2+0x46>
 80016d4:	2000      	movs	r0, #0
 80016d6:	45c8      	cmp	r8, r9
 80016d8:	d3e3      	bcc.n	80016a2 <__ledf2+0x92>
 80016da:	e7ed      	b.n	80016b8 <__ledf2+0xa8>
 80016dc:	000007ff 	.word	0x000007ff

080016e0 <__aeabi_dmul>:
 80016e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e2:	4657      	mov	r7, sl
 80016e4:	46de      	mov	lr, fp
 80016e6:	464e      	mov	r6, r9
 80016e8:	4645      	mov	r5, r8
 80016ea:	b5e0      	push	{r5, r6, r7, lr}
 80016ec:	4683      	mov	fp, r0
 80016ee:	0006      	movs	r6, r0
 80016f0:	030f      	lsls	r7, r1, #12
 80016f2:	0048      	lsls	r0, r1, #1
 80016f4:	b087      	sub	sp, #28
 80016f6:	4692      	mov	sl, r2
 80016f8:	001d      	movs	r5, r3
 80016fa:	0b3f      	lsrs	r7, r7, #12
 80016fc:	0d40      	lsrs	r0, r0, #21
 80016fe:	0fcc      	lsrs	r4, r1, #31
 8001700:	2800      	cmp	r0, #0
 8001702:	d100      	bne.n	8001706 <__aeabi_dmul+0x26>
 8001704:	e06f      	b.n	80017e6 <__aeabi_dmul+0x106>
 8001706:	4bde      	ldr	r3, [pc, #888]	; (8001a80 <__aeabi_dmul+0x3a0>)
 8001708:	4298      	cmp	r0, r3
 800170a:	d038      	beq.n	800177e <__aeabi_dmul+0x9e>
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	00ff      	lsls	r7, r7, #3
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	431f      	orrs	r7, r3
 8001714:	0f73      	lsrs	r3, r6, #29
 8001716:	433b      	orrs	r3, r7
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	4bda      	ldr	r3, [pc, #872]	; (8001a84 <__aeabi_dmul+0x3a4>)
 800171c:	2700      	movs	r7, #0
 800171e:	4699      	mov	r9, r3
 8001720:	2300      	movs	r3, #0
 8001722:	469b      	mov	fp, r3
 8001724:	00f6      	lsls	r6, r6, #3
 8001726:	4481      	add	r9, r0
 8001728:	032b      	lsls	r3, r5, #12
 800172a:	0069      	lsls	r1, r5, #1
 800172c:	0b1b      	lsrs	r3, r3, #12
 800172e:	4652      	mov	r2, sl
 8001730:	4698      	mov	r8, r3
 8001732:	0d49      	lsrs	r1, r1, #21
 8001734:	0fed      	lsrs	r5, r5, #31
 8001736:	2900      	cmp	r1, #0
 8001738:	d100      	bne.n	800173c <__aeabi_dmul+0x5c>
 800173a:	e085      	b.n	8001848 <__aeabi_dmul+0x168>
 800173c:	4bd0      	ldr	r3, [pc, #832]	; (8001a80 <__aeabi_dmul+0x3a0>)
 800173e:	4299      	cmp	r1, r3
 8001740:	d100      	bne.n	8001744 <__aeabi_dmul+0x64>
 8001742:	e073      	b.n	800182c <__aeabi_dmul+0x14c>
 8001744:	4643      	mov	r3, r8
 8001746:	00da      	lsls	r2, r3, #3
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	041b      	lsls	r3, r3, #16
 800174c:	4313      	orrs	r3, r2
 800174e:	4652      	mov	r2, sl
 8001750:	48cc      	ldr	r0, [pc, #816]	; (8001a84 <__aeabi_dmul+0x3a4>)
 8001752:	0f52      	lsrs	r2, r2, #29
 8001754:	4684      	mov	ip, r0
 8001756:	4313      	orrs	r3, r2
 8001758:	4652      	mov	r2, sl
 800175a:	2000      	movs	r0, #0
 800175c:	4461      	add	r1, ip
 800175e:	00d2      	lsls	r2, r2, #3
 8001760:	4489      	add	r9, r1
 8001762:	0021      	movs	r1, r4
 8001764:	4069      	eors	r1, r5
 8001766:	9100      	str	r1, [sp, #0]
 8001768:	468c      	mov	ip, r1
 800176a:	2101      	movs	r1, #1
 800176c:	4449      	add	r1, r9
 800176e:	468a      	mov	sl, r1
 8001770:	2f0f      	cmp	r7, #15
 8001772:	d900      	bls.n	8001776 <__aeabi_dmul+0x96>
 8001774:	e090      	b.n	8001898 <__aeabi_dmul+0x1b8>
 8001776:	49c4      	ldr	r1, [pc, #784]	; (8001a88 <__aeabi_dmul+0x3a8>)
 8001778:	00bf      	lsls	r7, r7, #2
 800177a:	59cf      	ldr	r7, [r1, r7]
 800177c:	46bf      	mov	pc, r7
 800177e:	465b      	mov	r3, fp
 8001780:	433b      	orrs	r3, r7
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	d000      	beq.n	8001788 <__aeabi_dmul+0xa8>
 8001786:	e16a      	b.n	8001a5e <__aeabi_dmul+0x37e>
 8001788:	2302      	movs	r3, #2
 800178a:	2708      	movs	r7, #8
 800178c:	2600      	movs	r6, #0
 800178e:	4681      	mov	r9, r0
 8001790:	469b      	mov	fp, r3
 8001792:	e7c9      	b.n	8001728 <__aeabi_dmul+0x48>
 8001794:	0032      	movs	r2, r6
 8001796:	4658      	mov	r0, fp
 8001798:	9b01      	ldr	r3, [sp, #4]
 800179a:	4661      	mov	r1, ip
 800179c:	9100      	str	r1, [sp, #0]
 800179e:	2802      	cmp	r0, #2
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dmul+0xc4>
 80017a2:	e075      	b.n	8001890 <__aeabi_dmul+0x1b0>
 80017a4:	2803      	cmp	r0, #3
 80017a6:	d100      	bne.n	80017aa <__aeabi_dmul+0xca>
 80017a8:	e1fe      	b.n	8001ba8 <__aeabi_dmul+0x4c8>
 80017aa:	2801      	cmp	r0, #1
 80017ac:	d000      	beq.n	80017b0 <__aeabi_dmul+0xd0>
 80017ae:	e12c      	b.n	8001a0a <__aeabi_dmul+0x32a>
 80017b0:	2300      	movs	r3, #0
 80017b2:	2700      	movs	r7, #0
 80017b4:	2600      	movs	r6, #0
 80017b6:	2500      	movs	r5, #0
 80017b8:	033f      	lsls	r7, r7, #12
 80017ba:	0d2a      	lsrs	r2, r5, #20
 80017bc:	0b3f      	lsrs	r7, r7, #12
 80017be:	48b3      	ldr	r0, [pc, #716]	; (8001a8c <__aeabi_dmul+0x3ac>)
 80017c0:	0512      	lsls	r2, r2, #20
 80017c2:	433a      	orrs	r2, r7
 80017c4:	4002      	ands	r2, r0
 80017c6:	051b      	lsls	r3, r3, #20
 80017c8:	4313      	orrs	r3, r2
 80017ca:	9a00      	ldr	r2, [sp, #0]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	07d1      	lsls	r1, r2, #31
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	430b      	orrs	r3, r1
 80017d4:	0030      	movs	r0, r6
 80017d6:	0019      	movs	r1, r3
 80017d8:	b007      	add	sp, #28
 80017da:	bc3c      	pop	{r2, r3, r4, r5}
 80017dc:	4690      	mov	r8, r2
 80017de:	4699      	mov	r9, r3
 80017e0:	46a2      	mov	sl, r4
 80017e2:	46ab      	mov	fp, r5
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	465b      	mov	r3, fp
 80017e8:	433b      	orrs	r3, r7
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dmul+0x110>
 80017ee:	e12f      	b.n	8001a50 <__aeabi_dmul+0x370>
 80017f0:	2f00      	cmp	r7, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dmul+0x116>
 80017f4:	e1a5      	b.n	8001b42 <__aeabi_dmul+0x462>
 80017f6:	0038      	movs	r0, r7
 80017f8:	f000 fec0 	bl	800257c <__clzsi2>
 80017fc:	0003      	movs	r3, r0
 80017fe:	3b0b      	subs	r3, #11
 8001800:	2b1c      	cmp	r3, #28
 8001802:	dd00      	ble.n	8001806 <__aeabi_dmul+0x126>
 8001804:	e196      	b.n	8001b34 <__aeabi_dmul+0x454>
 8001806:	221d      	movs	r2, #29
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	465a      	mov	r2, fp
 800180c:	0001      	movs	r1, r0
 800180e:	40da      	lsrs	r2, r3
 8001810:	465e      	mov	r6, fp
 8001812:	3908      	subs	r1, #8
 8001814:	408f      	lsls	r7, r1
 8001816:	0013      	movs	r3, r2
 8001818:	408e      	lsls	r6, r1
 800181a:	433b      	orrs	r3, r7
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	4b9c      	ldr	r3, [pc, #624]	; (8001a90 <__aeabi_dmul+0x3b0>)
 8001820:	2700      	movs	r7, #0
 8001822:	1a1b      	subs	r3, r3, r0
 8001824:	4699      	mov	r9, r3
 8001826:	2300      	movs	r3, #0
 8001828:	469b      	mov	fp, r3
 800182a:	e77d      	b.n	8001728 <__aeabi_dmul+0x48>
 800182c:	4641      	mov	r1, r8
 800182e:	4653      	mov	r3, sl
 8001830:	430b      	orrs	r3, r1
 8001832:	4993      	ldr	r1, [pc, #588]	; (8001a80 <__aeabi_dmul+0x3a0>)
 8001834:	468c      	mov	ip, r1
 8001836:	44e1      	add	r9, ip
 8001838:	2b00      	cmp	r3, #0
 800183a:	d000      	beq.n	800183e <__aeabi_dmul+0x15e>
 800183c:	e11a      	b.n	8001a74 <__aeabi_dmul+0x394>
 800183e:	2202      	movs	r2, #2
 8001840:	2002      	movs	r0, #2
 8001842:	4317      	orrs	r7, r2
 8001844:	2200      	movs	r2, #0
 8001846:	e78c      	b.n	8001762 <__aeabi_dmul+0x82>
 8001848:	4313      	orrs	r3, r2
 800184a:	d100      	bne.n	800184e <__aeabi_dmul+0x16e>
 800184c:	e10d      	b.n	8001a6a <__aeabi_dmul+0x38a>
 800184e:	4643      	mov	r3, r8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d100      	bne.n	8001856 <__aeabi_dmul+0x176>
 8001854:	e181      	b.n	8001b5a <__aeabi_dmul+0x47a>
 8001856:	4640      	mov	r0, r8
 8001858:	f000 fe90 	bl	800257c <__clzsi2>
 800185c:	0002      	movs	r2, r0
 800185e:	3a0b      	subs	r2, #11
 8001860:	2a1c      	cmp	r2, #28
 8001862:	dd00      	ble.n	8001866 <__aeabi_dmul+0x186>
 8001864:	e172      	b.n	8001b4c <__aeabi_dmul+0x46c>
 8001866:	0001      	movs	r1, r0
 8001868:	4643      	mov	r3, r8
 800186a:	3908      	subs	r1, #8
 800186c:	408b      	lsls	r3, r1
 800186e:	4698      	mov	r8, r3
 8001870:	231d      	movs	r3, #29
 8001872:	1a9a      	subs	r2, r3, r2
 8001874:	4653      	mov	r3, sl
 8001876:	40d3      	lsrs	r3, r2
 8001878:	001a      	movs	r2, r3
 800187a:	4643      	mov	r3, r8
 800187c:	4313      	orrs	r3, r2
 800187e:	4652      	mov	r2, sl
 8001880:	408a      	lsls	r2, r1
 8001882:	4649      	mov	r1, r9
 8001884:	1a08      	subs	r0, r1, r0
 8001886:	4982      	ldr	r1, [pc, #520]	; (8001a90 <__aeabi_dmul+0x3b0>)
 8001888:	4689      	mov	r9, r1
 800188a:	4481      	add	r9, r0
 800188c:	2000      	movs	r0, #0
 800188e:	e768      	b.n	8001762 <__aeabi_dmul+0x82>
 8001890:	4b7b      	ldr	r3, [pc, #492]	; (8001a80 <__aeabi_dmul+0x3a0>)
 8001892:	2700      	movs	r7, #0
 8001894:	2600      	movs	r6, #0
 8001896:	e78e      	b.n	80017b6 <__aeabi_dmul+0xd6>
 8001898:	0c14      	lsrs	r4, r2, #16
 800189a:	0412      	lsls	r2, r2, #16
 800189c:	0c12      	lsrs	r2, r2, #16
 800189e:	0011      	movs	r1, r2
 80018a0:	0c37      	lsrs	r7, r6, #16
 80018a2:	0436      	lsls	r6, r6, #16
 80018a4:	0c35      	lsrs	r5, r6, #16
 80018a6:	4379      	muls	r1, r7
 80018a8:	0028      	movs	r0, r5
 80018aa:	468c      	mov	ip, r1
 80018ac:	002e      	movs	r6, r5
 80018ae:	4360      	muls	r0, r4
 80018b0:	4460      	add	r0, ip
 80018b2:	4683      	mov	fp, r0
 80018b4:	4356      	muls	r6, r2
 80018b6:	0021      	movs	r1, r4
 80018b8:	0c30      	lsrs	r0, r6, #16
 80018ba:	4680      	mov	r8, r0
 80018bc:	4658      	mov	r0, fp
 80018be:	4379      	muls	r1, r7
 80018c0:	4440      	add	r0, r8
 80018c2:	9102      	str	r1, [sp, #8]
 80018c4:	4584      	cmp	ip, r0
 80018c6:	d906      	bls.n	80018d6 <__aeabi_dmul+0x1f6>
 80018c8:	4688      	mov	r8, r1
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0249      	lsls	r1, r1, #9
 80018ce:	468c      	mov	ip, r1
 80018d0:	44e0      	add	r8, ip
 80018d2:	4641      	mov	r1, r8
 80018d4:	9102      	str	r1, [sp, #8]
 80018d6:	0436      	lsls	r6, r6, #16
 80018d8:	0c01      	lsrs	r1, r0, #16
 80018da:	0c36      	lsrs	r6, r6, #16
 80018dc:	0400      	lsls	r0, r0, #16
 80018de:	468b      	mov	fp, r1
 80018e0:	1981      	adds	r1, r0, r6
 80018e2:	0c1e      	lsrs	r6, r3, #16
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	0c1b      	lsrs	r3, r3, #16
 80018e8:	9103      	str	r1, [sp, #12]
 80018ea:	0019      	movs	r1, r3
 80018ec:	4379      	muls	r1, r7
 80018ee:	468c      	mov	ip, r1
 80018f0:	0028      	movs	r0, r5
 80018f2:	4375      	muls	r5, r6
 80018f4:	4465      	add	r5, ip
 80018f6:	46a8      	mov	r8, r5
 80018f8:	4358      	muls	r0, r3
 80018fa:	0c05      	lsrs	r5, r0, #16
 80018fc:	4445      	add	r5, r8
 80018fe:	4377      	muls	r7, r6
 8001900:	42a9      	cmp	r1, r5
 8001902:	d903      	bls.n	800190c <__aeabi_dmul+0x22c>
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	0249      	lsls	r1, r1, #9
 8001908:	468c      	mov	ip, r1
 800190a:	4467      	add	r7, ip
 800190c:	0c29      	lsrs	r1, r5, #16
 800190e:	468c      	mov	ip, r1
 8001910:	0039      	movs	r1, r7
 8001912:	0400      	lsls	r0, r0, #16
 8001914:	0c00      	lsrs	r0, r0, #16
 8001916:	042d      	lsls	r5, r5, #16
 8001918:	182d      	adds	r5, r5, r0
 800191a:	4461      	add	r1, ip
 800191c:	44ab      	add	fp, r5
 800191e:	9105      	str	r1, [sp, #20]
 8001920:	4659      	mov	r1, fp
 8001922:	9104      	str	r1, [sp, #16]
 8001924:	9901      	ldr	r1, [sp, #4]
 8001926:	040f      	lsls	r7, r1, #16
 8001928:	0c3f      	lsrs	r7, r7, #16
 800192a:	0c08      	lsrs	r0, r1, #16
 800192c:	0039      	movs	r1, r7
 800192e:	4351      	muls	r1, r2
 8001930:	4342      	muls	r2, r0
 8001932:	4690      	mov	r8, r2
 8001934:	0002      	movs	r2, r0
 8001936:	468c      	mov	ip, r1
 8001938:	0c09      	lsrs	r1, r1, #16
 800193a:	468b      	mov	fp, r1
 800193c:	4362      	muls	r2, r4
 800193e:	437c      	muls	r4, r7
 8001940:	4444      	add	r4, r8
 8001942:	445c      	add	r4, fp
 8001944:	45a0      	cmp	r8, r4
 8001946:	d903      	bls.n	8001950 <__aeabi_dmul+0x270>
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	0249      	lsls	r1, r1, #9
 800194c:	4688      	mov	r8, r1
 800194e:	4442      	add	r2, r8
 8001950:	0c21      	lsrs	r1, r4, #16
 8001952:	4688      	mov	r8, r1
 8001954:	4661      	mov	r1, ip
 8001956:	0409      	lsls	r1, r1, #16
 8001958:	0c09      	lsrs	r1, r1, #16
 800195a:	468c      	mov	ip, r1
 800195c:	0039      	movs	r1, r7
 800195e:	4359      	muls	r1, r3
 8001960:	4343      	muls	r3, r0
 8001962:	4370      	muls	r0, r6
 8001964:	437e      	muls	r6, r7
 8001966:	0c0f      	lsrs	r7, r1, #16
 8001968:	18f6      	adds	r6, r6, r3
 800196a:	0424      	lsls	r4, r4, #16
 800196c:	19be      	adds	r6, r7, r6
 800196e:	4464      	add	r4, ip
 8001970:	4442      	add	r2, r8
 8001972:	468c      	mov	ip, r1
 8001974:	42b3      	cmp	r3, r6
 8001976:	d903      	bls.n	8001980 <__aeabi_dmul+0x2a0>
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	025b      	lsls	r3, r3, #9
 800197c:	4698      	mov	r8, r3
 800197e:	4440      	add	r0, r8
 8001980:	9b02      	ldr	r3, [sp, #8]
 8001982:	4661      	mov	r1, ip
 8001984:	4698      	mov	r8, r3
 8001986:	9b04      	ldr	r3, [sp, #16]
 8001988:	0437      	lsls	r7, r6, #16
 800198a:	4443      	add	r3, r8
 800198c:	469b      	mov	fp, r3
 800198e:	45ab      	cmp	fp, r5
 8001990:	41ad      	sbcs	r5, r5
 8001992:	426b      	negs	r3, r5
 8001994:	040d      	lsls	r5, r1, #16
 8001996:	9905      	ldr	r1, [sp, #20]
 8001998:	0c2d      	lsrs	r5, r5, #16
 800199a:	468c      	mov	ip, r1
 800199c:	197f      	adds	r7, r7, r5
 800199e:	4467      	add	r7, ip
 80019a0:	18fd      	adds	r5, r7, r3
 80019a2:	46a8      	mov	r8, r5
 80019a4:	465d      	mov	r5, fp
 80019a6:	192d      	adds	r5, r5, r4
 80019a8:	42a5      	cmp	r5, r4
 80019aa:	41a4      	sbcs	r4, r4
 80019ac:	4693      	mov	fp, r2
 80019ae:	4264      	negs	r4, r4
 80019b0:	46a4      	mov	ip, r4
 80019b2:	44c3      	add	fp, r8
 80019b4:	44dc      	add	ip, fp
 80019b6:	428f      	cmp	r7, r1
 80019b8:	41bf      	sbcs	r7, r7
 80019ba:	4598      	cmp	r8, r3
 80019bc:	419b      	sbcs	r3, r3
 80019be:	4593      	cmp	fp, r2
 80019c0:	4192      	sbcs	r2, r2
 80019c2:	45a4      	cmp	ip, r4
 80019c4:	41a4      	sbcs	r4, r4
 80019c6:	425b      	negs	r3, r3
 80019c8:	427f      	negs	r7, r7
 80019ca:	431f      	orrs	r7, r3
 80019cc:	0c36      	lsrs	r6, r6, #16
 80019ce:	4252      	negs	r2, r2
 80019d0:	4264      	negs	r4, r4
 80019d2:	19bf      	adds	r7, r7, r6
 80019d4:	4322      	orrs	r2, r4
 80019d6:	18bf      	adds	r7, r7, r2
 80019d8:	4662      	mov	r2, ip
 80019da:	1838      	adds	r0, r7, r0
 80019dc:	0243      	lsls	r3, r0, #9
 80019de:	0dd2      	lsrs	r2, r2, #23
 80019e0:	9903      	ldr	r1, [sp, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	026a      	lsls	r2, r5, #9
 80019e6:	430a      	orrs	r2, r1
 80019e8:	1e50      	subs	r0, r2, #1
 80019ea:	4182      	sbcs	r2, r0
 80019ec:	4661      	mov	r1, ip
 80019ee:	0ded      	lsrs	r5, r5, #23
 80019f0:	432a      	orrs	r2, r5
 80019f2:	024e      	lsls	r6, r1, #9
 80019f4:	4332      	orrs	r2, r6
 80019f6:	01d9      	lsls	r1, r3, #7
 80019f8:	d400      	bmi.n	80019fc <__aeabi_dmul+0x31c>
 80019fa:	e0b3      	b.n	8001b64 <__aeabi_dmul+0x484>
 80019fc:	2601      	movs	r6, #1
 80019fe:	0850      	lsrs	r0, r2, #1
 8001a00:	4032      	ands	r2, r6
 8001a02:	4302      	orrs	r2, r0
 8001a04:	07de      	lsls	r6, r3, #31
 8001a06:	4332      	orrs	r2, r6
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	4c22      	ldr	r4, [pc, #136]	; (8001a94 <__aeabi_dmul+0x3b4>)
 8001a0c:	4454      	add	r4, sl
 8001a0e:	2c00      	cmp	r4, #0
 8001a10:	dd62      	ble.n	8001ad8 <__aeabi_dmul+0x3f8>
 8001a12:	0751      	lsls	r1, r2, #29
 8001a14:	d009      	beq.n	8001a2a <__aeabi_dmul+0x34a>
 8001a16:	200f      	movs	r0, #15
 8001a18:	4010      	ands	r0, r2
 8001a1a:	2804      	cmp	r0, #4
 8001a1c:	d005      	beq.n	8001a2a <__aeabi_dmul+0x34a>
 8001a1e:	1d10      	adds	r0, r2, #4
 8001a20:	4290      	cmp	r0, r2
 8001a22:	4192      	sbcs	r2, r2
 8001a24:	4252      	negs	r2, r2
 8001a26:	189b      	adds	r3, r3, r2
 8001a28:	0002      	movs	r2, r0
 8001a2a:	01d9      	lsls	r1, r3, #7
 8001a2c:	d504      	bpl.n	8001a38 <__aeabi_dmul+0x358>
 8001a2e:	2480      	movs	r4, #128	; 0x80
 8001a30:	4819      	ldr	r0, [pc, #100]	; (8001a98 <__aeabi_dmul+0x3b8>)
 8001a32:	00e4      	lsls	r4, r4, #3
 8001a34:	4003      	ands	r3, r0
 8001a36:	4454      	add	r4, sl
 8001a38:	4818      	ldr	r0, [pc, #96]	; (8001a9c <__aeabi_dmul+0x3bc>)
 8001a3a:	4284      	cmp	r4, r0
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dmul+0x360>
 8001a3e:	e727      	b.n	8001890 <__aeabi_dmul+0x1b0>
 8001a40:	075e      	lsls	r6, r3, #29
 8001a42:	025b      	lsls	r3, r3, #9
 8001a44:	08d2      	lsrs	r2, r2, #3
 8001a46:	0b1f      	lsrs	r7, r3, #12
 8001a48:	0563      	lsls	r3, r4, #21
 8001a4a:	4316      	orrs	r6, r2
 8001a4c:	0d5b      	lsrs	r3, r3, #21
 8001a4e:	e6b2      	b.n	80017b6 <__aeabi_dmul+0xd6>
 8001a50:	2300      	movs	r3, #0
 8001a52:	4699      	mov	r9, r3
 8001a54:	3301      	adds	r3, #1
 8001a56:	2704      	movs	r7, #4
 8001a58:	2600      	movs	r6, #0
 8001a5a:	469b      	mov	fp, r3
 8001a5c:	e664      	b.n	8001728 <__aeabi_dmul+0x48>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	9701      	str	r7, [sp, #4]
 8001a62:	4681      	mov	r9, r0
 8001a64:	270c      	movs	r7, #12
 8001a66:	469b      	mov	fp, r3
 8001a68:	e65e      	b.n	8001728 <__aeabi_dmul+0x48>
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	4317      	orrs	r7, r2
 8001a70:	2200      	movs	r2, #0
 8001a72:	e676      	b.n	8001762 <__aeabi_dmul+0x82>
 8001a74:	2303      	movs	r3, #3
 8001a76:	2003      	movs	r0, #3
 8001a78:	431f      	orrs	r7, r3
 8001a7a:	4643      	mov	r3, r8
 8001a7c:	e671      	b.n	8001762 <__aeabi_dmul+0x82>
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	000007ff 	.word	0x000007ff
 8001a84:	fffffc01 	.word	0xfffffc01
 8001a88:	0800921c 	.word	0x0800921c
 8001a8c:	800fffff 	.word	0x800fffff
 8001a90:	fffffc0d 	.word	0xfffffc0d
 8001a94:	000003ff 	.word	0x000003ff
 8001a98:	feffffff 	.word	0xfeffffff
 8001a9c:	000007fe 	.word	0x000007fe
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2780      	movs	r7, #128	; 0x80
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	033f      	lsls	r7, r7, #12
 8001aa8:	2600      	movs	r6, #0
 8001aaa:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <__aeabi_dmul+0x4d8>)
 8001aac:	e683      	b.n	80017b6 <__aeabi_dmul+0xd6>
 8001aae:	9b01      	ldr	r3, [sp, #4]
 8001ab0:	0032      	movs	r2, r6
 8001ab2:	46a4      	mov	ip, r4
 8001ab4:	4658      	mov	r0, fp
 8001ab6:	e670      	b.n	800179a <__aeabi_dmul+0xba>
 8001ab8:	46ac      	mov	ip, r5
 8001aba:	e66e      	b.n	800179a <__aeabi_dmul+0xba>
 8001abc:	2780      	movs	r7, #128	; 0x80
 8001abe:	9901      	ldr	r1, [sp, #4]
 8001ac0:	033f      	lsls	r7, r7, #12
 8001ac2:	4239      	tst	r1, r7
 8001ac4:	d02d      	beq.n	8001b22 <__aeabi_dmul+0x442>
 8001ac6:	423b      	tst	r3, r7
 8001ac8:	d12b      	bne.n	8001b22 <__aeabi_dmul+0x442>
 8001aca:	431f      	orrs	r7, r3
 8001acc:	033f      	lsls	r7, r7, #12
 8001ace:	0b3f      	lsrs	r7, r7, #12
 8001ad0:	9500      	str	r5, [sp, #0]
 8001ad2:	0016      	movs	r6, r2
 8001ad4:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <__aeabi_dmul+0x4d8>)
 8001ad6:	e66e      	b.n	80017b6 <__aeabi_dmul+0xd6>
 8001ad8:	2501      	movs	r5, #1
 8001ada:	1b2d      	subs	r5, r5, r4
 8001adc:	2d38      	cmp	r5, #56	; 0x38
 8001ade:	dd00      	ble.n	8001ae2 <__aeabi_dmul+0x402>
 8001ae0:	e666      	b.n	80017b0 <__aeabi_dmul+0xd0>
 8001ae2:	2d1f      	cmp	r5, #31
 8001ae4:	dc40      	bgt.n	8001b68 <__aeabi_dmul+0x488>
 8001ae6:	4835      	ldr	r0, [pc, #212]	; (8001bbc <__aeabi_dmul+0x4dc>)
 8001ae8:	001c      	movs	r4, r3
 8001aea:	4450      	add	r0, sl
 8001aec:	0016      	movs	r6, r2
 8001aee:	4082      	lsls	r2, r0
 8001af0:	4084      	lsls	r4, r0
 8001af2:	40ee      	lsrs	r6, r5
 8001af4:	1e50      	subs	r0, r2, #1
 8001af6:	4182      	sbcs	r2, r0
 8001af8:	4334      	orrs	r4, r6
 8001afa:	4314      	orrs	r4, r2
 8001afc:	40eb      	lsrs	r3, r5
 8001afe:	0762      	lsls	r2, r4, #29
 8001b00:	d009      	beq.n	8001b16 <__aeabi_dmul+0x436>
 8001b02:	220f      	movs	r2, #15
 8001b04:	4022      	ands	r2, r4
 8001b06:	2a04      	cmp	r2, #4
 8001b08:	d005      	beq.n	8001b16 <__aeabi_dmul+0x436>
 8001b0a:	0022      	movs	r2, r4
 8001b0c:	1d14      	adds	r4, r2, #4
 8001b0e:	4294      	cmp	r4, r2
 8001b10:	4180      	sbcs	r0, r0
 8001b12:	4240      	negs	r0, r0
 8001b14:	181b      	adds	r3, r3, r0
 8001b16:	021a      	lsls	r2, r3, #8
 8001b18:	d53e      	bpl.n	8001b98 <__aeabi_dmul+0x4b8>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	2600      	movs	r6, #0
 8001b20:	e649      	b.n	80017b6 <__aeabi_dmul+0xd6>
 8001b22:	2780      	movs	r7, #128	; 0x80
 8001b24:	9b01      	ldr	r3, [sp, #4]
 8001b26:	033f      	lsls	r7, r7, #12
 8001b28:	431f      	orrs	r7, r3
 8001b2a:	033f      	lsls	r7, r7, #12
 8001b2c:	0b3f      	lsrs	r7, r7, #12
 8001b2e:	9400      	str	r4, [sp, #0]
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <__aeabi_dmul+0x4d8>)
 8001b32:	e640      	b.n	80017b6 <__aeabi_dmul+0xd6>
 8001b34:	0003      	movs	r3, r0
 8001b36:	465a      	mov	r2, fp
 8001b38:	3b28      	subs	r3, #40	; 0x28
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	2600      	movs	r6, #0
 8001b3e:	9201      	str	r2, [sp, #4]
 8001b40:	e66d      	b.n	800181e <__aeabi_dmul+0x13e>
 8001b42:	4658      	mov	r0, fp
 8001b44:	f000 fd1a 	bl	800257c <__clzsi2>
 8001b48:	3020      	adds	r0, #32
 8001b4a:	e657      	b.n	80017fc <__aeabi_dmul+0x11c>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	4652      	mov	r2, sl
 8001b50:	3b28      	subs	r3, #40	; 0x28
 8001b52:	409a      	lsls	r2, r3
 8001b54:	0013      	movs	r3, r2
 8001b56:	2200      	movs	r2, #0
 8001b58:	e693      	b.n	8001882 <__aeabi_dmul+0x1a2>
 8001b5a:	4650      	mov	r0, sl
 8001b5c:	f000 fd0e 	bl	800257c <__clzsi2>
 8001b60:	3020      	adds	r0, #32
 8001b62:	e67b      	b.n	800185c <__aeabi_dmul+0x17c>
 8001b64:	46ca      	mov	sl, r9
 8001b66:	e750      	b.n	8001a0a <__aeabi_dmul+0x32a>
 8001b68:	201f      	movs	r0, #31
 8001b6a:	001e      	movs	r6, r3
 8001b6c:	4240      	negs	r0, r0
 8001b6e:	1b04      	subs	r4, r0, r4
 8001b70:	40e6      	lsrs	r6, r4
 8001b72:	2d20      	cmp	r5, #32
 8001b74:	d003      	beq.n	8001b7e <__aeabi_dmul+0x49e>
 8001b76:	4c12      	ldr	r4, [pc, #72]	; (8001bc0 <__aeabi_dmul+0x4e0>)
 8001b78:	4454      	add	r4, sl
 8001b7a:	40a3      	lsls	r3, r4
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	1e50      	subs	r0, r2, #1
 8001b80:	4182      	sbcs	r2, r0
 8001b82:	4332      	orrs	r2, r6
 8001b84:	2607      	movs	r6, #7
 8001b86:	2700      	movs	r7, #0
 8001b88:	4016      	ands	r6, r2
 8001b8a:	d009      	beq.n	8001ba0 <__aeabi_dmul+0x4c0>
 8001b8c:	200f      	movs	r0, #15
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4010      	ands	r0, r2
 8001b92:	0014      	movs	r4, r2
 8001b94:	2804      	cmp	r0, #4
 8001b96:	d1b9      	bne.n	8001b0c <__aeabi_dmul+0x42c>
 8001b98:	0022      	movs	r2, r4
 8001b9a:	075e      	lsls	r6, r3, #29
 8001b9c:	025b      	lsls	r3, r3, #9
 8001b9e:	0b1f      	lsrs	r7, r3, #12
 8001ba0:	08d2      	lsrs	r2, r2, #3
 8001ba2:	4316      	orrs	r6, r2
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e606      	b.n	80017b6 <__aeabi_dmul+0xd6>
 8001ba8:	2780      	movs	r7, #128	; 0x80
 8001baa:	033f      	lsls	r7, r7, #12
 8001bac:	431f      	orrs	r7, r3
 8001bae:	033f      	lsls	r7, r7, #12
 8001bb0:	0b3f      	lsrs	r7, r7, #12
 8001bb2:	0016      	movs	r6, r2
 8001bb4:	4b00      	ldr	r3, [pc, #0]	; (8001bb8 <__aeabi_dmul+0x4d8>)
 8001bb6:	e5fe      	b.n	80017b6 <__aeabi_dmul+0xd6>
 8001bb8:	000007ff 	.word	0x000007ff
 8001bbc:	0000041e 	.word	0x0000041e
 8001bc0:	0000043e 	.word	0x0000043e

08001bc4 <__aeabi_dsub>:
 8001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc6:	4657      	mov	r7, sl
 8001bc8:	464e      	mov	r6, r9
 8001bca:	4645      	mov	r5, r8
 8001bcc:	46de      	mov	lr, fp
 8001bce:	000c      	movs	r4, r1
 8001bd0:	0309      	lsls	r1, r1, #12
 8001bd2:	b5e0      	push	{r5, r6, r7, lr}
 8001bd4:	0a49      	lsrs	r1, r1, #9
 8001bd6:	0f46      	lsrs	r6, r0, #29
 8001bd8:	005f      	lsls	r7, r3, #1
 8001bda:	4331      	orrs	r1, r6
 8001bdc:	031e      	lsls	r6, r3, #12
 8001bde:	0fdb      	lsrs	r3, r3, #31
 8001be0:	0a76      	lsrs	r6, r6, #9
 8001be2:	469b      	mov	fp, r3
 8001be4:	0f53      	lsrs	r3, r2, #29
 8001be6:	4333      	orrs	r3, r6
 8001be8:	4ec8      	ldr	r6, [pc, #800]	; (8001f0c <__aeabi_dsub+0x348>)
 8001bea:	0065      	lsls	r5, r4, #1
 8001bec:	00c0      	lsls	r0, r0, #3
 8001bee:	0fe4      	lsrs	r4, r4, #31
 8001bf0:	00d2      	lsls	r2, r2, #3
 8001bf2:	0d6d      	lsrs	r5, r5, #21
 8001bf4:	46a2      	mov	sl, r4
 8001bf6:	4681      	mov	r9, r0
 8001bf8:	0d7f      	lsrs	r7, r7, #21
 8001bfa:	469c      	mov	ip, r3
 8001bfc:	4690      	mov	r8, r2
 8001bfe:	42b7      	cmp	r7, r6
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x40>
 8001c02:	e0b9      	b.n	8001d78 <__aeabi_dsub+0x1b4>
 8001c04:	465b      	mov	r3, fp
 8001c06:	2601      	movs	r6, #1
 8001c08:	4073      	eors	r3, r6
 8001c0a:	469b      	mov	fp, r3
 8001c0c:	1bee      	subs	r6, r5, r7
 8001c0e:	45a3      	cmp	fp, r4
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dsub+0x50>
 8001c12:	e083      	b.n	8001d1c <__aeabi_dsub+0x158>
 8001c14:	2e00      	cmp	r6, #0
 8001c16:	dd63      	ble.n	8001ce0 <__aeabi_dsub+0x11c>
 8001c18:	2f00      	cmp	r7, #0
 8001c1a:	d000      	beq.n	8001c1e <__aeabi_dsub+0x5a>
 8001c1c:	e0b1      	b.n	8001d82 <__aeabi_dsub+0x1be>
 8001c1e:	4663      	mov	r3, ip
 8001c20:	4313      	orrs	r3, r2
 8001c22:	d100      	bne.n	8001c26 <__aeabi_dsub+0x62>
 8001c24:	e123      	b.n	8001e6e <__aeabi_dsub+0x2aa>
 8001c26:	1e73      	subs	r3, r6, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d000      	beq.n	8001c2e <__aeabi_dsub+0x6a>
 8001c2c:	e1ba      	b.n	8001fa4 <__aeabi_dsub+0x3e0>
 8001c2e:	1a86      	subs	r6, r0, r2
 8001c30:	4663      	mov	r3, ip
 8001c32:	42b0      	cmp	r0, r6
 8001c34:	4180      	sbcs	r0, r0
 8001c36:	2501      	movs	r5, #1
 8001c38:	1ac9      	subs	r1, r1, r3
 8001c3a:	4240      	negs	r0, r0
 8001c3c:	1a09      	subs	r1, r1, r0
 8001c3e:	020b      	lsls	r3, r1, #8
 8001c40:	d400      	bmi.n	8001c44 <__aeabi_dsub+0x80>
 8001c42:	e147      	b.n	8001ed4 <__aeabi_dsub+0x310>
 8001c44:	0249      	lsls	r1, r1, #9
 8001c46:	0a4b      	lsrs	r3, r1, #9
 8001c48:	4698      	mov	r8, r3
 8001c4a:	4643      	mov	r3, r8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x8e>
 8001c50:	e189      	b.n	8001f66 <__aeabi_dsub+0x3a2>
 8001c52:	4640      	mov	r0, r8
 8001c54:	f000 fc92 	bl	800257c <__clzsi2>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	3b08      	subs	r3, #8
 8001c5c:	2b1f      	cmp	r3, #31
 8001c5e:	dd00      	ble.n	8001c62 <__aeabi_dsub+0x9e>
 8001c60:	e17c      	b.n	8001f5c <__aeabi_dsub+0x398>
 8001c62:	2220      	movs	r2, #32
 8001c64:	0030      	movs	r0, r6
 8001c66:	1ad2      	subs	r2, r2, r3
 8001c68:	4641      	mov	r1, r8
 8001c6a:	40d0      	lsrs	r0, r2
 8001c6c:	4099      	lsls	r1, r3
 8001c6e:	0002      	movs	r2, r0
 8001c70:	409e      	lsls	r6, r3
 8001c72:	430a      	orrs	r2, r1
 8001c74:	429d      	cmp	r5, r3
 8001c76:	dd00      	ble.n	8001c7a <__aeabi_dsub+0xb6>
 8001c78:	e16a      	b.n	8001f50 <__aeabi_dsub+0x38c>
 8001c7a:	1b5d      	subs	r5, r3, r5
 8001c7c:	1c6b      	adds	r3, r5, #1
 8001c7e:	2b1f      	cmp	r3, #31
 8001c80:	dd00      	ble.n	8001c84 <__aeabi_dsub+0xc0>
 8001c82:	e194      	b.n	8001fae <__aeabi_dsub+0x3ea>
 8001c84:	2120      	movs	r1, #32
 8001c86:	0010      	movs	r0, r2
 8001c88:	0035      	movs	r5, r6
 8001c8a:	1ac9      	subs	r1, r1, r3
 8001c8c:	408e      	lsls	r6, r1
 8001c8e:	40da      	lsrs	r2, r3
 8001c90:	4088      	lsls	r0, r1
 8001c92:	40dd      	lsrs	r5, r3
 8001c94:	1e71      	subs	r1, r6, #1
 8001c96:	418e      	sbcs	r6, r1
 8001c98:	0011      	movs	r1, r2
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	4328      	orrs	r0, r5
 8001c9e:	2500      	movs	r5, #0
 8001ca0:	4306      	orrs	r6, r0
 8001ca2:	4032      	ands	r2, r6
 8001ca4:	2a00      	cmp	r2, #0
 8001ca6:	d009      	beq.n	8001cbc <__aeabi_dsub+0xf8>
 8001ca8:	230f      	movs	r3, #15
 8001caa:	4033      	ands	r3, r6
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d005      	beq.n	8001cbc <__aeabi_dsub+0xf8>
 8001cb0:	1d33      	adds	r3, r6, #4
 8001cb2:	42b3      	cmp	r3, r6
 8001cb4:	41b6      	sbcs	r6, r6
 8001cb6:	4276      	negs	r6, r6
 8001cb8:	1989      	adds	r1, r1, r6
 8001cba:	001e      	movs	r6, r3
 8001cbc:	020b      	lsls	r3, r1, #8
 8001cbe:	d400      	bmi.n	8001cc2 <__aeabi_dsub+0xfe>
 8001cc0:	e23d      	b.n	800213e <__aeabi_dsub+0x57a>
 8001cc2:	1c6a      	adds	r2, r5, #1
 8001cc4:	4b91      	ldr	r3, [pc, #580]	; (8001f0c <__aeabi_dsub+0x348>)
 8001cc6:	0555      	lsls	r5, r2, #21
 8001cc8:	0d6d      	lsrs	r5, r5, #21
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x10c>
 8001cce:	e119      	b.n	8001f04 <__aeabi_dsub+0x340>
 8001cd0:	4a8f      	ldr	r2, [pc, #572]	; (8001f10 <__aeabi_dsub+0x34c>)
 8001cd2:	08f6      	lsrs	r6, r6, #3
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	0757      	lsls	r7, r2, #29
 8001cd8:	0252      	lsls	r2, r2, #9
 8001cda:	4337      	orrs	r7, r6
 8001cdc:	0b12      	lsrs	r2, r2, #12
 8001cde:	e09b      	b.n	8001e18 <__aeabi_dsub+0x254>
 8001ce0:	2e00      	cmp	r6, #0
 8001ce2:	d000      	beq.n	8001ce6 <__aeabi_dsub+0x122>
 8001ce4:	e0c5      	b.n	8001e72 <__aeabi_dsub+0x2ae>
 8001ce6:	1c6e      	adds	r6, r5, #1
 8001ce8:	0576      	lsls	r6, r6, #21
 8001cea:	0d76      	lsrs	r6, r6, #21
 8001cec:	2e01      	cmp	r6, #1
 8001cee:	dc00      	bgt.n	8001cf2 <__aeabi_dsub+0x12e>
 8001cf0:	e148      	b.n	8001f84 <__aeabi_dsub+0x3c0>
 8001cf2:	4667      	mov	r7, ip
 8001cf4:	1a86      	subs	r6, r0, r2
 8001cf6:	1bcb      	subs	r3, r1, r7
 8001cf8:	42b0      	cmp	r0, r6
 8001cfa:	41bf      	sbcs	r7, r7
 8001cfc:	427f      	negs	r7, r7
 8001cfe:	46b8      	mov	r8, r7
 8001d00:	001f      	movs	r7, r3
 8001d02:	4643      	mov	r3, r8
 8001d04:	1aff      	subs	r7, r7, r3
 8001d06:	003b      	movs	r3, r7
 8001d08:	46b8      	mov	r8, r7
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	d500      	bpl.n	8001d10 <__aeabi_dsub+0x14c>
 8001d0e:	e15f      	b.n	8001fd0 <__aeabi_dsub+0x40c>
 8001d10:	4337      	orrs	r7, r6
 8001d12:	d19a      	bne.n	8001c4a <__aeabi_dsub+0x86>
 8001d14:	2200      	movs	r2, #0
 8001d16:	2400      	movs	r4, #0
 8001d18:	2500      	movs	r5, #0
 8001d1a:	e079      	b.n	8001e10 <__aeabi_dsub+0x24c>
 8001d1c:	2e00      	cmp	r6, #0
 8001d1e:	dc00      	bgt.n	8001d22 <__aeabi_dsub+0x15e>
 8001d20:	e0fa      	b.n	8001f18 <__aeabi_dsub+0x354>
 8001d22:	2f00      	cmp	r7, #0
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x164>
 8001d26:	e08d      	b.n	8001e44 <__aeabi_dsub+0x280>
 8001d28:	4b78      	ldr	r3, [pc, #480]	; (8001f0c <__aeabi_dsub+0x348>)
 8001d2a:	429d      	cmp	r5, r3
 8001d2c:	d067      	beq.n	8001dfe <__aeabi_dsub+0x23a>
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	4667      	mov	r7, ip
 8001d32:	041b      	lsls	r3, r3, #16
 8001d34:	431f      	orrs	r7, r3
 8001d36:	46bc      	mov	ip, r7
 8001d38:	2e38      	cmp	r6, #56	; 0x38
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_dsub+0x17a>
 8001d3c:	e152      	b.n	8001fe4 <__aeabi_dsub+0x420>
 8001d3e:	4663      	mov	r3, ip
 8001d40:	4313      	orrs	r3, r2
 8001d42:	1e5a      	subs	r2, r3, #1
 8001d44:	4193      	sbcs	r3, r2
 8001d46:	181e      	adds	r6, r3, r0
 8001d48:	4286      	cmp	r6, r0
 8001d4a:	4180      	sbcs	r0, r0
 8001d4c:	4240      	negs	r0, r0
 8001d4e:	1809      	adds	r1, r1, r0
 8001d50:	020b      	lsls	r3, r1, #8
 8001d52:	d400      	bmi.n	8001d56 <__aeabi_dsub+0x192>
 8001d54:	e0be      	b.n	8001ed4 <__aeabi_dsub+0x310>
 8001d56:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <__aeabi_dsub+0x348>)
 8001d58:	3501      	adds	r5, #1
 8001d5a:	429d      	cmp	r5, r3
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x19c>
 8001d5e:	e0d2      	b.n	8001f06 <__aeabi_dsub+0x342>
 8001d60:	4a6b      	ldr	r2, [pc, #428]	; (8001f10 <__aeabi_dsub+0x34c>)
 8001d62:	0873      	lsrs	r3, r6, #1
 8001d64:	400a      	ands	r2, r1
 8001d66:	2101      	movs	r1, #1
 8001d68:	400e      	ands	r6, r1
 8001d6a:	431e      	orrs	r6, r3
 8001d6c:	0851      	lsrs	r1, r2, #1
 8001d6e:	07d3      	lsls	r3, r2, #31
 8001d70:	2207      	movs	r2, #7
 8001d72:	431e      	orrs	r6, r3
 8001d74:	4032      	ands	r2, r6
 8001d76:	e795      	b.n	8001ca4 <__aeabi_dsub+0xe0>
 8001d78:	001e      	movs	r6, r3
 8001d7a:	4316      	orrs	r6, r2
 8001d7c:	d000      	beq.n	8001d80 <__aeabi_dsub+0x1bc>
 8001d7e:	e745      	b.n	8001c0c <__aeabi_dsub+0x48>
 8001d80:	e740      	b.n	8001c04 <__aeabi_dsub+0x40>
 8001d82:	4b62      	ldr	r3, [pc, #392]	; (8001f0c <__aeabi_dsub+0x348>)
 8001d84:	429d      	cmp	r5, r3
 8001d86:	d03a      	beq.n	8001dfe <__aeabi_dsub+0x23a>
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	4667      	mov	r7, ip
 8001d8c:	041b      	lsls	r3, r3, #16
 8001d8e:	431f      	orrs	r7, r3
 8001d90:	46bc      	mov	ip, r7
 8001d92:	2e38      	cmp	r6, #56	; 0x38
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dsub+0x1d4>
 8001d96:	e0eb      	b.n	8001f70 <__aeabi_dsub+0x3ac>
 8001d98:	2e1f      	cmp	r6, #31
 8001d9a:	dc00      	bgt.n	8001d9e <__aeabi_dsub+0x1da>
 8001d9c:	e13a      	b.n	8002014 <__aeabi_dsub+0x450>
 8001d9e:	0033      	movs	r3, r6
 8001da0:	4667      	mov	r7, ip
 8001da2:	3b20      	subs	r3, #32
 8001da4:	40df      	lsrs	r7, r3
 8001da6:	003b      	movs	r3, r7
 8001da8:	2e20      	cmp	r6, #32
 8001daa:	d005      	beq.n	8001db8 <__aeabi_dsub+0x1f4>
 8001dac:	2740      	movs	r7, #64	; 0x40
 8001dae:	1bbf      	subs	r7, r7, r6
 8001db0:	4666      	mov	r6, ip
 8001db2:	40be      	lsls	r6, r7
 8001db4:	4332      	orrs	r2, r6
 8001db6:	4690      	mov	r8, r2
 8001db8:	4646      	mov	r6, r8
 8001dba:	1e72      	subs	r2, r6, #1
 8001dbc:	4196      	sbcs	r6, r2
 8001dbe:	4333      	orrs	r3, r6
 8001dc0:	e0da      	b.n	8001f78 <__aeabi_dsub+0x3b4>
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_dsub+0x204>
 8001dc6:	e214      	b.n	80021f2 <__aeabi_dsub+0x62e>
 8001dc8:	4663      	mov	r3, ip
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x20c>
 8001dce:	e168      	b.n	80020a2 <__aeabi_dsub+0x4de>
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	074e      	lsls	r6, r1, #29
 8001dd4:	08c0      	lsrs	r0, r0, #3
 8001dd6:	08c9      	lsrs	r1, r1, #3
 8001dd8:	031b      	lsls	r3, r3, #12
 8001dda:	4306      	orrs	r6, r0
 8001ddc:	4219      	tst	r1, r3
 8001dde:	d008      	beq.n	8001df2 <__aeabi_dsub+0x22e>
 8001de0:	4660      	mov	r0, ip
 8001de2:	08c0      	lsrs	r0, r0, #3
 8001de4:	4218      	tst	r0, r3
 8001de6:	d104      	bne.n	8001df2 <__aeabi_dsub+0x22e>
 8001de8:	4663      	mov	r3, ip
 8001dea:	0001      	movs	r1, r0
 8001dec:	08d2      	lsrs	r2, r2, #3
 8001dee:	075e      	lsls	r6, r3, #29
 8001df0:	4316      	orrs	r6, r2
 8001df2:	00f3      	lsls	r3, r6, #3
 8001df4:	4699      	mov	r9, r3
 8001df6:	00c9      	lsls	r1, r1, #3
 8001df8:	0f72      	lsrs	r2, r6, #29
 8001dfa:	4d44      	ldr	r5, [pc, #272]	; (8001f0c <__aeabi_dsub+0x348>)
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	464b      	mov	r3, r9
 8001e00:	08de      	lsrs	r6, r3, #3
 8001e02:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <__aeabi_dsub+0x348>)
 8001e04:	074f      	lsls	r7, r1, #29
 8001e06:	4337      	orrs	r7, r6
 8001e08:	08ca      	lsrs	r2, r1, #3
 8001e0a:	429d      	cmp	r5, r3
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x24c>
 8001e0e:	e06e      	b.n	8001eee <__aeabi_dsub+0x32a>
 8001e10:	0312      	lsls	r2, r2, #12
 8001e12:	056d      	lsls	r5, r5, #21
 8001e14:	0b12      	lsrs	r2, r2, #12
 8001e16:	0d6d      	lsrs	r5, r5, #21
 8001e18:	2100      	movs	r1, #0
 8001e1a:	0312      	lsls	r2, r2, #12
 8001e1c:	0b13      	lsrs	r3, r2, #12
 8001e1e:	0d0a      	lsrs	r2, r1, #20
 8001e20:	0512      	lsls	r2, r2, #20
 8001e22:	431a      	orrs	r2, r3
 8001e24:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <__aeabi_dsub+0x350>)
 8001e26:	052d      	lsls	r5, r5, #20
 8001e28:	4013      	ands	r3, r2
 8001e2a:	432b      	orrs	r3, r5
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	07e4      	lsls	r4, r4, #31
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	4323      	orrs	r3, r4
 8001e34:	0038      	movs	r0, r7
 8001e36:	0019      	movs	r1, r3
 8001e38:	bc3c      	pop	{r2, r3, r4, r5}
 8001e3a:	4690      	mov	r8, r2
 8001e3c:	4699      	mov	r9, r3
 8001e3e:	46a2      	mov	sl, r4
 8001e40:	46ab      	mov	fp, r5
 8001e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e44:	4663      	mov	r3, ip
 8001e46:	4313      	orrs	r3, r2
 8001e48:	d011      	beq.n	8001e6e <__aeabi_dsub+0x2aa>
 8001e4a:	1e73      	subs	r3, r6, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dsub+0x28e>
 8001e50:	e107      	b.n	8002062 <__aeabi_dsub+0x49e>
 8001e52:	1886      	adds	r6, r0, r2
 8001e54:	4286      	cmp	r6, r0
 8001e56:	4180      	sbcs	r0, r0
 8001e58:	4461      	add	r1, ip
 8001e5a:	4240      	negs	r0, r0
 8001e5c:	1809      	adds	r1, r1, r0
 8001e5e:	2501      	movs	r5, #1
 8001e60:	020b      	lsls	r3, r1, #8
 8001e62:	d537      	bpl.n	8001ed4 <__aeabi_dsub+0x310>
 8001e64:	2502      	movs	r5, #2
 8001e66:	e77b      	b.n	8001d60 <__aeabi_dsub+0x19c>
 8001e68:	003e      	movs	r6, r7
 8001e6a:	4661      	mov	r1, ip
 8001e6c:	4691      	mov	r9, r2
 8001e6e:	0035      	movs	r5, r6
 8001e70:	e7c5      	b.n	8001dfe <__aeabi_dsub+0x23a>
 8001e72:	465c      	mov	r4, fp
 8001e74:	2d00      	cmp	r5, #0
 8001e76:	d000      	beq.n	8001e7a <__aeabi_dsub+0x2b6>
 8001e78:	e0e1      	b.n	800203e <__aeabi_dsub+0x47a>
 8001e7a:	000b      	movs	r3, r1
 8001e7c:	4303      	orrs	r3, r0
 8001e7e:	d0f3      	beq.n	8001e68 <__aeabi_dsub+0x2a4>
 8001e80:	1c73      	adds	r3, r6, #1
 8001e82:	d100      	bne.n	8001e86 <__aeabi_dsub+0x2c2>
 8001e84:	e1ac      	b.n	80021e0 <__aeabi_dsub+0x61c>
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <__aeabi_dsub+0x348>)
 8001e88:	429f      	cmp	r7, r3
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_dsub+0x2ca>
 8001e8c:	e13a      	b.n	8002104 <__aeabi_dsub+0x540>
 8001e8e:	43f3      	mvns	r3, r6
 8001e90:	2b38      	cmp	r3, #56	; 0x38
 8001e92:	dd00      	ble.n	8001e96 <__aeabi_dsub+0x2d2>
 8001e94:	e16f      	b.n	8002176 <__aeabi_dsub+0x5b2>
 8001e96:	2b1f      	cmp	r3, #31
 8001e98:	dd00      	ble.n	8001e9c <__aeabi_dsub+0x2d8>
 8001e9a:	e18c      	b.n	80021b6 <__aeabi_dsub+0x5f2>
 8001e9c:	2520      	movs	r5, #32
 8001e9e:	000e      	movs	r6, r1
 8001ea0:	1aed      	subs	r5, r5, r3
 8001ea2:	40ae      	lsls	r6, r5
 8001ea4:	46b0      	mov	r8, r6
 8001ea6:	0006      	movs	r6, r0
 8001ea8:	46aa      	mov	sl, r5
 8001eaa:	40de      	lsrs	r6, r3
 8001eac:	4645      	mov	r5, r8
 8001eae:	4335      	orrs	r5, r6
 8001eb0:	002e      	movs	r6, r5
 8001eb2:	4655      	mov	r5, sl
 8001eb4:	40d9      	lsrs	r1, r3
 8001eb6:	40a8      	lsls	r0, r5
 8001eb8:	4663      	mov	r3, ip
 8001eba:	1e45      	subs	r5, r0, #1
 8001ebc:	41a8      	sbcs	r0, r5
 8001ebe:	1a5b      	subs	r3, r3, r1
 8001ec0:	469c      	mov	ip, r3
 8001ec2:	4330      	orrs	r0, r6
 8001ec4:	1a16      	subs	r6, r2, r0
 8001ec6:	42b2      	cmp	r2, r6
 8001ec8:	4192      	sbcs	r2, r2
 8001eca:	4663      	mov	r3, ip
 8001ecc:	4252      	negs	r2, r2
 8001ece:	1a99      	subs	r1, r3, r2
 8001ed0:	003d      	movs	r5, r7
 8001ed2:	e6b4      	b.n	8001c3e <__aeabi_dsub+0x7a>
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	4032      	ands	r2, r6
 8001ed8:	2a00      	cmp	r2, #0
 8001eda:	d000      	beq.n	8001ede <__aeabi_dsub+0x31a>
 8001edc:	e6e4      	b.n	8001ca8 <__aeabi_dsub+0xe4>
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <__aeabi_dsub+0x348>)
 8001ee0:	08f6      	lsrs	r6, r6, #3
 8001ee2:	074f      	lsls	r7, r1, #29
 8001ee4:	4337      	orrs	r7, r6
 8001ee6:	08ca      	lsrs	r2, r1, #3
 8001ee8:	429d      	cmp	r5, r3
 8001eea:	d000      	beq.n	8001eee <__aeabi_dsub+0x32a>
 8001eec:	e790      	b.n	8001e10 <__aeabi_dsub+0x24c>
 8001eee:	003b      	movs	r3, r7
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x332>
 8001ef4:	e1a6      	b.n	8002244 <__aeabi_dsub+0x680>
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	031b      	lsls	r3, r3, #12
 8001efa:	431a      	orrs	r2, r3
 8001efc:	0312      	lsls	r2, r2, #12
 8001efe:	0b12      	lsrs	r2, r2, #12
 8001f00:	4d02      	ldr	r5, [pc, #8]	; (8001f0c <__aeabi_dsub+0x348>)
 8001f02:	e789      	b.n	8001e18 <__aeabi_dsub+0x254>
 8001f04:	0015      	movs	r5, r2
 8001f06:	2200      	movs	r2, #0
 8001f08:	2700      	movs	r7, #0
 8001f0a:	e785      	b.n	8001e18 <__aeabi_dsub+0x254>
 8001f0c:	000007ff 	.word	0x000007ff
 8001f10:	ff7fffff 	.word	0xff7fffff
 8001f14:	800fffff 	.word	0x800fffff
 8001f18:	2e00      	cmp	r6, #0
 8001f1a:	d000      	beq.n	8001f1e <__aeabi_dsub+0x35a>
 8001f1c:	e0c7      	b.n	80020ae <__aeabi_dsub+0x4ea>
 8001f1e:	1c6b      	adds	r3, r5, #1
 8001f20:	055e      	lsls	r6, r3, #21
 8001f22:	0d76      	lsrs	r6, r6, #21
 8001f24:	2e01      	cmp	r6, #1
 8001f26:	dc00      	bgt.n	8001f2a <__aeabi_dsub+0x366>
 8001f28:	e0f0      	b.n	800210c <__aeabi_dsub+0x548>
 8001f2a:	4dc8      	ldr	r5, [pc, #800]	; (800224c <__aeabi_dsub+0x688>)
 8001f2c:	42ab      	cmp	r3, r5
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x36e>
 8001f30:	e0b9      	b.n	80020a6 <__aeabi_dsub+0x4e2>
 8001f32:	1885      	adds	r5, r0, r2
 8001f34:	000a      	movs	r2, r1
 8001f36:	4285      	cmp	r5, r0
 8001f38:	4189      	sbcs	r1, r1
 8001f3a:	4462      	add	r2, ip
 8001f3c:	4249      	negs	r1, r1
 8001f3e:	1851      	adds	r1, r2, r1
 8001f40:	2207      	movs	r2, #7
 8001f42:	07ce      	lsls	r6, r1, #31
 8001f44:	086d      	lsrs	r5, r5, #1
 8001f46:	432e      	orrs	r6, r5
 8001f48:	0849      	lsrs	r1, r1, #1
 8001f4a:	4032      	ands	r2, r6
 8001f4c:	001d      	movs	r5, r3
 8001f4e:	e6a9      	b.n	8001ca4 <__aeabi_dsub+0xe0>
 8001f50:	49bf      	ldr	r1, [pc, #764]	; (8002250 <__aeabi_dsub+0x68c>)
 8001f52:	1aed      	subs	r5, r5, r3
 8001f54:	4011      	ands	r1, r2
 8001f56:	2207      	movs	r2, #7
 8001f58:	4032      	ands	r2, r6
 8001f5a:	e6a3      	b.n	8001ca4 <__aeabi_dsub+0xe0>
 8001f5c:	0032      	movs	r2, r6
 8001f5e:	3828      	subs	r0, #40	; 0x28
 8001f60:	4082      	lsls	r2, r0
 8001f62:	2600      	movs	r6, #0
 8001f64:	e686      	b.n	8001c74 <__aeabi_dsub+0xb0>
 8001f66:	0030      	movs	r0, r6
 8001f68:	f000 fb08 	bl	800257c <__clzsi2>
 8001f6c:	3020      	adds	r0, #32
 8001f6e:	e673      	b.n	8001c58 <__aeabi_dsub+0x94>
 8001f70:	4663      	mov	r3, ip
 8001f72:	4313      	orrs	r3, r2
 8001f74:	1e5a      	subs	r2, r3, #1
 8001f76:	4193      	sbcs	r3, r2
 8001f78:	1ac6      	subs	r6, r0, r3
 8001f7a:	42b0      	cmp	r0, r6
 8001f7c:	4180      	sbcs	r0, r0
 8001f7e:	4240      	negs	r0, r0
 8001f80:	1a09      	subs	r1, r1, r0
 8001f82:	e65c      	b.n	8001c3e <__aeabi_dsub+0x7a>
 8001f84:	000e      	movs	r6, r1
 8001f86:	4667      	mov	r7, ip
 8001f88:	4306      	orrs	r6, r0
 8001f8a:	4317      	orrs	r7, r2
 8001f8c:	2d00      	cmp	r5, #0
 8001f8e:	d15e      	bne.n	800204e <__aeabi_dsub+0x48a>
 8001f90:	2e00      	cmp	r6, #0
 8001f92:	d000      	beq.n	8001f96 <__aeabi_dsub+0x3d2>
 8001f94:	e0f3      	b.n	800217e <__aeabi_dsub+0x5ba>
 8001f96:	2f00      	cmp	r7, #0
 8001f98:	d100      	bne.n	8001f9c <__aeabi_dsub+0x3d8>
 8001f9a:	e11e      	b.n	80021da <__aeabi_dsub+0x616>
 8001f9c:	465c      	mov	r4, fp
 8001f9e:	4661      	mov	r1, ip
 8001fa0:	4691      	mov	r9, r2
 8001fa2:	e72c      	b.n	8001dfe <__aeabi_dsub+0x23a>
 8001fa4:	4fa9      	ldr	r7, [pc, #676]	; (800224c <__aeabi_dsub+0x688>)
 8001fa6:	42be      	cmp	r6, r7
 8001fa8:	d07b      	beq.n	80020a2 <__aeabi_dsub+0x4de>
 8001faa:	001e      	movs	r6, r3
 8001fac:	e6f1      	b.n	8001d92 <__aeabi_dsub+0x1ce>
 8001fae:	0010      	movs	r0, r2
 8001fb0:	3d1f      	subs	r5, #31
 8001fb2:	40e8      	lsrs	r0, r5
 8001fb4:	2b20      	cmp	r3, #32
 8001fb6:	d003      	beq.n	8001fc0 <__aeabi_dsub+0x3fc>
 8001fb8:	2140      	movs	r1, #64	; 0x40
 8001fba:	1acb      	subs	r3, r1, r3
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	4316      	orrs	r6, r2
 8001fc0:	1e73      	subs	r3, r6, #1
 8001fc2:	419e      	sbcs	r6, r3
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	4306      	orrs	r6, r0
 8001fc8:	4032      	ands	r2, r6
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2500      	movs	r5, #0
 8001fce:	e783      	b.n	8001ed8 <__aeabi_dsub+0x314>
 8001fd0:	1a16      	subs	r6, r2, r0
 8001fd2:	4663      	mov	r3, ip
 8001fd4:	42b2      	cmp	r2, r6
 8001fd6:	4180      	sbcs	r0, r0
 8001fd8:	1a59      	subs	r1, r3, r1
 8001fda:	4240      	negs	r0, r0
 8001fdc:	1a0b      	subs	r3, r1, r0
 8001fde:	4698      	mov	r8, r3
 8001fe0:	465c      	mov	r4, fp
 8001fe2:	e632      	b.n	8001c4a <__aeabi_dsub+0x86>
 8001fe4:	2e1f      	cmp	r6, #31
 8001fe6:	dd00      	ble.n	8001fea <__aeabi_dsub+0x426>
 8001fe8:	e0ab      	b.n	8002142 <__aeabi_dsub+0x57e>
 8001fea:	2720      	movs	r7, #32
 8001fec:	1bbb      	subs	r3, r7, r6
 8001fee:	469a      	mov	sl, r3
 8001ff0:	4663      	mov	r3, ip
 8001ff2:	4657      	mov	r7, sl
 8001ff4:	40bb      	lsls	r3, r7
 8001ff6:	4699      	mov	r9, r3
 8001ff8:	0013      	movs	r3, r2
 8001ffa:	464f      	mov	r7, r9
 8001ffc:	40f3      	lsrs	r3, r6
 8001ffe:	431f      	orrs	r7, r3
 8002000:	003b      	movs	r3, r7
 8002002:	4657      	mov	r7, sl
 8002004:	40ba      	lsls	r2, r7
 8002006:	1e57      	subs	r7, r2, #1
 8002008:	41ba      	sbcs	r2, r7
 800200a:	4313      	orrs	r3, r2
 800200c:	4662      	mov	r2, ip
 800200e:	40f2      	lsrs	r2, r6
 8002010:	1889      	adds	r1, r1, r2
 8002012:	e698      	b.n	8001d46 <__aeabi_dsub+0x182>
 8002014:	2720      	movs	r7, #32
 8002016:	1bbb      	subs	r3, r7, r6
 8002018:	469a      	mov	sl, r3
 800201a:	4663      	mov	r3, ip
 800201c:	4657      	mov	r7, sl
 800201e:	40bb      	lsls	r3, r7
 8002020:	4699      	mov	r9, r3
 8002022:	0013      	movs	r3, r2
 8002024:	464f      	mov	r7, r9
 8002026:	40f3      	lsrs	r3, r6
 8002028:	431f      	orrs	r7, r3
 800202a:	003b      	movs	r3, r7
 800202c:	4657      	mov	r7, sl
 800202e:	40ba      	lsls	r2, r7
 8002030:	1e57      	subs	r7, r2, #1
 8002032:	41ba      	sbcs	r2, r7
 8002034:	4313      	orrs	r3, r2
 8002036:	4662      	mov	r2, ip
 8002038:	40f2      	lsrs	r2, r6
 800203a:	1a89      	subs	r1, r1, r2
 800203c:	e79c      	b.n	8001f78 <__aeabi_dsub+0x3b4>
 800203e:	4b83      	ldr	r3, [pc, #524]	; (800224c <__aeabi_dsub+0x688>)
 8002040:	429f      	cmp	r7, r3
 8002042:	d05f      	beq.n	8002104 <__aeabi_dsub+0x540>
 8002044:	2580      	movs	r5, #128	; 0x80
 8002046:	042d      	lsls	r5, r5, #16
 8002048:	4273      	negs	r3, r6
 800204a:	4329      	orrs	r1, r5
 800204c:	e720      	b.n	8001e90 <__aeabi_dsub+0x2cc>
 800204e:	2e00      	cmp	r6, #0
 8002050:	d10c      	bne.n	800206c <__aeabi_dsub+0x4a8>
 8002052:	2f00      	cmp	r7, #0
 8002054:	d100      	bne.n	8002058 <__aeabi_dsub+0x494>
 8002056:	e0d0      	b.n	80021fa <__aeabi_dsub+0x636>
 8002058:	465c      	mov	r4, fp
 800205a:	4661      	mov	r1, ip
 800205c:	4691      	mov	r9, r2
 800205e:	4d7b      	ldr	r5, [pc, #492]	; (800224c <__aeabi_dsub+0x688>)
 8002060:	e6cd      	b.n	8001dfe <__aeabi_dsub+0x23a>
 8002062:	4f7a      	ldr	r7, [pc, #488]	; (800224c <__aeabi_dsub+0x688>)
 8002064:	42be      	cmp	r6, r7
 8002066:	d01c      	beq.n	80020a2 <__aeabi_dsub+0x4de>
 8002068:	001e      	movs	r6, r3
 800206a:	e665      	b.n	8001d38 <__aeabi_dsub+0x174>
 800206c:	2f00      	cmp	r7, #0
 800206e:	d018      	beq.n	80020a2 <__aeabi_dsub+0x4de>
 8002070:	08c0      	lsrs	r0, r0, #3
 8002072:	074e      	lsls	r6, r1, #29
 8002074:	4306      	orrs	r6, r0
 8002076:	2080      	movs	r0, #128	; 0x80
 8002078:	08c9      	lsrs	r1, r1, #3
 800207a:	0300      	lsls	r0, r0, #12
 800207c:	4201      	tst	r1, r0
 800207e:	d008      	beq.n	8002092 <__aeabi_dsub+0x4ce>
 8002080:	4663      	mov	r3, ip
 8002082:	08dc      	lsrs	r4, r3, #3
 8002084:	4204      	tst	r4, r0
 8002086:	d104      	bne.n	8002092 <__aeabi_dsub+0x4ce>
 8002088:	0021      	movs	r1, r4
 800208a:	46da      	mov	sl, fp
 800208c:	08d2      	lsrs	r2, r2, #3
 800208e:	075e      	lsls	r6, r3, #29
 8002090:	4316      	orrs	r6, r2
 8002092:	00f3      	lsls	r3, r6, #3
 8002094:	4699      	mov	r9, r3
 8002096:	2401      	movs	r4, #1
 8002098:	4653      	mov	r3, sl
 800209a:	00c9      	lsls	r1, r1, #3
 800209c:	0f72      	lsrs	r2, r6, #29
 800209e:	4311      	orrs	r1, r2
 80020a0:	401c      	ands	r4, r3
 80020a2:	4d6a      	ldr	r5, [pc, #424]	; (800224c <__aeabi_dsub+0x688>)
 80020a4:	e6ab      	b.n	8001dfe <__aeabi_dsub+0x23a>
 80020a6:	001d      	movs	r5, r3
 80020a8:	2200      	movs	r2, #0
 80020aa:	2700      	movs	r7, #0
 80020ac:	e6b4      	b.n	8001e18 <__aeabi_dsub+0x254>
 80020ae:	2d00      	cmp	r5, #0
 80020b0:	d159      	bne.n	8002166 <__aeabi_dsub+0x5a2>
 80020b2:	000b      	movs	r3, r1
 80020b4:	4303      	orrs	r3, r0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x4f6>
 80020b8:	e6d6      	b.n	8001e68 <__aeabi_dsub+0x2a4>
 80020ba:	1c73      	adds	r3, r6, #1
 80020bc:	d100      	bne.n	80020c0 <__aeabi_dsub+0x4fc>
 80020be:	e0b2      	b.n	8002226 <__aeabi_dsub+0x662>
 80020c0:	4b62      	ldr	r3, [pc, #392]	; (800224c <__aeabi_dsub+0x688>)
 80020c2:	429f      	cmp	r7, r3
 80020c4:	d01e      	beq.n	8002104 <__aeabi_dsub+0x540>
 80020c6:	43f3      	mvns	r3, r6
 80020c8:	2b38      	cmp	r3, #56	; 0x38
 80020ca:	dc6f      	bgt.n	80021ac <__aeabi_dsub+0x5e8>
 80020cc:	2b1f      	cmp	r3, #31
 80020ce:	dd00      	ble.n	80020d2 <__aeabi_dsub+0x50e>
 80020d0:	e097      	b.n	8002202 <__aeabi_dsub+0x63e>
 80020d2:	2520      	movs	r5, #32
 80020d4:	000e      	movs	r6, r1
 80020d6:	1aed      	subs	r5, r5, r3
 80020d8:	40ae      	lsls	r6, r5
 80020da:	46b0      	mov	r8, r6
 80020dc:	0006      	movs	r6, r0
 80020de:	46aa      	mov	sl, r5
 80020e0:	40de      	lsrs	r6, r3
 80020e2:	4645      	mov	r5, r8
 80020e4:	4335      	orrs	r5, r6
 80020e6:	002e      	movs	r6, r5
 80020e8:	4655      	mov	r5, sl
 80020ea:	40a8      	lsls	r0, r5
 80020ec:	40d9      	lsrs	r1, r3
 80020ee:	1e45      	subs	r5, r0, #1
 80020f0:	41a8      	sbcs	r0, r5
 80020f2:	448c      	add	ip, r1
 80020f4:	4306      	orrs	r6, r0
 80020f6:	18b6      	adds	r6, r6, r2
 80020f8:	4296      	cmp	r6, r2
 80020fa:	4192      	sbcs	r2, r2
 80020fc:	4251      	negs	r1, r2
 80020fe:	4461      	add	r1, ip
 8002100:	003d      	movs	r5, r7
 8002102:	e625      	b.n	8001d50 <__aeabi_dsub+0x18c>
 8002104:	003d      	movs	r5, r7
 8002106:	4661      	mov	r1, ip
 8002108:	4691      	mov	r9, r2
 800210a:	e678      	b.n	8001dfe <__aeabi_dsub+0x23a>
 800210c:	000b      	movs	r3, r1
 800210e:	4303      	orrs	r3, r0
 8002110:	2d00      	cmp	r5, #0
 8002112:	d000      	beq.n	8002116 <__aeabi_dsub+0x552>
 8002114:	e655      	b.n	8001dc2 <__aeabi_dsub+0x1fe>
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f5      	beq.n	8002106 <__aeabi_dsub+0x542>
 800211a:	4663      	mov	r3, ip
 800211c:	4313      	orrs	r3, r2
 800211e:	d100      	bne.n	8002122 <__aeabi_dsub+0x55e>
 8002120:	e66d      	b.n	8001dfe <__aeabi_dsub+0x23a>
 8002122:	1886      	adds	r6, r0, r2
 8002124:	4286      	cmp	r6, r0
 8002126:	4180      	sbcs	r0, r0
 8002128:	4461      	add	r1, ip
 800212a:	4240      	negs	r0, r0
 800212c:	1809      	adds	r1, r1, r0
 800212e:	2200      	movs	r2, #0
 8002130:	020b      	lsls	r3, r1, #8
 8002132:	d400      	bmi.n	8002136 <__aeabi_dsub+0x572>
 8002134:	e6d0      	b.n	8001ed8 <__aeabi_dsub+0x314>
 8002136:	4b46      	ldr	r3, [pc, #280]	; (8002250 <__aeabi_dsub+0x68c>)
 8002138:	3501      	adds	r5, #1
 800213a:	4019      	ands	r1, r3
 800213c:	e5b2      	b.n	8001ca4 <__aeabi_dsub+0xe0>
 800213e:	46b1      	mov	r9, r6
 8002140:	e65d      	b.n	8001dfe <__aeabi_dsub+0x23a>
 8002142:	0033      	movs	r3, r6
 8002144:	4667      	mov	r7, ip
 8002146:	3b20      	subs	r3, #32
 8002148:	40df      	lsrs	r7, r3
 800214a:	003b      	movs	r3, r7
 800214c:	2e20      	cmp	r6, #32
 800214e:	d005      	beq.n	800215c <__aeabi_dsub+0x598>
 8002150:	2740      	movs	r7, #64	; 0x40
 8002152:	1bbf      	subs	r7, r7, r6
 8002154:	4666      	mov	r6, ip
 8002156:	40be      	lsls	r6, r7
 8002158:	4332      	orrs	r2, r6
 800215a:	4690      	mov	r8, r2
 800215c:	4646      	mov	r6, r8
 800215e:	1e72      	subs	r2, r6, #1
 8002160:	4196      	sbcs	r6, r2
 8002162:	4333      	orrs	r3, r6
 8002164:	e5ef      	b.n	8001d46 <__aeabi_dsub+0x182>
 8002166:	4b39      	ldr	r3, [pc, #228]	; (800224c <__aeabi_dsub+0x688>)
 8002168:	429f      	cmp	r7, r3
 800216a:	d0cb      	beq.n	8002104 <__aeabi_dsub+0x540>
 800216c:	2580      	movs	r5, #128	; 0x80
 800216e:	042d      	lsls	r5, r5, #16
 8002170:	4273      	negs	r3, r6
 8002172:	4329      	orrs	r1, r5
 8002174:	e7a8      	b.n	80020c8 <__aeabi_dsub+0x504>
 8002176:	4308      	orrs	r0, r1
 8002178:	1e41      	subs	r1, r0, #1
 800217a:	4188      	sbcs	r0, r1
 800217c:	e6a2      	b.n	8001ec4 <__aeabi_dsub+0x300>
 800217e:	2f00      	cmp	r7, #0
 8002180:	d100      	bne.n	8002184 <__aeabi_dsub+0x5c0>
 8002182:	e63c      	b.n	8001dfe <__aeabi_dsub+0x23a>
 8002184:	4663      	mov	r3, ip
 8002186:	1a86      	subs	r6, r0, r2
 8002188:	1acf      	subs	r7, r1, r3
 800218a:	42b0      	cmp	r0, r6
 800218c:	419b      	sbcs	r3, r3
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	4698      	mov	r8, r3
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	d54e      	bpl.n	8002236 <__aeabi_dsub+0x672>
 8002198:	1a16      	subs	r6, r2, r0
 800219a:	4663      	mov	r3, ip
 800219c:	42b2      	cmp	r2, r6
 800219e:	4192      	sbcs	r2, r2
 80021a0:	1a59      	subs	r1, r3, r1
 80021a2:	4252      	negs	r2, r2
 80021a4:	1a89      	subs	r1, r1, r2
 80021a6:	465c      	mov	r4, fp
 80021a8:	2200      	movs	r2, #0
 80021aa:	e57b      	b.n	8001ca4 <__aeabi_dsub+0xe0>
 80021ac:	4301      	orrs	r1, r0
 80021ae:	000e      	movs	r6, r1
 80021b0:	1e71      	subs	r1, r6, #1
 80021b2:	418e      	sbcs	r6, r1
 80021b4:	e79f      	b.n	80020f6 <__aeabi_dsub+0x532>
 80021b6:	001d      	movs	r5, r3
 80021b8:	000e      	movs	r6, r1
 80021ba:	3d20      	subs	r5, #32
 80021bc:	40ee      	lsrs	r6, r5
 80021be:	46b0      	mov	r8, r6
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d004      	beq.n	80021ce <__aeabi_dsub+0x60a>
 80021c4:	2540      	movs	r5, #64	; 0x40
 80021c6:	1aeb      	subs	r3, r5, r3
 80021c8:	4099      	lsls	r1, r3
 80021ca:	4308      	orrs	r0, r1
 80021cc:	4681      	mov	r9, r0
 80021ce:	4648      	mov	r0, r9
 80021d0:	4643      	mov	r3, r8
 80021d2:	1e41      	subs	r1, r0, #1
 80021d4:	4188      	sbcs	r0, r1
 80021d6:	4318      	orrs	r0, r3
 80021d8:	e674      	b.n	8001ec4 <__aeabi_dsub+0x300>
 80021da:	2200      	movs	r2, #0
 80021dc:	2400      	movs	r4, #0
 80021de:	e617      	b.n	8001e10 <__aeabi_dsub+0x24c>
 80021e0:	1a16      	subs	r6, r2, r0
 80021e2:	4663      	mov	r3, ip
 80021e4:	42b2      	cmp	r2, r6
 80021e6:	4192      	sbcs	r2, r2
 80021e8:	1a59      	subs	r1, r3, r1
 80021ea:	4252      	negs	r2, r2
 80021ec:	1a89      	subs	r1, r1, r2
 80021ee:	003d      	movs	r5, r7
 80021f0:	e525      	b.n	8001c3e <__aeabi_dsub+0x7a>
 80021f2:	4661      	mov	r1, ip
 80021f4:	4691      	mov	r9, r2
 80021f6:	4d15      	ldr	r5, [pc, #84]	; (800224c <__aeabi_dsub+0x688>)
 80021f8:	e601      	b.n	8001dfe <__aeabi_dsub+0x23a>
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	2400      	movs	r4, #0
 80021fe:	0312      	lsls	r2, r2, #12
 8002200:	e679      	b.n	8001ef6 <__aeabi_dsub+0x332>
 8002202:	001d      	movs	r5, r3
 8002204:	000e      	movs	r6, r1
 8002206:	3d20      	subs	r5, #32
 8002208:	40ee      	lsrs	r6, r5
 800220a:	46b0      	mov	r8, r6
 800220c:	2b20      	cmp	r3, #32
 800220e:	d004      	beq.n	800221a <__aeabi_dsub+0x656>
 8002210:	2540      	movs	r5, #64	; 0x40
 8002212:	1aeb      	subs	r3, r5, r3
 8002214:	4099      	lsls	r1, r3
 8002216:	4308      	orrs	r0, r1
 8002218:	4681      	mov	r9, r0
 800221a:	464e      	mov	r6, r9
 800221c:	4643      	mov	r3, r8
 800221e:	1e71      	subs	r1, r6, #1
 8002220:	418e      	sbcs	r6, r1
 8002222:	431e      	orrs	r6, r3
 8002224:	e767      	b.n	80020f6 <__aeabi_dsub+0x532>
 8002226:	1886      	adds	r6, r0, r2
 8002228:	4296      	cmp	r6, r2
 800222a:	419b      	sbcs	r3, r3
 800222c:	4461      	add	r1, ip
 800222e:	425b      	negs	r3, r3
 8002230:	18c9      	adds	r1, r1, r3
 8002232:	003d      	movs	r5, r7
 8002234:	e58c      	b.n	8001d50 <__aeabi_dsub+0x18c>
 8002236:	4647      	mov	r7, r8
 8002238:	4337      	orrs	r7, r6
 800223a:	d0ce      	beq.n	80021da <__aeabi_dsub+0x616>
 800223c:	2207      	movs	r2, #7
 800223e:	4641      	mov	r1, r8
 8002240:	4032      	ands	r2, r6
 8002242:	e649      	b.n	8001ed8 <__aeabi_dsub+0x314>
 8002244:	2700      	movs	r7, #0
 8002246:	003a      	movs	r2, r7
 8002248:	e5e6      	b.n	8001e18 <__aeabi_dsub+0x254>
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	000007ff 	.word	0x000007ff
 8002250:	ff7fffff 	.word	0xff7fffff

08002254 <__aeabi_dcmpun>:
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	4e0c      	ldr	r6, [pc, #48]	; (8002288 <__aeabi_dcmpun+0x34>)
 8002258:	030d      	lsls	r5, r1, #12
 800225a:	031c      	lsls	r4, r3, #12
 800225c:	0049      	lsls	r1, r1, #1
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	0b2d      	lsrs	r5, r5, #12
 8002262:	0d49      	lsrs	r1, r1, #21
 8002264:	0b24      	lsrs	r4, r4, #12
 8002266:	0d5b      	lsrs	r3, r3, #21
 8002268:	42b1      	cmp	r1, r6
 800226a:	d008      	beq.n	800227e <__aeabi_dcmpun+0x2a>
 800226c:	4906      	ldr	r1, [pc, #24]	; (8002288 <__aeabi_dcmpun+0x34>)
 800226e:	2000      	movs	r0, #0
 8002270:	428b      	cmp	r3, r1
 8002272:	d103      	bne.n	800227c <__aeabi_dcmpun+0x28>
 8002274:	4314      	orrs	r4, r2
 8002276:	0020      	movs	r0, r4
 8002278:	1e44      	subs	r4, r0, #1
 800227a:	41a0      	sbcs	r0, r4
 800227c:	bd70      	pop	{r4, r5, r6, pc}
 800227e:	4305      	orrs	r5, r0
 8002280:	2001      	movs	r0, #1
 8002282:	2d00      	cmp	r5, #0
 8002284:	d1fa      	bne.n	800227c <__aeabi_dcmpun+0x28>
 8002286:	e7f1      	b.n	800226c <__aeabi_dcmpun+0x18>
 8002288:	000007ff 	.word	0x000007ff

0800228c <__aeabi_d2iz>:
 800228c:	b530      	push	{r4, r5, lr}
 800228e:	4d14      	ldr	r5, [pc, #80]	; (80022e0 <__aeabi_d2iz+0x54>)
 8002290:	030a      	lsls	r2, r1, #12
 8002292:	004b      	lsls	r3, r1, #1
 8002294:	0b12      	lsrs	r2, r2, #12
 8002296:	0d5b      	lsrs	r3, r3, #21
 8002298:	0fc9      	lsrs	r1, r1, #31
 800229a:	2400      	movs	r4, #0
 800229c:	42ab      	cmp	r3, r5
 800229e:	dd11      	ble.n	80022c4 <__aeabi_d2iz+0x38>
 80022a0:	4c10      	ldr	r4, [pc, #64]	; (80022e4 <__aeabi_d2iz+0x58>)
 80022a2:	42a3      	cmp	r3, r4
 80022a4:	dc10      	bgt.n	80022c8 <__aeabi_d2iz+0x3c>
 80022a6:	2480      	movs	r4, #128	; 0x80
 80022a8:	0364      	lsls	r4, r4, #13
 80022aa:	4322      	orrs	r2, r4
 80022ac:	4c0e      	ldr	r4, [pc, #56]	; (80022e8 <__aeabi_d2iz+0x5c>)
 80022ae:	1ae4      	subs	r4, r4, r3
 80022b0:	2c1f      	cmp	r4, #31
 80022b2:	dd0c      	ble.n	80022ce <__aeabi_d2iz+0x42>
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <__aeabi_d2iz+0x60>)
 80022b6:	1ac3      	subs	r3, r0, r3
 80022b8:	40da      	lsrs	r2, r3
 80022ba:	0013      	movs	r3, r2
 80022bc:	425c      	negs	r4, r3
 80022be:	2900      	cmp	r1, #0
 80022c0:	d100      	bne.n	80022c4 <__aeabi_d2iz+0x38>
 80022c2:	001c      	movs	r4, r3
 80022c4:	0020      	movs	r0, r4
 80022c6:	bd30      	pop	{r4, r5, pc}
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <__aeabi_d2iz+0x64>)
 80022ca:	18cc      	adds	r4, r1, r3
 80022cc:	e7fa      	b.n	80022c4 <__aeabi_d2iz+0x38>
 80022ce:	4d09      	ldr	r5, [pc, #36]	; (80022f4 <__aeabi_d2iz+0x68>)
 80022d0:	40e0      	lsrs	r0, r4
 80022d2:	46ac      	mov	ip, r5
 80022d4:	4463      	add	r3, ip
 80022d6:	409a      	lsls	r2, r3
 80022d8:	0013      	movs	r3, r2
 80022da:	4303      	orrs	r3, r0
 80022dc:	e7ee      	b.n	80022bc <__aeabi_d2iz+0x30>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	000003fe 	.word	0x000003fe
 80022e4:	0000041d 	.word	0x0000041d
 80022e8:	00000433 	.word	0x00000433
 80022ec:	00000413 	.word	0x00000413
 80022f0:	7fffffff 	.word	0x7fffffff
 80022f4:	fffffbed 	.word	0xfffffbed

080022f8 <__aeabi_i2d>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d02d      	beq.n	800235a <__aeabi_i2d+0x62>
 80022fe:	17c3      	asrs	r3, r0, #31
 8002300:	18c5      	adds	r5, r0, r3
 8002302:	405d      	eors	r5, r3
 8002304:	0fc4      	lsrs	r4, r0, #31
 8002306:	0028      	movs	r0, r5
 8002308:	f000 f938 	bl	800257c <__clzsi2>
 800230c:	4b15      	ldr	r3, [pc, #84]	; (8002364 <__aeabi_i2d+0x6c>)
 800230e:	1a1b      	subs	r3, r3, r0
 8002310:	055b      	lsls	r3, r3, #21
 8002312:	0d5b      	lsrs	r3, r3, #21
 8002314:	280a      	cmp	r0, #10
 8002316:	dd15      	ble.n	8002344 <__aeabi_i2d+0x4c>
 8002318:	380b      	subs	r0, #11
 800231a:	4085      	lsls	r5, r0
 800231c:	2200      	movs	r2, #0
 800231e:	032d      	lsls	r5, r5, #12
 8002320:	0b2d      	lsrs	r5, r5, #12
 8002322:	2100      	movs	r1, #0
 8002324:	0010      	movs	r0, r2
 8002326:	032d      	lsls	r5, r5, #12
 8002328:	0d0a      	lsrs	r2, r1, #20
 800232a:	0b2d      	lsrs	r5, r5, #12
 800232c:	0512      	lsls	r2, r2, #20
 800232e:	432a      	orrs	r2, r5
 8002330:	4d0d      	ldr	r5, [pc, #52]	; (8002368 <__aeabi_i2d+0x70>)
 8002332:	051b      	lsls	r3, r3, #20
 8002334:	402a      	ands	r2, r5
 8002336:	4313      	orrs	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	07e4      	lsls	r4, r4, #31
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	4323      	orrs	r3, r4
 8002340:	0019      	movs	r1, r3
 8002342:	bd70      	pop	{r4, r5, r6, pc}
 8002344:	0002      	movs	r2, r0
 8002346:	0029      	movs	r1, r5
 8002348:	3215      	adds	r2, #21
 800234a:	4091      	lsls	r1, r2
 800234c:	000a      	movs	r2, r1
 800234e:	210b      	movs	r1, #11
 8002350:	1a08      	subs	r0, r1, r0
 8002352:	40c5      	lsrs	r5, r0
 8002354:	032d      	lsls	r5, r5, #12
 8002356:	0b2d      	lsrs	r5, r5, #12
 8002358:	e7e3      	b.n	8002322 <__aeabi_i2d+0x2a>
 800235a:	2400      	movs	r4, #0
 800235c:	2300      	movs	r3, #0
 800235e:	2500      	movs	r5, #0
 8002360:	2200      	movs	r2, #0
 8002362:	e7de      	b.n	8002322 <__aeabi_i2d+0x2a>
 8002364:	0000041e 	.word	0x0000041e
 8002368:	800fffff 	.word	0x800fffff

0800236c <__aeabi_ui2d>:
 800236c:	b510      	push	{r4, lr}
 800236e:	1e04      	subs	r4, r0, #0
 8002370:	d025      	beq.n	80023be <__aeabi_ui2d+0x52>
 8002372:	f000 f903 	bl	800257c <__clzsi2>
 8002376:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <__aeabi_ui2d+0x5c>)
 8002378:	1a1b      	subs	r3, r3, r0
 800237a:	055b      	lsls	r3, r3, #21
 800237c:	0d5b      	lsrs	r3, r3, #21
 800237e:	280a      	cmp	r0, #10
 8002380:	dd12      	ble.n	80023a8 <__aeabi_ui2d+0x3c>
 8002382:	380b      	subs	r0, #11
 8002384:	4084      	lsls	r4, r0
 8002386:	2200      	movs	r2, #0
 8002388:	0324      	lsls	r4, r4, #12
 800238a:	0b24      	lsrs	r4, r4, #12
 800238c:	2100      	movs	r1, #0
 800238e:	0010      	movs	r0, r2
 8002390:	0324      	lsls	r4, r4, #12
 8002392:	0d0a      	lsrs	r2, r1, #20
 8002394:	0b24      	lsrs	r4, r4, #12
 8002396:	0512      	lsls	r2, r2, #20
 8002398:	4322      	orrs	r2, r4
 800239a:	4c0c      	ldr	r4, [pc, #48]	; (80023cc <__aeabi_ui2d+0x60>)
 800239c:	051b      	lsls	r3, r3, #20
 800239e:	4022      	ands	r2, r4
 80023a0:	4313      	orrs	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	0859      	lsrs	r1, r3, #1
 80023a6:	bd10      	pop	{r4, pc}
 80023a8:	0002      	movs	r2, r0
 80023aa:	0021      	movs	r1, r4
 80023ac:	3215      	adds	r2, #21
 80023ae:	4091      	lsls	r1, r2
 80023b0:	000a      	movs	r2, r1
 80023b2:	210b      	movs	r1, #11
 80023b4:	1a08      	subs	r0, r1, r0
 80023b6:	40c4      	lsrs	r4, r0
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	0b24      	lsrs	r4, r4, #12
 80023bc:	e7e6      	b.n	800238c <__aeabi_ui2d+0x20>
 80023be:	2300      	movs	r3, #0
 80023c0:	2400      	movs	r4, #0
 80023c2:	2200      	movs	r2, #0
 80023c4:	e7e2      	b.n	800238c <__aeabi_ui2d+0x20>
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	0000041e 	.word	0x0000041e
 80023cc:	800fffff 	.word	0x800fffff

080023d0 <__aeabi_f2d>:
 80023d0:	0041      	lsls	r1, r0, #1
 80023d2:	0e09      	lsrs	r1, r1, #24
 80023d4:	1c4b      	adds	r3, r1, #1
 80023d6:	b570      	push	{r4, r5, r6, lr}
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	0246      	lsls	r6, r0, #9
 80023dc:	0a75      	lsrs	r5, r6, #9
 80023de:	0fc4      	lsrs	r4, r0, #31
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	dd14      	ble.n	800240e <__aeabi_f2d+0x3e>
 80023e4:	23e0      	movs	r3, #224	; 0xe0
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	076d      	lsls	r5, r5, #29
 80023ea:	0b36      	lsrs	r6, r6, #12
 80023ec:	18cb      	adds	r3, r1, r3
 80023ee:	2100      	movs	r1, #0
 80023f0:	0d0a      	lsrs	r2, r1, #20
 80023f2:	0028      	movs	r0, r5
 80023f4:	0512      	lsls	r2, r2, #20
 80023f6:	4d1c      	ldr	r5, [pc, #112]	; (8002468 <__aeabi_f2d+0x98>)
 80023f8:	4332      	orrs	r2, r6
 80023fa:	055b      	lsls	r3, r3, #21
 80023fc:	402a      	ands	r2, r5
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	4313      	orrs	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	07e4      	lsls	r4, r4, #31
 8002406:	085b      	lsrs	r3, r3, #1
 8002408:	4323      	orrs	r3, r4
 800240a:	0019      	movs	r1, r3
 800240c:	bd70      	pop	{r4, r5, r6, pc}
 800240e:	2900      	cmp	r1, #0
 8002410:	d114      	bne.n	800243c <__aeabi_f2d+0x6c>
 8002412:	2d00      	cmp	r5, #0
 8002414:	d01e      	beq.n	8002454 <__aeabi_f2d+0x84>
 8002416:	0028      	movs	r0, r5
 8002418:	f000 f8b0 	bl	800257c <__clzsi2>
 800241c:	280a      	cmp	r0, #10
 800241e:	dc1c      	bgt.n	800245a <__aeabi_f2d+0x8a>
 8002420:	230b      	movs	r3, #11
 8002422:	002a      	movs	r2, r5
 8002424:	1a1b      	subs	r3, r3, r0
 8002426:	40da      	lsrs	r2, r3
 8002428:	0003      	movs	r3, r0
 800242a:	3315      	adds	r3, #21
 800242c:	409d      	lsls	r5, r3
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <__aeabi_f2d+0x9c>)
 8002430:	0312      	lsls	r2, r2, #12
 8002432:	1a1b      	subs	r3, r3, r0
 8002434:	055b      	lsls	r3, r3, #21
 8002436:	0b16      	lsrs	r6, r2, #12
 8002438:	0d5b      	lsrs	r3, r3, #21
 800243a:	e7d8      	b.n	80023ee <__aeabi_f2d+0x1e>
 800243c:	2d00      	cmp	r5, #0
 800243e:	d006      	beq.n	800244e <__aeabi_f2d+0x7e>
 8002440:	0b32      	lsrs	r2, r6, #12
 8002442:	2680      	movs	r6, #128	; 0x80
 8002444:	0336      	lsls	r6, r6, #12
 8002446:	076d      	lsls	r5, r5, #29
 8002448:	4316      	orrs	r6, r2
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <__aeabi_f2d+0xa0>)
 800244c:	e7cf      	b.n	80023ee <__aeabi_f2d+0x1e>
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <__aeabi_f2d+0xa0>)
 8002450:	2600      	movs	r6, #0
 8002452:	e7cc      	b.n	80023ee <__aeabi_f2d+0x1e>
 8002454:	2300      	movs	r3, #0
 8002456:	2600      	movs	r6, #0
 8002458:	e7c9      	b.n	80023ee <__aeabi_f2d+0x1e>
 800245a:	0003      	movs	r3, r0
 800245c:	002a      	movs	r2, r5
 800245e:	3b0b      	subs	r3, #11
 8002460:	409a      	lsls	r2, r3
 8002462:	2500      	movs	r5, #0
 8002464:	e7e3      	b.n	800242e <__aeabi_f2d+0x5e>
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	800fffff 	.word	0x800fffff
 800246c:	00000389 	.word	0x00000389
 8002470:	000007ff 	.word	0x000007ff

08002474 <__aeabi_d2f>:
 8002474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002476:	004c      	lsls	r4, r1, #1
 8002478:	0d64      	lsrs	r4, r4, #21
 800247a:	030b      	lsls	r3, r1, #12
 800247c:	1c62      	adds	r2, r4, #1
 800247e:	0a5b      	lsrs	r3, r3, #9
 8002480:	0f46      	lsrs	r6, r0, #29
 8002482:	0552      	lsls	r2, r2, #21
 8002484:	0fc9      	lsrs	r1, r1, #31
 8002486:	431e      	orrs	r6, r3
 8002488:	00c5      	lsls	r5, r0, #3
 800248a:	0d52      	lsrs	r2, r2, #21
 800248c:	2a01      	cmp	r2, #1
 800248e:	dd29      	ble.n	80024e4 <__aeabi_d2f+0x70>
 8002490:	4b37      	ldr	r3, [pc, #220]	; (8002570 <__aeabi_d2f+0xfc>)
 8002492:	18e7      	adds	r7, r4, r3
 8002494:	2ffe      	cmp	r7, #254	; 0xfe
 8002496:	dc1c      	bgt.n	80024d2 <__aeabi_d2f+0x5e>
 8002498:	2f00      	cmp	r7, #0
 800249a:	dd3b      	ble.n	8002514 <__aeabi_d2f+0xa0>
 800249c:	0180      	lsls	r0, r0, #6
 800249e:	1e43      	subs	r3, r0, #1
 80024a0:	4198      	sbcs	r0, r3
 80024a2:	2207      	movs	r2, #7
 80024a4:	00f3      	lsls	r3, r6, #3
 80024a6:	0f6d      	lsrs	r5, r5, #29
 80024a8:	4303      	orrs	r3, r0
 80024aa:	432b      	orrs	r3, r5
 80024ac:	401a      	ands	r2, r3
 80024ae:	2a00      	cmp	r2, #0
 80024b0:	d004      	beq.n	80024bc <__aeabi_d2f+0x48>
 80024b2:	220f      	movs	r2, #15
 80024b4:	401a      	ands	r2, r3
 80024b6:	2a04      	cmp	r2, #4
 80024b8:	d000      	beq.n	80024bc <__aeabi_d2f+0x48>
 80024ba:	3304      	adds	r3, #4
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	04d2      	lsls	r2, r2, #19
 80024c0:	401a      	ands	r2, r3
 80024c2:	d024      	beq.n	800250e <__aeabi_d2f+0x9a>
 80024c4:	3701      	adds	r7, #1
 80024c6:	b2fa      	uxtb	r2, r7
 80024c8:	2fff      	cmp	r7, #255	; 0xff
 80024ca:	d002      	beq.n	80024d2 <__aeabi_d2f+0x5e>
 80024cc:	019b      	lsls	r3, r3, #6
 80024ce:	0a58      	lsrs	r0, r3, #9
 80024d0:	e001      	b.n	80024d6 <__aeabi_d2f+0x62>
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	2000      	movs	r0, #0
 80024d6:	0240      	lsls	r0, r0, #9
 80024d8:	05d2      	lsls	r2, r2, #23
 80024da:	0a40      	lsrs	r0, r0, #9
 80024dc:	07c9      	lsls	r1, r1, #31
 80024de:	4310      	orrs	r0, r2
 80024e0:	4308      	orrs	r0, r1
 80024e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e4:	4335      	orrs	r5, r6
 80024e6:	2c00      	cmp	r4, #0
 80024e8:	d104      	bne.n	80024f4 <__aeabi_d2f+0x80>
 80024ea:	2d00      	cmp	r5, #0
 80024ec:	d10a      	bne.n	8002504 <__aeabi_d2f+0x90>
 80024ee:	2200      	movs	r2, #0
 80024f0:	2000      	movs	r0, #0
 80024f2:	e7f0      	b.n	80024d6 <__aeabi_d2f+0x62>
 80024f4:	2d00      	cmp	r5, #0
 80024f6:	d0ec      	beq.n	80024d2 <__aeabi_d2f+0x5e>
 80024f8:	2080      	movs	r0, #128	; 0x80
 80024fa:	03c0      	lsls	r0, r0, #15
 80024fc:	4330      	orrs	r0, r6
 80024fe:	22ff      	movs	r2, #255	; 0xff
 8002500:	e7e9      	b.n	80024d6 <__aeabi_d2f+0x62>
 8002502:	2400      	movs	r4, #0
 8002504:	2300      	movs	r3, #0
 8002506:	025b      	lsls	r3, r3, #9
 8002508:	0a58      	lsrs	r0, r3, #9
 800250a:	b2e2      	uxtb	r2, r4
 800250c:	e7e3      	b.n	80024d6 <__aeabi_d2f+0x62>
 800250e:	08db      	lsrs	r3, r3, #3
 8002510:	003c      	movs	r4, r7
 8002512:	e7f8      	b.n	8002506 <__aeabi_d2f+0x92>
 8002514:	003b      	movs	r3, r7
 8002516:	3317      	adds	r3, #23
 8002518:	dbf3      	blt.n	8002502 <__aeabi_d2f+0x8e>
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	4333      	orrs	r3, r6
 8002520:	261e      	movs	r6, #30
 8002522:	1bf6      	subs	r6, r6, r7
 8002524:	2e1f      	cmp	r6, #31
 8002526:	dd14      	ble.n	8002552 <__aeabi_d2f+0xde>
 8002528:	2202      	movs	r2, #2
 800252a:	4252      	negs	r2, r2
 800252c:	1bd7      	subs	r7, r2, r7
 800252e:	001a      	movs	r2, r3
 8002530:	40fa      	lsrs	r2, r7
 8002532:	0017      	movs	r7, r2
 8002534:	2e20      	cmp	r6, #32
 8002536:	d004      	beq.n	8002542 <__aeabi_d2f+0xce>
 8002538:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <__aeabi_d2f+0x100>)
 800253a:	4694      	mov	ip, r2
 800253c:	4464      	add	r4, ip
 800253e:	40a3      	lsls	r3, r4
 8002540:	431d      	orrs	r5, r3
 8002542:	002b      	movs	r3, r5
 8002544:	1e5d      	subs	r5, r3, #1
 8002546:	41ab      	sbcs	r3, r5
 8002548:	2207      	movs	r2, #7
 800254a:	433b      	orrs	r3, r7
 800254c:	401a      	ands	r2, r3
 800254e:	2700      	movs	r7, #0
 8002550:	e7ad      	b.n	80024ae <__aeabi_d2f+0x3a>
 8002552:	4a09      	ldr	r2, [pc, #36]	; (8002578 <__aeabi_d2f+0x104>)
 8002554:	0028      	movs	r0, r5
 8002556:	18a2      	adds	r2, r4, r2
 8002558:	4095      	lsls	r5, r2
 800255a:	4093      	lsls	r3, r2
 800255c:	1e6c      	subs	r4, r5, #1
 800255e:	41a5      	sbcs	r5, r4
 8002560:	40f0      	lsrs	r0, r6
 8002562:	2207      	movs	r2, #7
 8002564:	432b      	orrs	r3, r5
 8002566:	4303      	orrs	r3, r0
 8002568:	401a      	ands	r2, r3
 800256a:	2700      	movs	r7, #0
 800256c:	e79f      	b.n	80024ae <__aeabi_d2f+0x3a>
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	fffffc80 	.word	0xfffffc80
 8002574:	fffffca2 	.word	0xfffffca2
 8002578:	fffffc82 	.word	0xfffffc82

0800257c <__clzsi2>:
 800257c:	211c      	movs	r1, #28
 800257e:	2301      	movs	r3, #1
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	4298      	cmp	r0, r3
 8002584:	d301      	bcc.n	800258a <__clzsi2+0xe>
 8002586:	0c00      	lsrs	r0, r0, #16
 8002588:	3910      	subs	r1, #16
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	4298      	cmp	r0, r3
 800258e:	d301      	bcc.n	8002594 <__clzsi2+0x18>
 8002590:	0a00      	lsrs	r0, r0, #8
 8002592:	3908      	subs	r1, #8
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	4298      	cmp	r0, r3
 8002598:	d301      	bcc.n	800259e <__clzsi2+0x22>
 800259a:	0900      	lsrs	r0, r0, #4
 800259c:	3904      	subs	r1, #4
 800259e:	a202      	add	r2, pc, #8	; (adr r2, 80025a8 <__clzsi2+0x2c>)
 80025a0:	5c10      	ldrb	r0, [r2, r0]
 80025a2:	1840      	adds	r0, r0, r1
 80025a4:	4770      	bx	lr
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	02020304 	.word	0x02020304
 80025ac:	01010101 	.word	0x01010101
	...

080025b8 <__clzdi2>:
 80025b8:	b510      	push	{r4, lr}
 80025ba:	2900      	cmp	r1, #0
 80025bc:	d103      	bne.n	80025c6 <__clzdi2+0xe>
 80025be:	f7ff ffdd 	bl	800257c <__clzsi2>
 80025c2:	3020      	adds	r0, #32
 80025c4:	e002      	b.n	80025cc <__clzdi2+0x14>
 80025c6:	1c08      	adds	r0, r1, #0
 80025c8:	f7ff ffd8 	bl	800257c <__clzsi2>
 80025cc:	bd10      	pop	{r4, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)

080025d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025d0:	b5b0      	push	{r4, r5, r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025d4:	f000 fc1e 	bl	8002e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025d8:	f000 f8ec 	bl	80027b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025dc:	f000 fa26 	bl	8002a2c <MX_GPIO_Init>
  MX_ADC_Init();
 80025e0:	f000 f950 	bl	8002884 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80025e4:	f000 f9f2 	bl	80029cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80025e8:	f000 f9b0 	bl	800294c <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {HAL_ADC_Start(&hadc);
 80025ec:	4b65      	ldr	r3, [pc, #404]	; (8002784 <main+0x1b4>)
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 fe16 	bl	8003220 <HAL_ADC_Start>
	//Wait for conversion complete
	if(HAL_ADC_PollForConversion(&hadc,HAL_MAX_DELAY)==HAL_OK)
 80025f4:	2301      	movs	r3, #1
 80025f6:	425a      	negs	r2, r3
 80025f8:	4b62      	ldr	r3, [pc, #392]	; (8002784 <main+0x1b4>)
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fea3 	bl	8003348 <HAL_ADC_PollForConversion>
 8002602:	1e03      	subs	r3, r0, #0
 8002604:	d000      	beq.n	8002608 <main+0x38>
 8002606:	e0b5      	b.n	8002774 <main+0x1a4>
	{
		//Get Data
// we have 10k ohm pot
		data=HAL_ADC_GetValue(&hadc);
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <main+0x1b4>)
 800260a:	0018      	movs	r0, r3
 800260c:	f000 ff32 	bl	8003474 <HAL_ADC_GetValue>
 8002610:	0002      	movs	r2, r0
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <main+0x1b8>)
 8002614:	601a      	str	r2, [r3, #0]
		resistance= 2.44140625*data;
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <main+0x1b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	0018      	movs	r0, r3
 800261c:	f7ff fea6 	bl	800236c <__aeabi_ui2d>
 8002620:	2200      	movs	r2, #0
 8002622:	4b5a      	ldr	r3, [pc, #360]	; (800278c <main+0x1bc>)
 8002624:	f7ff f85c 	bl	80016e0 <__aeabi_dmul>
 8002628:	0003      	movs	r3, r0
 800262a:	000c      	movs	r4, r1
 800262c:	0018      	movs	r0, r3
 800262e:	0021      	movs	r1, r4
 8002630:	f7ff ff20 	bl	8002474 <__aeabi_d2f>
 8002634:	1c02      	adds	r2, r0, #0
 8002636:	4b56      	ldr	r3, [pc, #344]	; (8002790 <main+0x1c0>)
 8002638:	601a      	str	r2, [r3, #0]
		sprintf(msg, "Resistance: %f\r\n", resistance);
 800263a:	4b55      	ldr	r3, [pc, #340]	; (8002790 <main+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1c18      	adds	r0, r3, #0
 8002640:	f7ff fec6 	bl	80023d0 <__aeabi_f2d>
 8002644:	0003      	movs	r3, r0
 8002646:	000c      	movs	r4, r1
 8002648:	4952      	ldr	r1, [pc, #328]	; (8002794 <main+0x1c4>)
 800264a:	4853      	ldr	r0, [pc, #332]	; (8002798 <main+0x1c8>)
 800264c:	001a      	movs	r2, r3
 800264e:	0023      	movs	r3, r4
 8002650:	f003 fe58 	bl	8006304 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8002654:	4b50      	ldr	r3, [pc, #320]	; (8002798 <main+0x1c8>)
 8002656:	0018      	movs	r0, r3
 8002658:	f7fd fd56 	bl	8000108 <strlen>
 800265c:	0003      	movs	r3, r0
 800265e:	b29a      	uxth	r2, r3
 8002660:	2301      	movs	r3, #1
 8002662:	425b      	negs	r3, r3
 8002664:	494c      	ldr	r1, [pc, #304]	; (8002798 <main+0x1c8>)
 8002666:	484d      	ldr	r0, [pc, #308]	; (800279c <main+0x1cc>)
 8002668:	f002 faf4 	bl	8004c54 <HAL_UART_Transmit>
		HAL_Delay(500);
 800266c:	23fa      	movs	r3, #250	; 0xfa
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	0018      	movs	r0, r3
 8002672:	f000 fc3f 	bl	8002ef4 <HAL_Delay>
		if (resistance<=2500){
 8002676:	4b46      	ldr	r3, [pc, #280]	; (8002790 <main+0x1c0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4949      	ldr	r1, [pc, #292]	; (80027a0 <main+0x1d0>)
 800267c:	1c18      	adds	r0, r3, #0
 800267e:	f7fd ff25 	bl	80004cc <__aeabi_fcmple>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d015      	beq.n	80026b2 <main+0xe2>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8002686:	23a0      	movs	r3, #160	; 0xa0
 8002688:	05db      	lsls	r3, r3, #23
 800268a:	2201      	movs	r2, #1
 800268c:	2120      	movs	r1, #32
 800268e:	0018      	movs	r0, r3
 8002690:	f001 faba 	bl	8003c08 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8002694:	23a0      	movs	r3, #160	; 0xa0
 8002696:	05db      	lsls	r3, r3, #23
 8002698:	2200      	movs	r2, #0
 800269a:	2140      	movs	r1, #64	; 0x40
 800269c:	0018      	movs	r0, r3
 800269e:	f001 fab3 	bl	8003c08 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80026a2:	23a0      	movs	r3, #160	; 0xa0
 80026a4:	05db      	lsls	r3, r3, #23
 80026a6:	2200      	movs	r2, #0
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	0018      	movs	r0, r3
 80026ac:	f001 faac 	bl	8003c08 <HAL_GPIO_WritePin>
 80026b0:	e060      	b.n	8002774 <main+0x1a4>
						}
						else if (resistance>=2501 && resistance<=5000){
 80026b2:	4b37      	ldr	r3, [pc, #220]	; (8002790 <main+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	493b      	ldr	r1, [pc, #236]	; (80027a4 <main+0x1d4>)
 80026b8:	1c18      	adds	r0, r3, #0
 80026ba:	f7fd ff1b 	bl	80004f4 <__aeabi_fcmpge>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d01d      	beq.n	80026fe <main+0x12e>
 80026c2:	4b33      	ldr	r3, [pc, #204]	; (8002790 <main+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4938      	ldr	r1, [pc, #224]	; (80027a8 <main+0x1d8>)
 80026c8:	1c18      	adds	r0, r3, #0
 80026ca:	f7fd feff 	bl	80004cc <__aeabi_fcmple>
 80026ce:	1e03      	subs	r3, r0, #0
 80026d0:	d015      	beq.n	80026fe <main+0x12e>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80026d2:	23a0      	movs	r3, #160	; 0xa0
 80026d4:	05db      	lsls	r3, r3, #23
 80026d6:	2200      	movs	r2, #0
 80026d8:	2120      	movs	r1, #32
 80026da:	0018      	movs	r0, r3
 80026dc:	f001 fa94 	bl	8003c08 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80026e0:	23a0      	movs	r3, #160	; 0xa0
 80026e2:	05db      	lsls	r3, r3, #23
 80026e4:	2201      	movs	r2, #1
 80026e6:	2140      	movs	r1, #64	; 0x40
 80026e8:	0018      	movs	r0, r3
 80026ea:	f001 fa8d 	bl	8003c08 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80026ee:	23a0      	movs	r3, #160	; 0xa0
 80026f0:	05db      	lsls	r3, r3, #23
 80026f2:	2200      	movs	r2, #0
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	0018      	movs	r0, r3
 80026f8:	f001 fa86 	bl	8003c08 <HAL_GPIO_WritePin>
 80026fc:	e03a      	b.n	8002774 <main+0x1a4>

						}else if (resistance>=5001 && resistance<=7500){
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <main+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	492a      	ldr	r1, [pc, #168]	; (80027ac <main+0x1dc>)
 8002704:	1c18      	adds	r0, r3, #0
 8002706:	f7fd fef5 	bl	80004f4 <__aeabi_fcmpge>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d01d      	beq.n	800274a <main+0x17a>
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <main+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4927      	ldr	r1, [pc, #156]	; (80027b0 <main+0x1e0>)
 8002714:	1c18      	adds	r0, r3, #0
 8002716:	f7fd fed9 	bl	80004cc <__aeabi_fcmple>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d015      	beq.n	800274a <main+0x17a>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800271e:	23a0      	movs	r3, #160	; 0xa0
 8002720:	05db      	lsls	r3, r3, #23
 8002722:	2200      	movs	r2, #0
 8002724:	2120      	movs	r1, #32
 8002726:	0018      	movs	r0, r3
 8002728:	f001 fa6e 	bl	8003c08 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800272c:	23a0      	movs	r3, #160	; 0xa0
 800272e:	05db      	lsls	r3, r3, #23
 8002730:	2200      	movs	r2, #0
 8002732:	2140      	movs	r1, #64	; 0x40
 8002734:	0018      	movs	r0, r3
 8002736:	f001 fa67 	bl	8003c08 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800273a:	23a0      	movs	r3, #160	; 0xa0
 800273c:	05db      	lsls	r3, r3, #23
 800273e:	2201      	movs	r2, #1
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	0018      	movs	r0, r3
 8002744:	f001 fa60 	bl	8003c08 <HAL_GPIO_WritePin>
 8002748:	e014      	b.n	8002774 <main+0x1a4>
						}else {
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800274a:	23a0      	movs	r3, #160	; 0xa0
 800274c:	05db      	lsls	r3, r3, #23
 800274e:	2201      	movs	r2, #1
 8002750:	2120      	movs	r1, #32
 8002752:	0018      	movs	r0, r3
 8002754:	f001 fa58 	bl	8003c08 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8002758:	23a0      	movs	r3, #160	; 0xa0
 800275a:	05db      	lsls	r3, r3, #23
 800275c:	2201      	movs	r2, #1
 800275e:	2140      	movs	r1, #64	; 0x40
 8002760:	0018      	movs	r0, r3
 8002762:	f001 fa51 	bl	8003c08 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8002766:	23a0      	movs	r3, #160	; 0xa0
 8002768:	05db      	lsls	r3, r3, #23
 800276a:	2201      	movs	r2, #1
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	0018      	movs	r0, r3
 8002770:	f001 fa4a 	bl	8003c08 <HAL_GPIO_WritePin>

						}

	}
	//Stop conversion
	HAL_ADC_Stop(&hadc);
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <main+0x1b4>)
 8002776:	0018      	movs	r0, r3
 8002778:	f000 fda6 	bl	80032c8 <HAL_ADC_Stop>
	HAL_Delay(10);
 800277c:	200a      	movs	r0, #10
 800277e:	f000 fbb9 	bl	8002ef4 <HAL_Delay>
  {HAL_ADC_Start(&hadc);
 8002782:	e733      	b.n	80025ec <main+0x1c>
 8002784:	2000033c 	.word	0x2000033c
 8002788:	200001f8 	.word	0x200001f8
 800278c:	40038800 	.word	0x40038800
 8002790:	200001fc 	.word	0x200001fc
 8002794:	080091c8 	.word	0x080091c8
 8002798:	20000258 	.word	0x20000258
 800279c:	200002bc 	.word	0x200002bc
 80027a0:	451c4000 	.word	0x451c4000
 80027a4:	451c5000 	.word	0x451c5000
 80027a8:	459c4000 	.word	0x459c4000
 80027ac:	459c4800 	.word	0x459c4800
 80027b0:	45ea6000 	.word	0x45ea6000

080027b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b099      	sub	sp, #100	; 0x64
 80027b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ba:	242c      	movs	r4, #44	; 0x2c
 80027bc:	193b      	adds	r3, r7, r4
 80027be:	0018      	movs	r0, r3
 80027c0:	2334      	movs	r3, #52	; 0x34
 80027c2:	001a      	movs	r2, r3
 80027c4:	2100      	movs	r1, #0
 80027c6:	f002 ff35 	bl	8005634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027ca:	2318      	movs	r3, #24
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	0018      	movs	r0, r3
 80027d0:	2314      	movs	r3, #20
 80027d2:	001a      	movs	r2, r3
 80027d4:	2100      	movs	r1, #0
 80027d6:	f002 ff2d 	bl	8005634 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027da:	003b      	movs	r3, r7
 80027dc:	0018      	movs	r0, r3
 80027de:	2318      	movs	r3, #24
 80027e0:	001a      	movs	r2, r3
 80027e2:	2100      	movs	r1, #0
 80027e4:	f002 ff26 	bl	8005634 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027e8:	4b24      	ldr	r3, [pc, #144]	; (800287c <SystemClock_Config+0xc8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a24      	ldr	r2, [pc, #144]	; (8002880 <SystemClock_Config+0xcc>)
 80027ee:	401a      	ands	r2, r3
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <SystemClock_Config+0xc8>)
 80027f2:	2180      	movs	r1, #128	; 0x80
 80027f4:	0109      	lsls	r1, r1, #4
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027fa:	193b      	adds	r3, r7, r4
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002800:	193b      	adds	r3, r7, r4
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	0252      	lsls	r2, r2, #9
 8002806:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002808:	193b      	adds	r3, r7, r4
 800280a:	2200      	movs	r2, #0
 800280c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800280e:	193b      	adds	r3, r7, r4
 8002810:	0018      	movs	r0, r3
 8002812:	f001 fb45 	bl	8003ea0 <HAL_RCC_OscConfig>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800281a:	f000 f94b 	bl	8002ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800281e:	2118      	movs	r1, #24
 8002820:	187b      	adds	r3, r7, r1
 8002822:	220f      	movs	r2, #15
 8002824:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002826:	187b      	adds	r3, r7, r1
 8002828:	2202      	movs	r2, #2
 800282a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800282c:	187b      	adds	r3, r7, r1
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002832:	187b      	adds	r3, r7, r1
 8002834:	2200      	movs	r2, #0
 8002836:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002838:	187b      	adds	r3, r7, r1
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800283e:	187b      	adds	r3, r7, r1
 8002840:	2100      	movs	r1, #0
 8002842:	0018      	movs	r0, r3
 8002844:	f001 fea6 	bl	8004594 <HAL_RCC_ClockConfig>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800284c:	f000 f932 	bl	8002ab4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002850:	003b      	movs	r3, r7
 8002852:	220a      	movs	r2, #10
 8002854:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002856:	003b      	movs	r3, r7
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800285c:	003b      	movs	r3, r7
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002862:	003b      	movs	r3, r7
 8002864:	0018      	movs	r0, r3
 8002866:	f002 f879 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d001      	beq.n	8002872 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800286e:	f000 f921 	bl	8002ab4 <Error_Handler>
  }
}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	b019      	add	sp, #100	; 0x64
 8002878:	bd90      	pop	{r4, r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	40007000 	.word	0x40007000
 8002880:	ffffe7ff 	.word	0xffffe7ff

08002884 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800288a:	003b      	movs	r3, r7
 800288c:	0018      	movs	r0, r3
 800288e:	2308      	movs	r3, #8
 8002890:	001a      	movs	r2, r3
 8002892:	2100      	movs	r1, #0
 8002894:	f002 fece 	bl	8005634 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002898:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <MX_ADC_Init+0xc0>)
 800289a:	4a2b      	ldr	r2, [pc, #172]	; (8002948 <MX_ADC_Init+0xc4>)
 800289c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <MX_ADC_Init+0xc0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <MX_ADC_Init+0xc0>)
 80028a6:	22c0      	movs	r2, #192	; 0xc0
 80028a8:	0612      	lsls	r2, r2, #24
 80028aa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <MX_ADC_Init+0xc0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <MX_ADC_Init+0xc0>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80028b8:	4b22      	ldr	r3, [pc, #136]	; (8002944 <MX_ADC_Init+0xc0>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <MX_ADC_Init+0xc0>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <MX_ADC_Init+0xc0>)
 80028c6:	2220      	movs	r2, #32
 80028c8:	2100      	movs	r1, #0
 80028ca:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <MX_ADC_Init+0xc0>)
 80028ce:	2221      	movs	r2, #33	; 0x21
 80028d0:	2100      	movs	r1, #0
 80028d2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <MX_ADC_Init+0xc0>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028da:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <MX_ADC_Init+0xc0>)
 80028dc:	22c2      	movs	r2, #194	; 0xc2
 80028de:	32ff      	adds	r2, #255	; 0xff
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <MX_ADC_Init+0xc0>)
 80028e4:	222c      	movs	r2, #44	; 0x2c
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <MX_ADC_Init+0xc0>)
 80028ec:	2204      	movs	r2, #4
 80028ee:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <MX_ADC_Init+0xc0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <MX_ADC_Init+0xc0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <MX_ADC_Init+0xc0>)
 80028fe:	2200      	movs	r2, #0
 8002900:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <MX_ADC_Init+0xc0>)
 8002904:	2200      	movs	r2, #0
 8002906:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002908:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <MX_ADC_Init+0xc0>)
 800290a:	0018      	movs	r0, r3
 800290c:	f000 fb14 	bl	8002f38 <HAL_ADC_Init>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d001      	beq.n	8002918 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002914:	f000 f8ce 	bl	8002ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002918:	003b      	movs	r3, r7
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800291e:	003b      	movs	r3, r7
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	0152      	lsls	r2, r2, #5
 8002924:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002926:	003a      	movs	r2, r7
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <MX_ADC_Init+0xc0>)
 800292a:	0011      	movs	r1, r2
 800292c:	0018      	movs	r0, r3
 800292e:	f000 fdad 	bl	800348c <HAL_ADC_ConfigChannel>
 8002932:	1e03      	subs	r3, r0, #0
 8002934:	d001      	beq.n	800293a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002936:	f000 f8bd 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	46bd      	mov	sp, r7
 800293e:	b002      	add	sp, #8
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	2000033c 	.word	0x2000033c
 8002948:	40012400 	.word	0x40012400

0800294c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <MX_I2C1_Init+0x74>)
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <MX_I2C1_Init+0x78>)
 8002954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002956:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <MX_I2C1_Init+0x74>)
 8002958:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <MX_I2C1_Init+0x7c>)
 800295a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <MX_I2C1_Init+0x74>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <MX_I2C1_Init+0x74>)
 8002964:	2201      	movs	r2, #1
 8002966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <MX_I2C1_Init+0x74>)
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <MX_I2C1_Init+0x74>)
 8002970:	2200      	movs	r2, #0
 8002972:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <MX_I2C1_Init+0x74>)
 8002976:	2200      	movs	r2, #0
 8002978:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <MX_I2C1_Init+0x74>)
 800297c:	2200      	movs	r2, #0
 800297e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <MX_I2C1_Init+0x74>)
 8002982:	2200      	movs	r2, #0
 8002984:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <MX_I2C1_Init+0x74>)
 8002988:	0018      	movs	r0, r3
 800298a:	f001 f95b 	bl	8003c44 <HAL_I2C_Init>
 800298e:	1e03      	subs	r3, r0, #0
 8002990:	d001      	beq.n	8002996 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002992:	f000 f88f 	bl	8002ab4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <MX_I2C1_Init+0x74>)
 8002998:	2100      	movs	r1, #0
 800299a:	0018      	movs	r0, r3
 800299c:	f001 f9e8 	bl	8003d70 <HAL_I2CEx_ConfigAnalogFilter>
 80029a0:	1e03      	subs	r3, r0, #0
 80029a2:	d001      	beq.n	80029a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029a4:	f000 f886 	bl	8002ab4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <MX_I2C1_Init+0x74>)
 80029aa:	2100      	movs	r1, #0
 80029ac:	0018      	movs	r0, r3
 80029ae:	f001 fa2b 	bl	8003e08 <HAL_I2CEx_ConfigDigitalFilter>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d001      	beq.n	80029ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029b6:	f000 f87d 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	2000020c 	.word	0x2000020c
 80029c4:	40005400 	.word	0x40005400
 80029c8:	2000090e 	.word	0x2000090e

080029cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <MX_USART2_UART_Init+0x58>)
 80029d2:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <MX_USART2_UART_Init+0x5c>)
 80029d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <MX_USART2_UART_Init+0x58>)
 80029d8:	22e1      	movs	r2, #225	; 0xe1
 80029da:	0252      	lsls	r2, r2, #9
 80029dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <MX_USART2_UART_Init+0x58>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <MX_USART2_UART_Init+0x58>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <MX_USART2_UART_Init+0x58>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <MX_USART2_UART_Init+0x58>)
 80029f2:	220c      	movs	r2, #12
 80029f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <MX_USART2_UART_Init+0x58>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <MX_USART2_UART_Init+0x58>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <MX_USART2_UART_Init+0x58>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <MX_USART2_UART_Init+0x58>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <MX_USART2_UART_Init+0x58>)
 8002a10:	0018      	movs	r0, r3
 8002a12:	f002 f8cb 	bl	8004bac <HAL_UART_Init>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d001      	beq.n	8002a1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a1a:	f000 f84b 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200002bc 	.word	0x200002bc
 8002a28:	40004400 	.word	0x40004400

08002a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a32:	240c      	movs	r4, #12
 8002a34:	193b      	adds	r3, r7, r4
 8002a36:	0018      	movs	r0, r3
 8002a38:	2314      	movs	r3, #20
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	f002 fdf9 	bl	8005634 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <MX_GPIO_Init+0x84>)
 8002a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <MX_GPIO_Init+0x84>)
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <MX_GPIO_Init+0x84>)
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	4013      	ands	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <MX_GPIO_Init+0x84>)
 8002a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <MX_GPIO_Init+0x84>)
 8002a60:	2101      	movs	r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <MX_GPIO_Init+0x84>)
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002a72:	23a0      	movs	r3, #160	; 0xa0
 8002a74:	05db      	lsls	r3, r3, #23
 8002a76:	2200      	movs	r2, #0
 8002a78:	21e0      	movs	r1, #224	; 0xe0
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f001 f8c4 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a80:	0021      	movs	r1, r4
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	22e0      	movs	r2, #224	; 0xe0
 8002a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9a:	187a      	adds	r2, r7, r1
 8002a9c:	23a0      	movs	r3, #160	; 0xa0
 8002a9e:	05db      	lsls	r3, r3, #23
 8002aa0:	0011      	movs	r1, r2
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 ff32 	bl	800390c <HAL_GPIO_Init>

}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b009      	add	sp, #36	; 0x24
 8002aae:	bd90      	pop	{r4, r7, pc}
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <HAL_MspInit+0x24>)
 8002ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_MspInit+0x24>)
 8002aca:	2101      	movs	r1, #1
 8002acc:	430a      	orrs	r2, r1
 8002ace:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <HAL_MspInit+0x24>)
 8002ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_MspInit+0x24>)
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	0549      	lsls	r1, r1, #21
 8002ada:	430a      	orrs	r2, r1
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	230c      	movs	r3, #12
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	0018      	movs	r0, r3
 8002af6:	2314      	movs	r3, #20
 8002af8:	001a      	movs	r2, r3
 8002afa:	2100      	movs	r1, #0
 8002afc:	f002 fd9a 	bl	8005634 <memset>
  if(hadc->Instance==ADC1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <HAL_ADC_MspInit+0x74>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d123      	bne.n	8002b52 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_ADC_MspInit+0x78>)
 8002b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <HAL_ADC_MspInit+0x78>)
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	0089      	lsls	r1, r1, #2
 8002b14:	430a      	orrs	r2, r1
 8002b16:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_ADC_MspInit+0x78>)
 8002b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1c:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <HAL_ADC_MspInit+0x78>)
 8002b1e:	2101      	movs	r1, #1
 8002b20:	430a      	orrs	r2, r1
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b24:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_ADC_MspInit+0x78>)
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b30:	210c      	movs	r1, #12
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	187a      	adds	r2, r7, r1
 8002b46:	23a0      	movs	r3, #160	; 0xa0
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	0011      	movs	r1, r2
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 fedd 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b008      	add	sp, #32
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	40012400 	.word	0x40012400
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	230c      	movs	r3, #12
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	0018      	movs	r0, r3
 8002b72:	2314      	movs	r3, #20
 8002b74:	001a      	movs	r2, r3
 8002b76:	2100      	movs	r1, #0
 8002b78:	f002 fd5c 	bl	8005634 <memset>
  if(hi2c->Instance==I2C1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <HAL_I2C_MspInit+0x80>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d12a      	bne.n	8002bdc <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <HAL_I2C_MspInit+0x84>)
 8002b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_I2C_MspInit+0x84>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <HAL_I2C_MspInit+0x84>)
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	2201      	movs	r2, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b9e:	210c      	movs	r1, #12
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	22c0      	movs	r2, #192	; 0xc0
 8002ba4:	00d2      	lsls	r2, r2, #3
 8002ba6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	2212      	movs	r2, #18
 8002bac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002bba:	187b      	adds	r3, r7, r1
 8002bbc:	2206      	movs	r2, #6
 8002bbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	187a      	adds	r2, r7, r1
 8002bc2:	23a0      	movs	r3, #160	; 0xa0
 8002bc4:	05db      	lsls	r3, r3, #23
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 fe9f 	bl	800390c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_I2C_MspInit+0x84>)
 8002bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_I2C_MspInit+0x84>)
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	0389      	lsls	r1, r1, #14
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b008      	add	sp, #32
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40005400 	.word	0x40005400
 8002be8:	40021000 	.word	0x40021000

08002bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	230c      	movs	r3, #12
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	2314      	movs	r3, #20
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	2100      	movs	r1, #0
 8002c00:	f002 fd18 	bl	8005634 <memset>
  if(huart->Instance==USART2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HAL_UART_MspInit+0x80>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d129      	bne.n	8002c62 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_UART_MspInit+0x84>)
 8002c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c12:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <HAL_UART_MspInit+0x84>)
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	0289      	lsls	r1, r1, #10
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_UART_MspInit+0x84>)
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <HAL_UART_MspInit+0x84>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	430a      	orrs	r2, r1
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_UART_MspInit+0x84>)
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c34:	210c      	movs	r1, #12
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	220c      	movs	r2, #12
 8002c3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	2202      	movs	r2, #2
 8002c40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	2204      	movs	r2, #4
 8002c52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c54:	187a      	adds	r2, r7, r1
 8002c56:	23a0      	movs	r3, #160	; 0xa0
 8002c58:	05db      	lsls	r3, r3, #23
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 fe55 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b008      	add	sp, #32
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	40004400 	.word	0x40004400
 8002c70:	40021000 	.word	0x40021000

08002c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <HardFault_Handler+0x4>

08002c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c9c:	f000 f90e 	bl	8002ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <_sbrk+0x5c>)
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <_sbrk+0x60>)
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <_sbrk+0x64>)
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <_sbrk+0x68>)
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	18d3      	adds	r3, r2, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d207      	bcs.n	8002ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cd8:	f002 fc82 	bl	80055e0 <__errno>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	220c      	movs	r2, #12
 8002ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	425b      	negs	r3, r3
 8002ce6:	e009      	b.n	8002cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <_sbrk+0x64>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <_sbrk+0x64>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	18d2      	adds	r2, r2, r3
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <_sbrk+0x64>)
 8002cf8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b006      	add	sp, #24
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20005000 	.word	0x20005000
 8002d08:	00000400 	.word	0x00000400
 8002d0c:	20000200 	.word	0x20000200
 8002d10:	200003a0 	.word	0x200003a0

08002d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <SystemInit+0x64>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <SystemInit+0x64>)
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	0049      	lsls	r1, r1, #1
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002d26:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <SystemInit+0x64>)
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <SystemInit+0x64>)
 8002d2c:	4913      	ldr	r1, [pc, #76]	; (8002d7c <SystemInit+0x68>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <SystemInit+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <SystemInit+0x64>)
 8002d38:	4911      	ldr	r1, [pc, #68]	; (8002d80 <SystemInit+0x6c>)
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <SystemInit+0x64>)
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <SystemInit+0x64>)
 8002d44:	2101      	movs	r1, #1
 8002d46:	438a      	bics	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <SystemInit+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <SystemInit+0x64>)
 8002d50:	490c      	ldr	r1, [pc, #48]	; (8002d84 <SystemInit+0x70>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <SystemInit+0x64>)
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <SystemInit+0x64>)
 8002d5c:	490a      	ldr	r1, [pc, #40]	; (8002d88 <SystemInit+0x74>)
 8002d5e:	400a      	ands	r2, r1
 8002d60:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <SystemInit+0x64>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <SystemInit+0x78>)
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	0512      	lsls	r2, r2, #20
 8002d6e:	609a      	str	r2, [r3, #8]
#endif
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	88ff400c 	.word	0x88ff400c
 8002d80:	fef6fff6 	.word	0xfef6fff6
 8002d84:	fffbffff 	.word	0xfffbffff
 8002d88:	ff02ffff 	.word	0xff02ffff
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002d90:	4813      	ldr	r0, [pc, #76]	; (8002de0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002d92:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8002d94:	4813      	ldr	r0, [pc, #76]	; (8002de4 <LoopForever+0x6>)
    LDR R1, [R0]
 8002d96:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002d98:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <LoopForever+0xa>)
    CMP R1, R2
 8002d9c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002d9e:	d105      	bne.n	8002dac <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8002da0:	4812      	ldr	r0, [pc, #72]	; (8002dec <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002da2:	4913      	ldr	r1, [pc, #76]	; (8002df0 <LoopForever+0x12>)
    STR R1, [R0]
 8002da4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002da6:	4813      	ldr	r0, [pc, #76]	; (8002df4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002da8:	4913      	ldr	r1, [pc, #76]	; (8002df8 <LoopForever+0x1a>)
    STR R1, [R0]
 8002daa:	6001      	str	r1, [r0, #0]

08002dac <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002dac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dae:	e003      	b.n	8002db8 <LoopCopyDataInit>

08002db0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 8002db2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002db4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002db6:	3104      	adds	r1, #4

08002db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002db8:	4811      	ldr	r0, [pc, #68]	; (8002e00 <LoopForever+0x22>)
  ldr  r3, =_edata
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <LoopForever+0x26>)
  adds  r2, r0, r1
 8002dbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dc0:	d3f6      	bcc.n	8002db0 <CopyDataInit>
  ldr  r2, =_sbss
 8002dc2:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <LoopForever+0x2a>)
  b  LoopFillZerobss
 8002dc4:	e002      	b.n	8002dcc <LoopFillZerobss>

08002dc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002dc6:	2300      	movs	r3, #0
  str  r3, [r2]
 8002dc8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dca:	3204      	adds	r2, #4

08002dcc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <LoopForever+0x2e>)
  cmp  r2, r3
 8002dce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dd0:	d3f9      	bcc.n	8002dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002dd2:	f7ff ff9f 	bl	8002d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dd6:	f002 fc09 	bl	80055ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dda:	f7ff fbf9 	bl	80025d0 <main>

08002dde <LoopForever>:

LoopForever:
    b LoopForever
 8002dde:	e7fe      	b.n	8002dde <LoopForever>
   ldr   r0, =_estack
 8002de0:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8002de4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002de8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002dec:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002df0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002df4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002df8:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8002dfc:	08009590 	.word	0x08009590
  ldr  r0, =_sdata
 8002e00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e04:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002e08:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002e0c:	200003a0 	.word	0x200003a0

08002e10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e10:	e7fe      	b.n	8002e10 <ADC1_IRQHandler>
	...

08002e14 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e1a:	1dfb      	adds	r3, r7, #7
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_Init+0x3c>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_Init+0x3c>)
 8002e26:	2140      	movs	r1, #64	; 0x40
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f000 f811 	bl	8002e54 <HAL_InitTick>
 8002e32:	1e03      	subs	r3, r0, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002e36:	1dfb      	adds	r3, r7, #7
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e001      	b.n	8002e42 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e3e:	f7ff fe3f 	bl	8002ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e42:	1dfb      	adds	r3, r7, #7
 8002e44:	781b      	ldrb	r3, [r3, #0]
}
 8002e46:	0018      	movs	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	40022000 	.word	0x40022000

08002e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_InitTick+0x5c>)
 8002e5e:	681c      	ldr	r4, [r3, #0]
 8002e60:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <HAL_InitTick+0x60>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	0019      	movs	r1, r3
 8002e66:	23fa      	movs	r3, #250	; 0xfa
 8002e68:	0098      	lsls	r0, r3, #2
 8002e6a:	f7fd f95f 	bl	800012c <__udivsi3>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	0019      	movs	r1, r3
 8002e72:	0020      	movs	r0, r4
 8002e74:	f7fd f95a 	bl	800012c <__udivsi3>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 fd39 	bl	80038f2 <HAL_SYSTICK_Config>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e00f      	b.n	8002ea8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d80b      	bhi.n	8002ea6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	2301      	movs	r3, #1
 8002e92:	425b      	negs	r3, r3
 8002e94:	2200      	movs	r2, #0
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 fd16 	bl	80038c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_InitTick+0x64>)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b003      	add	sp, #12
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000008 	.word	0x20000008
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_IncTick+0x1c>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_IncTick+0x20>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	18d2      	adds	r2, r2, r3
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_IncTick+0x20>)
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	20000008 	.word	0x20000008
 8002edc:	20000398 	.word	0x20000398

08002ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee4:	4b02      	ldr	r3, [pc, #8]	; (8002ef0 <HAL_GetTick+0x10>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	20000398 	.word	0x20000398

08002ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002efc:	f7ff fff0 	bl	8002ee0 <HAL_GetTick>
 8002f00:	0003      	movs	r3, r0
 8002f02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	d005      	beq.n	8002f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_Delay+0x40>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	001a      	movs	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	189b      	adds	r3, r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	f7ff ffe0 	bl	8002ee0 <HAL_GetTick>
 8002f20:	0002      	movs	r2, r0
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d8f7      	bhi.n	8002f1c <HAL_Delay+0x28>
  {
  }
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b004      	add	sp, #16
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000008 	.word	0x20000008

08002f38 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e159      	b.n	80031fe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2250      	movs	r2, #80	; 0x50
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7ff fdc0 	bl	8002ae8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d005      	beq.n	8002f80 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002f7e:	d00b      	beq.n	8002f98 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	2210      	movs	r2, #16
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2250      	movs	r2, #80	; 0x50
 8002f90:	2100      	movs	r1, #0
 8002f92:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e132      	b.n	80031fe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	4a9a      	ldr	r2, [pc, #616]	; (8003208 <HAL_ADC_Init+0x2d0>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2203      	movs	r2, #3
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d108      	bne.n	8002fc8 <HAL_ADC_Init+0x90>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_Init+0x90>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_ADC_Init+0x92>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d149      	bne.n	8003062 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	23c0      	movs	r3, #192	; 0xc0
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_ADC_Init+0xba>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	05db      	lsls	r3, r3, #23
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d005      	beq.n	8002ff2 <HAL_ADC_Init+0xba>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d111      	bne.n	8003016 <HAL_ADC_Init+0xde>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	0092      	lsls	r2, r2, #2
 8002ffe:	0892      	lsrs	r2, r2, #2
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6919      	ldr	r1, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	611a      	str	r2, [r3, #16]
 8003014:	e014      	b.n	8003040 <HAL_ADC_Init+0x108>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0092      	lsls	r2, r2, #2
 8003022:	0892      	lsrs	r2, r2, #2
 8003024:	611a      	str	r2, [r3, #16]
 8003026:	4b79      	ldr	r3, [pc, #484]	; (800320c <HAL_ADC_Init+0x2d4>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4b78      	ldr	r3, [pc, #480]	; (800320c <HAL_ADC_Init+0x2d4>)
 800302c:	4978      	ldr	r1, [pc, #480]	; (8003210 <HAL_ADC_Init+0x2d8>)
 800302e:	400a      	ands	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	4b76      	ldr	r3, [pc, #472]	; (800320c <HAL_ADC_Init+0x2d4>)
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4b74      	ldr	r3, [pc, #464]	; (800320c <HAL_ADC_Init+0x2d4>)
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2118      	movs	r1, #24
 800304c:	438a      	bics	r2, r1
 800304e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68d9      	ldr	r1, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003062:	4b6a      	ldr	r3, [pc, #424]	; (800320c <HAL_ADC_Init+0x2d4>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b69      	ldr	r3, [pc, #420]	; (800320c <HAL_ADC_Init+0x2d4>)
 8003068:	496a      	ldr	r1, [pc, #424]	; (8003214 <HAL_ADC_Init+0x2dc>)
 800306a:	400a      	ands	r2, r1
 800306c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800306e:	4b67      	ldr	r3, [pc, #412]	; (800320c <HAL_ADC_Init+0x2d4>)
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	065a      	lsls	r2, r3, #25
 8003078:	4b64      	ldr	r3, [pc, #400]	; (800320c <HAL_ADC_Init+0x2d4>)
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	055b      	lsls	r3, r3, #21
 8003088:	4013      	ands	r3, r2
 800308a:	d108      	bne.n	800309e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	0549      	lsls	r1, r1, #21
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	495b      	ldr	r1, [pc, #364]	; (8003218 <HAL_ADC_Init+0x2e0>)
 80030aa:	400a      	ands	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68d9      	ldr	r1, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_Init+0x18c>
 80030c0:	2304      	movs	r3, #4
 80030c2:	e000      	b.n	80030c6 <HAL_ADC_Init+0x18e>
 80030c4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80030c6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2020      	movs	r0, #32
 80030cc:	5c1b      	ldrb	r3, [r3, r0]
 80030ce:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80030d0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	202c      	movs	r0, #44	; 0x2c
 80030d6:	5c1b      	ldrb	r3, [r3, r0]
 80030d8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030da:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80030e0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80030e8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80030f0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030fe:	23c2      	movs	r3, #194	; 0xc2
 8003100:	33ff      	adds	r3, #255	; 0xff
 8003102:	429a      	cmp	r2, r3
 8003104:	d00b      	beq.n	800311e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68d9      	ldr	r1, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2221      	movs	r2, #33	; 0x21
 8003122:	5c9b      	ldrb	r3, [r3, r2]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d11a      	bne.n	800315e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	5c9b      	ldrb	r3, [r3, r2]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	0249      	lsls	r1, r1, #9
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]
 8003144:	e00b      	b.n	800315e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	2220      	movs	r2, #32
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	2201      	movs	r2, #1
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	2b01      	cmp	r3, #1
 8003164:	d11f      	bne.n	80031a6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	492a      	ldr	r1, [pc, #168]	; (800321c <HAL_ADC_Init+0x2e4>)
 8003172:	400a      	ands	r2, r1
 8003174:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6919      	ldr	r1, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003184:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800318a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2101      	movs	r1, #1
 80031a0:	430a      	orrs	r2, r1
 80031a2:	611a      	str	r2, [r3, #16]
 80031a4:	e00e      	b.n	80031c4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2201      	movs	r2, #1
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d107      	bne.n	80031c4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2101      	movs	r1, #1
 80031c0:	438a      	bics	r2, r1
 80031c2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2107      	movs	r1, #7
 80031d0:	438a      	bics	r2, r1
 80031d2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6959      	ldr	r1, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	2203      	movs	r2, #3
 80031f2:	4393      	bics	r3, r2
 80031f4:	2201      	movs	r2, #1
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b002      	add	sp, #8
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	fffffefd 	.word	0xfffffefd
 800320c:	40012708 	.word	0x40012708
 8003210:	ffc3ffff 	.word	0xffc3ffff
 8003214:	fdffffff 	.word	0xfdffffff
 8003218:	fffe0219 	.word	0xfffe0219
 800321c:	fffffc03 	.word	0xfffffc03

08003220 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003228:	230f      	movs	r3, #15
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2204      	movs	r2, #4
 8003238:	4013      	ands	r3, r2
 800323a:	d138      	bne.n	80032ae <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2250      	movs	r2, #80	; 0x50
 8003240:	5c9b      	ldrb	r3, [r3, r2]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_ADC_Start+0x2a>
 8003246:	2302      	movs	r3, #2
 8003248:	e038      	b.n	80032bc <HAL_ADC_Start+0x9c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2250      	movs	r2, #80	; 0x50
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d007      	beq.n	800326a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800325a:	230f      	movs	r3, #15
 800325c:	18fc      	adds	r4, r7, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f000 f97b 	bl	800355c <ADC_Enable>
 8003266:	0003      	movs	r3, r0
 8003268:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800326a:	230f      	movs	r3, #15
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d120      	bne.n	80032b6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <HAL_ADC_Start+0xa4>)
 800327a:	4013      	ands	r3, r2
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	0052      	lsls	r2, r2, #1
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2250      	movs	r2, #80	; 0x50
 8003290:	2100      	movs	r1, #0
 8003292:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	221c      	movs	r2, #28
 800329a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2104      	movs	r1, #4
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	e003      	b.n	80032b6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032ae:	230f      	movs	r3, #15
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032b6:	230f      	movs	r3, #15
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	781b      	ldrb	r3, [r3, #0]
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b005      	add	sp, #20
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	fffff0fe 	.word	0xfffff0fe

080032c8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80032c8:	b5b0      	push	{r4, r5, r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d0:	230f      	movs	r3, #15
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2250      	movs	r2, #80	; 0x50
 80032dc:	5c9b      	ldrb	r3, [r3, r2]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_Stop+0x1e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e02a      	b.n	800333c <HAL_ADC_Stop+0x74>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2250      	movs	r2, #80	; 0x50
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80032ee:	250f      	movs	r5, #15
 80032f0:	197c      	adds	r4, r7, r5
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 f9f1 	bl	80036dc <ADC_ConversionStop>
 80032fa:	0003      	movs	r3, r0
 80032fc:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032fe:	197b      	adds	r3, r7, r5
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d113      	bne.n	800332e <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003306:	250f      	movs	r5, #15
 8003308:	197c      	adds	r4, r7, r5
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0018      	movs	r0, r3
 800330e:	f000 f985 	bl	800361c <ADC_Disable>
 8003312:	0003      	movs	r3, r0
 8003314:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003316:	197b      	adds	r3, r7, r5
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d107      	bne.n	800332e <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	4a08      	ldr	r2, [pc, #32]	; (8003344 <HAL_ADC_Stop+0x7c>)
 8003324:	4013      	ands	r3, r2
 8003326:	2201      	movs	r2, #1
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2250      	movs	r2, #80	; 0x50
 8003332:	2100      	movs	r1, #0
 8003334:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003336:	230f      	movs	r3, #15
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	781b      	ldrb	r3, [r3, #0]
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b004      	add	sp, #16
 8003342:	bdb0      	pop	{r4, r5, r7, pc}
 8003344:	fffffefe 	.word	0xfffffefe

08003348 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b08      	cmp	r3, #8
 8003360:	d102      	bne.n	8003368 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003362:	2308      	movs	r3, #8
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e014      	b.n	8003392 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	4013      	ands	r3, r2
 8003372:	2b01      	cmp	r3, #1
 8003374:	d10b      	bne.n	800338e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	2220      	movs	r2, #32
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2250      	movs	r2, #80	; 0x50
 8003386:	2100      	movs	r1, #0
 8003388:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e06c      	b.n	8003468 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800338e:	230c      	movs	r3, #12
 8003390:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003392:	f7ff fda5 	bl	8002ee0 <HAL_GetTick>
 8003396:	0003      	movs	r3, r0
 8003398:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800339a:	e019      	b.n	80033d0 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	d016      	beq.n	80033d0 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <HAL_ADC_PollForConversion+0x70>
 80033a8:	f7ff fd9a 	bl	8002ee0 <HAL_GetTick>
 80033ac:	0002      	movs	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d20b      	bcs.n	80033d0 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	2204      	movs	r2, #4
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2250      	movs	r2, #80	; 0x50
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e04b      	b.n	8003468 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	d0df      	beq.n	800339c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	0092      	lsls	r2, r2, #2
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	23c0      	movs	r3, #192	; 0xc0
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	4013      	ands	r3, r2
 80033f6:	d12e      	bne.n	8003456 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d129      	bne.n	8003456 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2208      	movs	r2, #8
 800340a:	4013      	ands	r3, r2
 800340c:	2b08      	cmp	r3, #8
 800340e:	d122      	bne.n	8003456 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2204      	movs	r2, #4
 8003418:	4013      	ands	r3, r2
 800341a:	d110      	bne.n	800343e <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	210c      	movs	r1, #12
 8003428:	438a      	bics	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	4a0f      	ldr	r2, [pc, #60]	; (8003470 <HAL_ADC_PollForConversion+0x128>)
 8003432:	4013      	ands	r3, r2
 8003434:	2201      	movs	r2, #1
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	655a      	str	r2, [r3, #84]	; 0x54
 800343c:	e00b      	b.n	8003456 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	2220      	movs	r2, #32
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	2201      	movs	r2, #1
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	220c      	movs	r2, #12
 8003464:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b004      	add	sp, #16
 800346e:	bd80      	pop	{r7, pc}
 8003470:	fffffefe 	.word	0xfffffefe

08003474 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b002      	add	sp, #8
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2250      	movs	r2, #80	; 0x50
 800349a:	5c9b      	ldrb	r3, [r3, r2]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x18>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e050      	b.n	8003546 <HAL_ADC_ConfigChannel+0xba>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2250      	movs	r2, #80	; 0x50
 80034a8:	2101      	movs	r1, #1
 80034aa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2204      	movs	r2, #4
 80034b4:	4013      	ands	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	2220      	movs	r2, #32
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2250      	movs	r2, #80	; 0x50
 80034c8:	2100      	movs	r1, #0
 80034ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e03a      	b.n	8003546 <HAL_ADC_ConfigChannel+0xba>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <HAL_ADC_ConfigChannel+0xc4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	035b      	lsls	r3, r3, #13
 80034e6:	0b5a      	lsrs	r2, r3, #13
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	029b      	lsls	r3, r3, #10
 80034f8:	4013      	ands	r3, r2
 80034fa:	d01f      	beq.n	800353c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80034fc:	4b15      	ldr	r3, [pc, #84]	; (8003554 <HAL_ADC_ConfigChannel+0xc8>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b14      	ldr	r3, [pc, #80]	; (8003554 <HAL_ADC_ConfigChannel+0xc8>)
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	03c9      	lsls	r1, r1, #15
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e017      	b.n	800353c <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	035b      	lsls	r3, r3, #13
 8003518:	0b5b      	lsrs	r3, r3, #13
 800351a:	43d9      	mvns	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;   
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	029b      	lsls	r3, r3, #10
 800352c:	4013      	ands	r3, r2
 800352e:	d005      	beq.n	800353c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_ADC_ConfigChannel+0xc8>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <HAL_ADC_ConfigChannel+0xc8>)
 8003536:	4908      	ldr	r1, [pc, #32]	; (8003558 <HAL_ADC_ConfigChannel+0xcc>)
 8003538:	400a      	ands	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2250      	movs	r2, #80	; 0x50
 8003540:	2100      	movs	r1, #0
 8003542:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	0018      	movs	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	b002      	add	sp, #8
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	00001001 	.word	0x00001001
 8003554:	40012708 	.word	0x40012708
 8003558:	ffbfffff 	.word	0xffbfffff

0800355c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2203      	movs	r2, #3
 8003570:	4013      	ands	r3, r2
 8003572:	2b01      	cmp	r3, #1
 8003574:	d108      	bne.n	8003588 <ADC_Enable+0x2c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2201      	movs	r2, #1
 800357e:	4013      	ands	r3, r2
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <ADC_Enable+0x2c>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <ADC_Enable+0x2e>
 8003588:	2300      	movs	r3, #0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d13f      	bne.n	800360e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4a20      	ldr	r2, [pc, #128]	; (8003618 <ADC_Enable+0xbc>)
 8003596:	4013      	ands	r3, r2
 8003598:	d00d      	beq.n	80035b6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	2210      	movs	r2, #16
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	2201      	movs	r2, #1
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e02c      	b.n	8003610 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2101      	movs	r1, #1
 80035c2:	430a      	orrs	r2, r1
 80035c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80035c6:	2001      	movs	r0, #1
 80035c8:	f000 f8ce 	bl	8003768 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80035cc:	f7ff fc88 	bl	8002ee0 <HAL_GetTick>
 80035d0:	0003      	movs	r3, r0
 80035d2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035d4:	e014      	b.n	8003600 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035d6:	f7ff fc83 	bl	8002ee0 <HAL_GetTick>
 80035da:	0002      	movs	r2, r0
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b0a      	cmp	r3, #10
 80035e2:	d90d      	bls.n	8003600 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	2210      	movs	r2, #16
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f4:	2201      	movs	r2, #1
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e007      	b.n	8003610 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2201      	movs	r2, #1
 8003608:	4013      	ands	r3, r2
 800360a:	2b01      	cmp	r3, #1
 800360c:	d1e3      	bne.n	80035d6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b004      	add	sp, #16
 8003616:	bd80      	pop	{r7, pc}
 8003618:	80000017 	.word	0x80000017

0800361c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2203      	movs	r2, #3
 8003630:	4013      	ands	r3, r2
 8003632:	2b01      	cmp	r3, #1
 8003634:	d108      	bne.n	8003648 <ADC_Disable+0x2c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2201      	movs	r2, #1
 800363e:	4013      	ands	r3, r2
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <ADC_Disable+0x2c>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <ADC_Disable+0x2e>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d041      	beq.n	80036d2 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2205      	movs	r2, #5
 8003656:	4013      	ands	r3, r2
 8003658:	2b01      	cmp	r3, #1
 800365a:	d110      	bne.n	800367e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2102      	movs	r1, #2
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2203      	movs	r2, #3
 8003672:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003674:	f7ff fc34 	bl	8002ee0 <HAL_GetTick>
 8003678:	0003      	movs	r3, r0
 800367a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800367c:	e022      	b.n	80036c4 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	2210      	movs	r2, #16
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	2201      	movs	r2, #1
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e01c      	b.n	80036d4 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800369a:	f7ff fc21 	bl	8002ee0 <HAL_GetTick>
 800369e:	0002      	movs	r2, r0
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b0a      	cmp	r3, #10
 80036a6:	d90d      	bls.n	80036c4 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	2210      	movs	r2, #16
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	2201      	movs	r2, #1
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e007      	b.n	80036d4 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2201      	movs	r2, #1
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d0e3      	beq.n	800369a <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b004      	add	sp, #16
 80036da:	bd80      	pop	{r7, pc}

080036dc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2204      	movs	r2, #4
 80036f0:	4013      	ands	r3, r2
 80036f2:	d034      	beq.n	800375e <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2204      	movs	r2, #4
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d10d      	bne.n	800371e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2202      	movs	r2, #2
 800370a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800370c:	d107      	bne.n	800371e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2110      	movs	r1, #16
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800371e:	f7ff fbdf 	bl	8002ee0 <HAL_GetTick>
 8003722:	0003      	movs	r3, r0
 8003724:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003726:	e014      	b.n	8003752 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003728:	f7ff fbda 	bl	8002ee0 <HAL_GetTick>
 800372c:	0002      	movs	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b0a      	cmp	r3, #10
 8003734:	d90d      	bls.n	8003752 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	2210      	movs	r2, #16
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	2201      	movs	r2, #1
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e006      	b.n	8003760 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2204      	movs	r2, #4
 800375a:	4013      	ands	r3, r2
 800375c:	d1e4      	bne.n	8003728 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	b004      	add	sp, #16
 8003766:	bd80      	pop	{r7, pc}

08003768 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <ADC_DelayMicroSecond+0x34>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	490a      	ldr	r1, [pc, #40]	; (80037a0 <ADC_DelayMicroSecond+0x38>)
 8003776:	0018      	movs	r0, r3
 8003778:	f7fc fcd8 	bl	800012c <__udivsi3>
 800377c:	0003      	movs	r3, r0
 800377e:	001a      	movs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4353      	muls	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003786:	e002      	b.n	800378e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3b01      	subs	r3, #1
 800378c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f9      	bne.n	8003788 <ADC_DelayMicroSecond+0x20>
  } 
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b004      	add	sp, #16
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000000 	.word	0x20000000
 80037a0:	000f4240 	.word	0x000f4240

080037a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	0002      	movs	r2, r0
 80037ac:	6039      	str	r1, [r7, #0]
 80037ae:	1dfb      	adds	r3, r7, #7
 80037b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80037b2:	1dfb      	adds	r3, r7, #7
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b7f      	cmp	r3, #127	; 0x7f
 80037b8:	d932      	bls.n	8003820 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037ba:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <NVIC_SetPriority+0xd4>)
 80037bc:	1dfb      	adds	r3, r7, #7
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	0019      	movs	r1, r3
 80037c2:	230f      	movs	r3, #15
 80037c4:	400b      	ands	r3, r1
 80037c6:	3b08      	subs	r3, #8
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3306      	adds	r3, #6
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	18d3      	adds	r3, r2, r3
 80037d0:	3304      	adds	r3, #4
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	1dfa      	adds	r2, r7, #7
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	0011      	movs	r1, r2
 80037da:	2203      	movs	r2, #3
 80037dc:	400a      	ands	r2, r1
 80037de:	00d2      	lsls	r2, r2, #3
 80037e0:	21ff      	movs	r1, #255	; 0xff
 80037e2:	4091      	lsls	r1, r2
 80037e4:	000a      	movs	r2, r1
 80037e6:	43d2      	mvns	r2, r2
 80037e8:	401a      	ands	r2, r3
 80037ea:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	019b      	lsls	r3, r3, #6
 80037f0:	22ff      	movs	r2, #255	; 0xff
 80037f2:	401a      	ands	r2, r3
 80037f4:	1dfb      	adds	r3, r7, #7
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	0018      	movs	r0, r3
 80037fa:	2303      	movs	r3, #3
 80037fc:	4003      	ands	r3, r0
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003802:	481d      	ldr	r0, [pc, #116]	; (8003878 <NVIC_SetPriority+0xd4>)
 8003804:	1dfb      	adds	r3, r7, #7
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	001c      	movs	r4, r3
 800380a:	230f      	movs	r3, #15
 800380c:	4023      	ands	r3, r4
 800380e:	3b08      	subs	r3, #8
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	430a      	orrs	r2, r1
 8003814:	3306      	adds	r3, #6
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	18c3      	adds	r3, r0, r3
 800381a:	3304      	adds	r3, #4
 800381c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800381e:	e027      	b.n	8003870 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003820:	4a16      	ldr	r2, [pc, #88]	; (800387c <NVIC_SetPriority+0xd8>)
 8003822:	1dfb      	adds	r3, r7, #7
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b25b      	sxtb	r3, r3
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	33c0      	adds	r3, #192	; 0xc0
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	589b      	ldr	r3, [r3, r2]
 8003830:	1dfa      	adds	r2, r7, #7
 8003832:	7812      	ldrb	r2, [r2, #0]
 8003834:	0011      	movs	r1, r2
 8003836:	2203      	movs	r2, #3
 8003838:	400a      	ands	r2, r1
 800383a:	00d2      	lsls	r2, r2, #3
 800383c:	21ff      	movs	r1, #255	; 0xff
 800383e:	4091      	lsls	r1, r2
 8003840:	000a      	movs	r2, r1
 8003842:	43d2      	mvns	r2, r2
 8003844:	401a      	ands	r2, r3
 8003846:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	019b      	lsls	r3, r3, #6
 800384c:	22ff      	movs	r2, #255	; 0xff
 800384e:	401a      	ands	r2, r3
 8003850:	1dfb      	adds	r3, r7, #7
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	0018      	movs	r0, r3
 8003856:	2303      	movs	r3, #3
 8003858:	4003      	ands	r3, r0
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800385e:	4807      	ldr	r0, [pc, #28]	; (800387c <NVIC_SetPriority+0xd8>)
 8003860:	1dfb      	adds	r3, r7, #7
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b25b      	sxtb	r3, r3
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	430a      	orrs	r2, r1
 800386a:	33c0      	adds	r3, #192	; 0xc0
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	501a      	str	r2, [r3, r0]
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	b003      	add	sp, #12
 8003876:	bd90      	pop	{r4, r7, pc}
 8003878:	e000ed00 	.word	0xe000ed00
 800387c:	e000e100 	.word	0xe000e100

08003880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	4a0c      	ldr	r2, [pc, #48]	; (80038c0 <SysTick_Config+0x40>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003892:	2301      	movs	r3, #1
 8003894:	e010      	b.n	80038b8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003896:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <SysTick_Config+0x44>)
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	3a01      	subs	r2, #1
 800389c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389e:	2301      	movs	r3, #1
 80038a0:	425b      	negs	r3, r3
 80038a2:	2103      	movs	r1, #3
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7ff ff7d 	bl	80037a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <SysTick_Config+0x44>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <SysTick_Config+0x44>)
 80038b2:	2207      	movs	r2, #7
 80038b4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b002      	add	sp, #8
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	00ffffff 	.word	0x00ffffff
 80038c4:	e000e010 	.word	0xe000e010

080038c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	210f      	movs	r1, #15
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	1c02      	adds	r2, r0, #0
 80038d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b25b      	sxtb	r3, r3
 80038e2:	0011      	movs	r1, r2
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7ff ff5d 	bl	80037a4 <NVIC_SetPriority>
}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b004      	add	sp, #16
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff ffbf 	bl	8003880 <SysTick_Config>
 8003902:	0003      	movs	r3, r0
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003922:	e155      	b.n	8003bd0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2101      	movs	r1, #1
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4091      	lsls	r1, r2
 800392e:	000a      	movs	r2, r1
 8003930:	4013      	ands	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d100      	bne.n	800393c <HAL_GPIO_Init+0x30>
 800393a:	e146      	b.n	8003bca <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d00b      	beq.n	800395c <HAL_GPIO_Init+0x50>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d007      	beq.n	800395c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003950:	2b11      	cmp	r3, #17
 8003952:	d003      	beq.n	800395c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b12      	cmp	r3, #18
 800395a:	d130      	bne.n	80039be <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	2203      	movs	r2, #3
 8003968:	409a      	lsls	r2, r3
 800396a:	0013      	movs	r3, r2
 800396c:	43da      	mvns	r2, r3
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	409a      	lsls	r2, r3
 800397e:	0013      	movs	r3, r2
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003992:	2201      	movs	r2, #1
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	409a      	lsls	r2, r3
 8003998:	0013      	movs	r3, r2
 800399a:	43da      	mvns	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	2201      	movs	r2, #1
 80039aa:	401a      	ands	r2, r3
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	409a      	lsls	r2, r3
 80039b0:	0013      	movs	r3, r2
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	2203      	movs	r2, #3
 80039ca:	409a      	lsls	r2, r3
 80039cc:	0013      	movs	r3, r2
 80039ce:	43da      	mvns	r2, r3
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	409a      	lsls	r2, r3
 80039e0:	0013      	movs	r3, r2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0xf2>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b12      	cmp	r3, #18
 80039fc:	d123      	bne.n	8003a46 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	08da      	lsrs	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3208      	adds	r2, #8
 8003a06:	0092      	lsls	r2, r2, #2
 8003a08:	58d3      	ldr	r3, [r2, r3]
 8003a0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2207      	movs	r2, #7
 8003a10:	4013      	ands	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	220f      	movs	r2, #15
 8003a16:	409a      	lsls	r2, r3
 8003a18:	0013      	movs	r3, r2
 8003a1a:	43da      	mvns	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2107      	movs	r1, #7
 8003a2a:	400b      	ands	r3, r1
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	0013      	movs	r3, r2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	08da      	lsrs	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3208      	adds	r2, #8
 8003a40:	0092      	lsls	r2, r2, #2
 8003a42:	6939      	ldr	r1, [r7, #16]
 8003a44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	2203      	movs	r2, #3
 8003a52:	409a      	lsls	r2, r3
 8003a54:	0013      	movs	r3, r2
 8003a56:	43da      	mvns	r2, r3
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2203      	movs	r2, #3
 8003a64:	401a      	ands	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	0013      	movs	r3, r2
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	055b      	lsls	r3, r3, #21
 8003a82:	4013      	ands	r3, r2
 8003a84:	d100      	bne.n	8003a88 <HAL_GPIO_Init+0x17c>
 8003a86:	e0a0      	b.n	8003bca <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a88:	4b57      	ldr	r3, [pc, #348]	; (8003be8 <HAL_GPIO_Init+0x2dc>)
 8003a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a8c:	4b56      	ldr	r3, [pc, #344]	; (8003be8 <HAL_GPIO_Init+0x2dc>)
 8003a8e:	2101      	movs	r1, #1
 8003a90:	430a      	orrs	r2, r1
 8003a92:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a94:	4a55      	ldr	r2, [pc, #340]	; (8003bec <HAL_GPIO_Init+0x2e0>)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	589b      	ldr	r3, [r3, r2]
 8003aa0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	220f      	movs	r2, #15
 8003aac:	409a      	lsls	r2, r3
 8003aae:	0013      	movs	r3, r2
 8003ab0:	43da      	mvns	r2, r3
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	23a0      	movs	r3, #160	; 0xa0
 8003abc:	05db      	lsls	r3, r3, #23
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d01f      	beq.n	8003b02 <HAL_GPIO_Init+0x1f6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a4a      	ldr	r2, [pc, #296]	; (8003bf0 <HAL_GPIO_Init+0x2e4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d019      	beq.n	8003afe <HAL_GPIO_Init+0x1f2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a49      	ldr	r2, [pc, #292]	; (8003bf4 <HAL_GPIO_Init+0x2e8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_GPIO_Init+0x1ee>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a48      	ldr	r2, [pc, #288]	; (8003bf8 <HAL_GPIO_Init+0x2ec>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00d      	beq.n	8003af6 <HAL_GPIO_Init+0x1ea>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a47      	ldr	r2, [pc, #284]	; (8003bfc <HAL_GPIO_Init+0x2f0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <HAL_GPIO_Init+0x1e6>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a46      	ldr	r2, [pc, #280]	; (8003c00 <HAL_GPIO_Init+0x2f4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <HAL_GPIO_Init+0x1e2>
 8003aea:	2305      	movs	r3, #5
 8003aec:	e00a      	b.n	8003b04 <HAL_GPIO_Init+0x1f8>
 8003aee:	2306      	movs	r3, #6
 8003af0:	e008      	b.n	8003b04 <HAL_GPIO_Init+0x1f8>
 8003af2:	2304      	movs	r3, #4
 8003af4:	e006      	b.n	8003b04 <HAL_GPIO_Init+0x1f8>
 8003af6:	2303      	movs	r3, #3
 8003af8:	e004      	b.n	8003b04 <HAL_GPIO_Init+0x1f8>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e002      	b.n	8003b04 <HAL_GPIO_Init+0x1f8>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_GPIO_Init+0x1f8>
 8003b02:	2300      	movs	r3, #0
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	2103      	movs	r1, #3
 8003b08:	400a      	ands	r2, r1
 8003b0a:	0092      	lsls	r2, r2, #2
 8003b0c:	4093      	lsls	r3, r2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b14:	4935      	ldr	r1, [pc, #212]	; (8003bec <HAL_GPIO_Init+0x2e0>)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <HAL_GPIO_Init+0x2f8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	025b      	lsls	r3, r3, #9
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b46:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <HAL_GPIO_Init+0x2f8>)
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003b4c:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <HAL_GPIO_Init+0x2f8>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	43da      	mvns	r2, r3
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	029b      	lsls	r3, r3, #10
 8003b64:	4013      	ands	r3, r2
 8003b66:	d003      	beq.n	8003b70 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b70:	4b24      	ldr	r3, [pc, #144]	; (8003c04 <HAL_GPIO_Init+0x2f8>)
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b76:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <HAL_GPIO_Init+0x2f8>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	035b      	lsls	r3, r3, #13
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b9a:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <HAL_GPIO_Init+0x2f8>)
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ba0:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <HAL_GPIO_Init+0x2f8>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	039b      	lsls	r3, r3, #14
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_GPIO_Init+0x2f8>)
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	40da      	lsrs	r2, r3
 8003bd8:	1e13      	subs	r3, r2, #0
 8003bda:	d000      	beq.n	8003bde <HAL_GPIO_Init+0x2d2>
 8003bdc:	e6a2      	b.n	8003924 <HAL_GPIO_Init+0x18>
  }
}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b006      	add	sp, #24
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40010000 	.word	0x40010000
 8003bf0:	50000400 	.word	0x50000400
 8003bf4:	50000800 	.word	0x50000800
 8003bf8:	50000c00 	.word	0x50000c00
 8003bfc:	50001000 	.word	0x50001000
 8003c00:	50001c00 	.word	0x50001c00
 8003c04:	40010400 	.word	0x40010400

08003c08 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	0008      	movs	r0, r1
 8003c12:	0011      	movs	r1, r2
 8003c14:	1cbb      	adds	r3, r7, #2
 8003c16:	1c02      	adds	r2, r0, #0
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	1c7b      	adds	r3, r7, #1
 8003c1c:	1c0a      	adds	r2, r1, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c20:	1c7b      	adds	r3, r7, #1
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d004      	beq.n	8003c32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c28:	1cbb      	adds	r3, r7, #2
 8003c2a:	881a      	ldrh	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003c30:	e003      	b.n	8003c3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003c32:	1cbb      	adds	r3, r7, #2
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b002      	add	sp, #8
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e082      	b.n	8003d5c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2241      	movs	r2, #65	; 0x41
 8003c5a:	5c9b      	ldrb	r3, [r3, r2]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2240      	movs	r2, #64	; 0x40
 8003c66:	2100      	movs	r1, #0
 8003c68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f7fe ff79 	bl	8002b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2241      	movs	r2, #65	; 0x41
 8003c76:	2124      	movs	r1, #36	; 0x24
 8003c78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2101      	movs	r1, #1
 8003c86:	438a      	bics	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4934      	ldr	r1, [pc, #208]	; (8003d64 <HAL_I2C_Init+0x120>)
 8003c94:	400a      	ands	r2, r1
 8003c96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4931      	ldr	r1, [pc, #196]	; (8003d68 <HAL_I2C_Init+0x124>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d108      	bne.n	8003cc2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	0209      	lsls	r1, r1, #8
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	e007      	b.n	8003cd2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2184      	movs	r1, #132	; 0x84
 8003ccc:	0209      	lsls	r1, r1, #8
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d104      	bne.n	8003ce4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2280      	movs	r2, #128	; 0x80
 8003ce0:	0112      	lsls	r2, r2, #4
 8003ce2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	491f      	ldr	r1, [pc, #124]	; (8003d6c <HAL_I2C_Init+0x128>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	491a      	ldr	r1, [pc, #104]	; (8003d68 <HAL_I2C_Init+0x124>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	0011      	movs	r1, r2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	021a      	lsls	r2, r3, #8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69d9      	ldr	r1, [r3, #28]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1a      	ldr	r2, [r3, #32]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2101      	movs	r1, #1
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2241      	movs	r2, #65	; 0x41
 8003d48:	2120      	movs	r1, #32
 8003d4a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2242      	movs	r2, #66	; 0x42
 8003d56:	2100      	movs	r1, #0
 8003d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b002      	add	sp, #8
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	f0ffffff 	.word	0xf0ffffff
 8003d68:	ffff7fff 	.word	0xffff7fff
 8003d6c:	02008000 	.word	0x02008000

08003d70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2241      	movs	r2, #65	; 0x41
 8003d7e:	5c9b      	ldrb	r3, [r3, r2]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d138      	bne.n	8003df8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2240      	movs	r2, #64	; 0x40
 8003d8a:	5c9b      	ldrb	r3, [r3, r2]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e032      	b.n	8003dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2240      	movs	r2, #64	; 0x40
 8003d98:	2101      	movs	r1, #1
 8003d9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2241      	movs	r2, #65	; 0x41
 8003da0:	2124      	movs	r1, #36	; 0x24
 8003da2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	438a      	bics	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4911      	ldr	r1, [pc, #68]	; (8003e04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2101      	movs	r1, #1
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2241      	movs	r2, #65	; 0x41
 8003de8:	2120      	movs	r1, #32
 8003dea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2240      	movs	r2, #64	; 0x40
 8003df0:	2100      	movs	r1, #0
 8003df2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e000      	b.n	8003dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
  }
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	ffffefff 	.word	0xffffefff

08003e08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2241      	movs	r2, #65	; 0x41
 8003e16:	5c9b      	ldrb	r3, [r3, r2]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d139      	bne.n	8003e92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2240      	movs	r2, #64	; 0x40
 8003e22:	5c9b      	ldrb	r3, [r3, r2]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e033      	b.n	8003e94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2240      	movs	r2, #64	; 0x40
 8003e30:	2101      	movs	r1, #1
 8003e32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2241      	movs	r2, #65	; 0x41
 8003e38:	2124      	movs	r1, #36	; 0x24
 8003e3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2101      	movs	r1, #1
 8003e48:	438a      	bics	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2101      	movs	r1, #1
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2241      	movs	r2, #65	; 0x41
 8003e82:	2120      	movs	r1, #32
 8003e84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2240      	movs	r2, #64	; 0x40
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b004      	add	sp, #16
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	fffff0ff 	.word	0xfffff0ff

08003ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea0:	b5b0      	push	{r4, r5, r7, lr}
 8003ea2:	b08a      	sub	sp, #40	; 0x28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f000 fb6a 	bl	8004588 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb4:	4bc7      	ldr	r3, [pc, #796]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	220c      	movs	r2, #12
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ebe:	4bc5      	ldr	r3, [pc, #788]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	025b      	lsls	r3, r3, #9
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d100      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x36>
 8003ed4:	e07d      	b.n	8003fd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d007      	beq.n	8003eec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	d112      	bne.n	8003f08 <HAL_RCC_OscConfig+0x68>
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	025b      	lsls	r3, r3, #9
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d10d      	bne.n	8003f08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eec:	4bb9      	ldr	r3, [pc, #740]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	029b      	lsls	r3, r3, #10
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d100      	bne.n	8003efa <HAL_RCC_OscConfig+0x5a>
 8003ef8:	e06a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x130>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d166      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f000 fb40 	bl	8004588 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	025b      	lsls	r3, r3, #9
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d107      	bne.n	8003f24 <HAL_RCC_OscConfig+0x84>
 8003f14:	4baf      	ldr	r3, [pc, #700]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4bae      	ldr	r3, [pc, #696]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f1a:	2180      	movs	r1, #128	; 0x80
 8003f1c:	0249      	lsls	r1, r1, #9
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e027      	b.n	8003f74 <HAL_RCC_OscConfig+0xd4>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	23a0      	movs	r3, #160	; 0xa0
 8003f2a:	02db      	lsls	r3, r3, #11
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d10e      	bne.n	8003f4e <HAL_RCC_OscConfig+0xae>
 8003f30:	4ba8      	ldr	r3, [pc, #672]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4ba7      	ldr	r3, [pc, #668]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f36:	2180      	movs	r1, #128	; 0x80
 8003f38:	02c9      	lsls	r1, r1, #11
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	4ba5      	ldr	r3, [pc, #660]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4ba4      	ldr	r3, [pc, #656]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f44:	2180      	movs	r1, #128	; 0x80
 8003f46:	0249      	lsls	r1, r1, #9
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e012      	b.n	8003f74 <HAL_RCC_OscConfig+0xd4>
 8003f4e:	4ba1      	ldr	r3, [pc, #644]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4ba0      	ldr	r3, [pc, #640]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f54:	49a0      	ldr	r1, [pc, #640]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f56:	400a      	ands	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	4b9e      	ldr	r3, [pc, #632]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	025b      	lsls	r3, r3, #9
 8003f62:	4013      	ands	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4b9a      	ldr	r3, [pc, #616]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b99      	ldr	r3, [pc, #612]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f6e:	499b      	ldr	r1, [pc, #620]	; (80041dc <HAL_RCC_OscConfig+0x33c>)
 8003f70:	400a      	ands	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d014      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe ffb0 	bl	8002ee0 <HAL_GetTick>
 8003f80:	0003      	movs	r3, r0
 8003f82:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f86:	f7fe ffab 	bl	8002ee0 <HAL_GetTick>
 8003f8a:	0002      	movs	r2, r0
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b64      	cmp	r3, #100	; 0x64
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e2f7      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f98:	4b8e      	ldr	r3, [pc, #568]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	029b      	lsls	r3, r3, #10
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0xe6>
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fe ff9b 	bl	8002ee0 <HAL_GetTick>
 8003faa:	0003      	movs	r3, r0
 8003fac:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fe ff96 	bl	8002ee0 <HAL_GetTick>
 8003fb4:	0002      	movs	r2, r0
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e2e2      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fc2:	4b84      	ldr	r3, [pc, #528]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	029b      	lsls	r3, r3, #10
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x110>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d100      	bne.n	8003fde <HAL_RCC_OscConfig+0x13e>
 8003fdc:	e098      	b.n	8004110 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d009      	beq.n	8004000 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003fec:	4b79      	ldr	r3, [pc, #484]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b78      	ldr	r3, [pc, #480]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003ff2:	2120      	movs	r1, #32
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	4393      	bics	r3, r2
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b04      	cmp	r3, #4
 8004004:	d005      	beq.n	8004012 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2b0c      	cmp	r3, #12
 800400a:	d13d      	bne.n	8004088 <HAL_RCC_OscConfig+0x1e8>
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d13a      	bne.n	8004088 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004012:	4b70      	ldr	r3, [pc, #448]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2204      	movs	r2, #4
 8004018:	4013      	ands	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_RCC_OscConfig+0x186>
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e2b0      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004026:	4b6b      	ldr	r3, [pc, #428]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4a6d      	ldr	r2, [pc, #436]	; (80041e0 <HAL_RCC_OscConfig+0x340>)
 800402c:	4013      	ands	r3, r2
 800402e:	0019      	movs	r1, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	021a      	lsls	r2, r3, #8
 8004036:	4b67      	ldr	r3, [pc, #412]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8004038:	430a      	orrs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800403c:	4b65      	ldr	r3, [pc, #404]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2209      	movs	r2, #9
 8004042:	4393      	bics	r3, r2
 8004044:	0019      	movs	r1, r3
 8004046:	4b63      	ldr	r3, [pc, #396]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8004048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404e:	f000 fbcb 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8004052:	0001      	movs	r1, r0
 8004054:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	220f      	movs	r2, #15
 800405c:	4013      	ands	r3, r2
 800405e:	4a61      	ldr	r2, [pc, #388]	; (80041e4 <HAL_RCC_OscConfig+0x344>)
 8004060:	5cd3      	ldrb	r3, [r2, r3]
 8004062:	000a      	movs	r2, r1
 8004064:	40da      	lsrs	r2, r3
 8004066:	4b60      	ldr	r3, [pc, #384]	; (80041e8 <HAL_RCC_OscConfig+0x348>)
 8004068:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800406a:	2513      	movs	r5, #19
 800406c:	197c      	adds	r4, r7, r5
 800406e:	2000      	movs	r0, #0
 8004070:	f7fe fef0 	bl	8002e54 <HAL_InitTick>
 8004074:	0003      	movs	r3, r0
 8004076:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004078:	197b      	adds	r3, r7, r5
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d047      	beq.n	8004110 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8004080:	2313      	movs	r3, #19
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	e27f      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	2b00      	cmp	r3, #0
 800408c:	d027      	beq.n	80040de <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800408e:	4b51      	ldr	r3, [pc, #324]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2209      	movs	r2, #9
 8004094:	4393      	bics	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	4b4e      	ldr	r3, [pc, #312]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 800409a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409c:	430a      	orrs	r2, r1
 800409e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fe ff1e 	bl	8002ee0 <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040aa:	f7fe ff19 	bl	8002ee0 <HAL_GetTick>
 80040ae:	0002      	movs	r2, r0
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e265      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040bc:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2204      	movs	r2, #4
 80040c2:	4013      	ands	r3, r2
 80040c4:	d0f1      	beq.n	80040aa <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c6:	4b43      	ldr	r3, [pc, #268]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4a45      	ldr	r2, [pc, #276]	; (80041e0 <HAL_RCC_OscConfig+0x340>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	0019      	movs	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	021a      	lsls	r2, r3, #8
 80040d6:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	e018      	b.n	8004110 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040de:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b3c      	ldr	r3, [pc, #240]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 80040e4:	2101      	movs	r1, #1
 80040e6:	438a      	bics	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fe fef9 	bl	8002ee0 <HAL_GetTick>
 80040ee:	0003      	movs	r3, r0
 80040f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f4:	f7fe fef4 	bl	8002ee0 <HAL_GetTick>
 80040f8:	0002      	movs	r2, r0
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e240      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004106:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2204      	movs	r2, #4
 800410c:	4013      	ands	r3, r2
 800410e:	d1f1      	bne.n	80040f4 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2210      	movs	r2, #16
 8004116:	4013      	ands	r3, r2
 8004118:	d100      	bne.n	800411c <HAL_RCC_OscConfig+0x27c>
 800411a:	e09e      	b.n	800425a <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d13f      	bne.n	80041a2 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004122:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4013      	ands	r3, r2
 800412c:	d005      	beq.n	800413a <HAL_RCC_OscConfig+0x29a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e226      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800413a:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4a2b      	ldr	r2, [pc, #172]	; (80041ec <HAL_RCC_OscConfig+0x34c>)
 8004140:	4013      	ands	r3, r2
 8004142:	0019      	movs	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1a      	ldr	r2, [r3, #32]
 8004148:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800414e:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	0a19      	lsrs	r1, r3, #8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	061a      	lsls	r2, r3, #24
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	0b5b      	lsrs	r3, r3, #13
 8004168:	3301      	adds	r3, #1
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	0212      	lsls	r2, r2, #8
 800416e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004170:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	210f      	movs	r1, #15
 8004178:	400b      	ands	r3, r1
 800417a:	491a      	ldr	r1, [pc, #104]	; (80041e4 <HAL_RCC_OscConfig+0x344>)
 800417c:	5ccb      	ldrb	r3, [r1, r3]
 800417e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_RCC_OscConfig+0x348>)
 8004182:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004184:	2513      	movs	r5, #19
 8004186:	197c      	adds	r4, r7, r5
 8004188:	2000      	movs	r0, #0
 800418a:	f7fe fe63 	bl	8002e54 <HAL_InitTick>
 800418e:	0003      	movs	r3, r0
 8004190:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004192:	197b      	adds	r3, r7, r5
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d05f      	beq.n	800425a <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 800419a:	2313      	movs	r3, #19
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	e1f2      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d03d      	beq.n	8004226 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	0049      	lsls	r1, r1, #1
 80041b4:	430a      	orrs	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe fe92 	bl	8002ee0 <HAL_GetTick>
 80041bc:	0003      	movs	r3, r0
 80041be:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041c0:	e016      	b.n	80041f0 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041c2:	f7fe fe8d 	bl	8002ee0 <HAL_GetTick>
 80041c6:	0002      	movs	r2, r0
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d90f      	bls.n	80041f0 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e1d9      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
 80041d4:	40021000 	.word	0x40021000
 80041d8:	fffeffff 	.word	0xfffeffff
 80041dc:	fffbffff 	.word	0xfffbffff
 80041e0:	ffffe0ff 	.word	0xffffe0ff
 80041e4:	0800925c 	.word	0x0800925c
 80041e8:	20000000 	.word	0x20000000
 80041ec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041f0:	4bca      	ldr	r3, [pc, #808]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4013      	ands	r3, r2
 80041fa:	d0e2      	beq.n	80041c2 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041fc:	4bc7      	ldr	r3, [pc, #796]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4ac7      	ldr	r2, [pc, #796]	; (8004520 <HAL_RCC_OscConfig+0x680>)
 8004202:	4013      	ands	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1a      	ldr	r2, [r3, #32]
 800420a:	4bc4      	ldr	r3, [pc, #784]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004210:	4bc2      	ldr	r3, [pc, #776]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	0a19      	lsrs	r1, r3, #8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	061a      	lsls	r2, r3, #24
 800421e:	4bbf      	ldr	r3, [pc, #764]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
 8004224:	e019      	b.n	800425a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004226:	4bbd      	ldr	r3, [pc, #756]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4bbc      	ldr	r3, [pc, #752]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800422c:	49bd      	ldr	r1, [pc, #756]	; (8004524 <HAL_RCC_OscConfig+0x684>)
 800422e:	400a      	ands	r2, r1
 8004230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004232:	f7fe fe55 	bl	8002ee0 <HAL_GetTick>
 8004236:	0003      	movs	r3, r0
 8004238:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800423c:	f7fe fe50 	bl	8002ee0 <HAL_GetTick>
 8004240:	0002      	movs	r2, r0
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e19c      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800424e:	4bb3      	ldr	r3, [pc, #716]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4013      	ands	r3, r2
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2208      	movs	r2, #8
 8004260:	4013      	ands	r3, r2
 8004262:	d036      	beq.n	80042d2 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d019      	beq.n	80042a0 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426c:	4bab      	ldr	r3, [pc, #684]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800426e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004270:	4baa      	ldr	r3, [pc, #680]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004272:	2101      	movs	r1, #1
 8004274:	430a      	orrs	r2, r1
 8004276:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004278:	f7fe fe32 	bl	8002ee0 <HAL_GetTick>
 800427c:	0003      	movs	r3, r0
 800427e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004282:	f7fe fe2d 	bl	8002ee0 <HAL_GetTick>
 8004286:	0002      	movs	r2, r0
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e179      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004294:	4ba1      	ldr	r3, [pc, #644]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	2202      	movs	r2, #2
 800429a:	4013      	ands	r3, r2
 800429c:	d0f1      	beq.n	8004282 <HAL_RCC_OscConfig+0x3e2>
 800429e:	e018      	b.n	80042d2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a0:	4b9e      	ldr	r3, [pc, #632]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042a4:	4b9d      	ldr	r3, [pc, #628]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042a6:	2101      	movs	r1, #1
 80042a8:	438a      	bics	r2, r1
 80042aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ac:	f7fe fe18 	bl	8002ee0 <HAL_GetTick>
 80042b0:	0003      	movs	r3, r0
 80042b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042b6:	f7fe fe13 	bl	8002ee0 <HAL_GetTick>
 80042ba:	0002      	movs	r2, r0
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e15f      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042c8:	4b94      	ldr	r3, [pc, #592]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	2202      	movs	r2, #2
 80042ce:	4013      	ands	r3, r2
 80042d0:	d1f1      	bne.n	80042b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2204      	movs	r2, #4
 80042d8:	4013      	ands	r3, r2
 80042da:	d100      	bne.n	80042de <HAL_RCC_OscConfig+0x43e>
 80042dc:	e0af      	b.n	800443e <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042de:	2323      	movs	r3, #35	; 0x23
 80042e0:	18fb      	adds	r3, r7, r3
 80042e2:	2200      	movs	r2, #0
 80042e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e6:	4b8d      	ldr	r3, [pc, #564]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	055b      	lsls	r3, r3, #21
 80042ee:	4013      	ands	r3, r2
 80042f0:	d10a      	bne.n	8004308 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	4b8a      	ldr	r3, [pc, #552]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f6:	4b89      	ldr	r3, [pc, #548]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042f8:	2180      	movs	r1, #128	; 0x80
 80042fa:	0549      	lsls	r1, r1, #21
 80042fc:	430a      	orrs	r2, r1
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004300:	2323      	movs	r3, #35	; 0x23
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	2201      	movs	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004308:	4b87      	ldr	r3, [pc, #540]	; (8004528 <HAL_RCC_OscConfig+0x688>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4013      	ands	r3, r2
 8004312:	d11a      	bne.n	800434a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004314:	4b84      	ldr	r3, [pc, #528]	; (8004528 <HAL_RCC_OscConfig+0x688>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b83      	ldr	r3, [pc, #524]	; (8004528 <HAL_RCC_OscConfig+0x688>)
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	0049      	lsls	r1, r1, #1
 800431e:	430a      	orrs	r2, r1
 8004320:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004322:	f7fe fddd 	bl	8002ee0 <HAL_GetTick>
 8004326:	0003      	movs	r3, r0
 8004328:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432c:	f7fe fdd8 	bl	8002ee0 <HAL_GetTick>
 8004330:	0002      	movs	r2, r0
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	; 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e124      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433e:	4b7a      	ldr	r3, [pc, #488]	; (8004528 <HAL_RCC_OscConfig+0x688>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4013      	ands	r3, r2
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	429a      	cmp	r2, r3
 8004354:	d107      	bne.n	8004366 <HAL_RCC_OscConfig+0x4c6>
 8004356:	4b71      	ldr	r3, [pc, #452]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800435a:	4b70      	ldr	r3, [pc, #448]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800435c:	2180      	movs	r1, #128	; 0x80
 800435e:	0049      	lsls	r1, r1, #1
 8004360:	430a      	orrs	r2, r1
 8004362:	651a      	str	r2, [r3, #80]	; 0x50
 8004364:	e031      	b.n	80043ca <HAL_RCC_OscConfig+0x52a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0x4e8>
 800436e:	4b6b      	ldr	r3, [pc, #428]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004370:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004372:	4b6a      	ldr	r3, [pc, #424]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004374:	496b      	ldr	r1, [pc, #428]	; (8004524 <HAL_RCC_OscConfig+0x684>)
 8004376:	400a      	ands	r2, r1
 8004378:	651a      	str	r2, [r3, #80]	; 0x50
 800437a:	4b68      	ldr	r3, [pc, #416]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800437c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800437e:	4b67      	ldr	r3, [pc, #412]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004380:	496a      	ldr	r1, [pc, #424]	; (800452c <HAL_RCC_OscConfig+0x68c>)
 8004382:	400a      	ands	r2, r1
 8004384:	651a      	str	r2, [r3, #80]	; 0x50
 8004386:	e020      	b.n	80043ca <HAL_RCC_OscConfig+0x52a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	23a0      	movs	r3, #160	; 0xa0
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	429a      	cmp	r2, r3
 8004392:	d10e      	bne.n	80043b2 <HAL_RCC_OscConfig+0x512>
 8004394:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004396:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004398:	4b60      	ldr	r3, [pc, #384]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800439a:	2180      	movs	r1, #128	; 0x80
 800439c:	00c9      	lsls	r1, r1, #3
 800439e:	430a      	orrs	r2, r1
 80043a0:	651a      	str	r2, [r3, #80]	; 0x50
 80043a2:	4b5e      	ldr	r3, [pc, #376]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80043a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043a6:	4b5d      	ldr	r3, [pc, #372]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	0049      	lsls	r1, r1, #1
 80043ac:	430a      	orrs	r2, r1
 80043ae:	651a      	str	r2, [r3, #80]	; 0x50
 80043b0:	e00b      	b.n	80043ca <HAL_RCC_OscConfig+0x52a>
 80043b2:	4b5a      	ldr	r3, [pc, #360]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80043b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043b6:	4b59      	ldr	r3, [pc, #356]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80043b8:	495a      	ldr	r1, [pc, #360]	; (8004524 <HAL_RCC_OscConfig+0x684>)
 80043ba:	400a      	ands	r2, r1
 80043bc:	651a      	str	r2, [r3, #80]	; 0x50
 80043be:	4b57      	ldr	r3, [pc, #348]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80043c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043c2:	4b56      	ldr	r3, [pc, #344]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80043c4:	4959      	ldr	r1, [pc, #356]	; (800452c <HAL_RCC_OscConfig+0x68c>)
 80043c6:	400a      	ands	r2, r1
 80043c8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d015      	beq.n	80043fe <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d2:	f7fe fd85 	bl	8002ee0 <HAL_GetTick>
 80043d6:	0003      	movs	r3, r0
 80043d8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043da:	e009      	b.n	80043f0 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043dc:	f7fe fd80 	bl	8002ee0 <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	4a52      	ldr	r2, [pc, #328]	; (8004530 <HAL_RCC_OscConfig+0x690>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e0cb      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043f0:	4b4a      	ldr	r3, [pc, #296]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80043f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4013      	ands	r3, r2
 80043fa:	d0ef      	beq.n	80043dc <HAL_RCC_OscConfig+0x53c>
 80043fc:	e014      	b.n	8004428 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7fe fd6f 	bl	8002ee0 <HAL_GetTick>
 8004402:	0003      	movs	r3, r0
 8004404:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004406:	e009      	b.n	800441c <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004408:	f7fe fd6a 	bl	8002ee0 <HAL_GetTick>
 800440c:	0002      	movs	r2, r0
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	4a47      	ldr	r2, [pc, #284]	; (8004530 <HAL_RCC_OscConfig+0x690>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e0b5      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800441c:	4b3f      	ldr	r3, [pc, #252]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800441e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4013      	ands	r3, r2
 8004426:	d1ef      	bne.n	8004408 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004428:	2323      	movs	r3, #35	; 0x23
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004432:	4b3a      	ldr	r3, [pc, #232]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004436:	4b39      	ldr	r3, [pc, #228]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004438:	493e      	ldr	r1, [pc, #248]	; (8004534 <HAL_RCC_OscConfig+0x694>)
 800443a:	400a      	ands	r2, r1
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d100      	bne.n	8004448 <HAL_RCC_OscConfig+0x5a8>
 8004446:	e09e      	b.n	8004586 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d100      	bne.n	8004450 <HAL_RCC_OscConfig+0x5b0>
 800444e:	e077      	b.n	8004540 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	2b02      	cmp	r3, #2
 8004456:	d145      	bne.n	80044e4 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004458:	4b30      	ldr	r3, [pc, #192]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b2f      	ldr	r3, [pc, #188]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800445e:	4936      	ldr	r1, [pc, #216]	; (8004538 <HAL_RCC_OscConfig+0x698>)
 8004460:	400a      	ands	r2, r1
 8004462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fe fd3c 	bl	8002ee0 <HAL_GetTick>
 8004468:	0003      	movs	r3, r0
 800446a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446e:	f7fe fd37 	bl	8002ee0 <HAL_GetTick>
 8004472:	0002      	movs	r2, r0
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e083      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004480:	4b26      	ldr	r3, [pc, #152]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	049b      	lsls	r3, r3, #18
 8004488:	4013      	ands	r3, r2
 800448a:	d1f0      	bne.n	800446e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800448c:	4b23      	ldr	r3, [pc, #140]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4a2a      	ldr	r2, [pc, #168]	; (800453c <HAL_RCC_OscConfig+0x69c>)
 8004492:	4013      	ands	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	431a      	orrs	r2, r3
 80044a6:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044a8:	430a      	orrs	r2, r1
 80044aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	0449      	lsls	r1, r1, #17
 80044b6:	430a      	orrs	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fe fd11 	bl	8002ee0 <HAL_GetTick>
 80044be:	0003      	movs	r3, r0
 80044c0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c4:	f7fe fd0c 	bl	8002ee0 <HAL_GetTick>
 80044c8:	0002      	movs	r2, r0
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e058      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	049b      	lsls	r3, r3, #18
 80044de:	4013      	ands	r3, r2
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x624>
 80044e2:	e050      	b.n	8004586 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e4:	4b0d      	ldr	r3, [pc, #52]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044ea:	4913      	ldr	r1, [pc, #76]	; (8004538 <HAL_RCC_OscConfig+0x698>)
 80044ec:	400a      	ands	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7fe fcf6 	bl	8002ee0 <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fa:	f7fe fcf1 	bl	8002ee0 <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e03d      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	049b      	lsls	r3, r3, #18
 8004514:	4013      	ands	r3, r2
 8004516:	d1f0      	bne.n	80044fa <HAL_RCC_OscConfig+0x65a>
 8004518:	e035      	b.n	8004586 <HAL_RCC_OscConfig+0x6e6>
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	40021000 	.word	0x40021000
 8004520:	ffff1fff 	.word	0xffff1fff
 8004524:	fffffeff 	.word	0xfffffeff
 8004528:	40007000 	.word	0x40007000
 800452c:	fffffbff 	.word	0xfffffbff
 8004530:	00001388 	.word	0x00001388
 8004534:	efffffff 	.word	0xefffffff
 8004538:	feffffff 	.word	0xfeffffff
 800453c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e01d      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_RCC_OscConfig+0x6f0>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	025b      	lsls	r3, r3, #9
 8004558:	401a      	ands	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	429a      	cmp	r2, r3
 8004560:	d10f      	bne.n	8004582 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	23f0      	movs	r3, #240	; 0xf0
 8004566:	039b      	lsls	r3, r3, #14
 8004568:	401a      	ands	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d107      	bne.n	8004582 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	23c0      	movs	r3, #192	; 0xc0
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	401a      	ands	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800457e:	429a      	cmp	r2, r3
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b00a      	add	sp, #40	; 0x28
 800458e:	bdb0      	pop	{r4, r5, r7, pc}
 8004590:	40021000 	.word	0x40021000

08004594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004594:	b5b0      	push	{r4, r5, r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e10d      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a8:	4b88      	ldr	r3, [pc, #544]	; (80047cc <HAL_RCC_ClockConfig+0x238>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2201      	movs	r2, #1
 80045ae:	4013      	ands	r3, r2
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d911      	bls.n	80045da <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b6:	4b85      	ldr	r3, [pc, #532]	; (80047cc <HAL_RCC_ClockConfig+0x238>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2201      	movs	r2, #1
 80045bc:	4393      	bics	r3, r2
 80045be:	0019      	movs	r1, r3
 80045c0:	4b82      	ldr	r3, [pc, #520]	; (80047cc <HAL_RCC_ClockConfig+0x238>)
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c8:	4b80      	ldr	r3, [pc, #512]	; (80047cc <HAL_RCC_ClockConfig+0x238>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2201      	movs	r2, #1
 80045ce:	4013      	ands	r3, r2
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d001      	beq.n	80045da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0f4      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2202      	movs	r2, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e4:	4b7a      	ldr	r3, [pc, #488]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	22f0      	movs	r2, #240	; 0xf0
 80045ea:	4393      	bics	r3, r2
 80045ec:	0019      	movs	r1, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	4b77      	ldr	r3, [pc, #476]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 80045f4:	430a      	orrs	r2, r1
 80045f6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2201      	movs	r2, #1
 80045fe:	4013      	ands	r3, r2
 8004600:	d100      	bne.n	8004604 <HAL_RCC_ClockConfig+0x70>
 8004602:	e089      	b.n	8004718 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d107      	bne.n	800461c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800460c:	4b70      	ldr	r3, [pc, #448]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	029b      	lsls	r3, r3, #10
 8004614:	4013      	ands	r3, r2
 8004616:	d120      	bne.n	800465a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0d3      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d107      	bne.n	8004634 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	049b      	lsls	r3, r3, #18
 800462c:	4013      	ands	r3, r2
 800462e:	d114      	bne.n	800465a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0c7      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d106      	bne.n	800464a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800463c:	4b64      	ldr	r3, [pc, #400]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2204      	movs	r2, #4
 8004642:	4013      	ands	r3, r2
 8004644:	d109      	bne.n	800465a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0bc      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800464a:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4013      	ands	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e0b4      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465a:	4b5d      	ldr	r3, [pc, #372]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2203      	movs	r2, #3
 8004660:	4393      	bics	r3, r2
 8004662:	0019      	movs	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	4b59      	ldr	r3, [pc, #356]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 800466a:	430a      	orrs	r2, r1
 800466c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800466e:	f7fe fc37 	bl	8002ee0 <HAL_GetTick>
 8004672:	0003      	movs	r3, r0
 8004674:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d111      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800467e:	e009      	b.n	8004694 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004680:	f7fe fc2e 	bl	8002ee0 <HAL_GetTick>
 8004684:	0002      	movs	r2, r0
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e097      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004694:	4b4e      	ldr	r3, [pc, #312]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	220c      	movs	r2, #12
 800469a:	4013      	ands	r3, r2
 800469c:	2b08      	cmp	r3, #8
 800469e:	d1ef      	bne.n	8004680 <HAL_RCC_ClockConfig+0xec>
 80046a0:	e03a      	b.n	8004718 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d111      	bne.n	80046ce <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046aa:	e009      	b.n	80046c0 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ac:	f7fe fc18 	bl	8002ee0 <HAL_GetTick>
 80046b0:	0002      	movs	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	4a47      	ldr	r2, [pc, #284]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e081      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046c0:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	220c      	movs	r2, #12
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b0c      	cmp	r3, #12
 80046ca:	d1ef      	bne.n	80046ac <HAL_RCC_ClockConfig+0x118>
 80046cc:	e024      	b.n	8004718 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d11b      	bne.n	800470e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046d6:	e009      	b.n	80046ec <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d8:	f7fe fc02 	bl	8002ee0 <HAL_GetTick>
 80046dc:	0002      	movs	r2, r0
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	4a3c      	ldr	r2, [pc, #240]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e06b      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ec:	4b38      	ldr	r3, [pc, #224]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	220c      	movs	r2, #12
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d1ef      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x144>
 80046f8:	e00e      	b.n	8004718 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fa:	f7fe fbf1 	bl	8002ee0 <HAL_GetTick>
 80046fe:	0002      	movs	r2, r0
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	4a33      	ldr	r2, [pc, #204]	; (80047d4 <HAL_RCC_ClockConfig+0x240>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e05a      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800470e:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	220c      	movs	r2, #12
 8004714:	4013      	ands	r3, r2
 8004716:	d1f0      	bne.n	80046fa <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004718:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <HAL_RCC_ClockConfig+0x238>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2201      	movs	r2, #1
 800471e:	4013      	ands	r3, r2
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d211      	bcs.n	800474a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b29      	ldr	r3, [pc, #164]	; (80047cc <HAL_RCC_ClockConfig+0x238>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2201      	movs	r2, #1
 800472c:	4393      	bics	r3, r2
 800472e:	0019      	movs	r1, r3
 8004730:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_RCC_ClockConfig+0x238>)
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004738:	4b24      	ldr	r3, [pc, #144]	; (80047cc <HAL_RCC_ClockConfig+0x238>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	4013      	ands	r3, r2
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d001      	beq.n	800474a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e03c      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2204      	movs	r2, #4
 8004750:	4013      	ands	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004754:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4a1f      	ldr	r2, [pc, #124]	; (80047d8 <HAL_RCC_ClockConfig+0x244>)
 800475a:	4013      	ands	r3, r2
 800475c:	0019      	movs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 8004764:	430a      	orrs	r2, r1
 8004766:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2208      	movs	r2, #8
 800476e:	4013      	ands	r3, r2
 8004770:	d00a      	beq.n	8004788 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4a19      	ldr	r2, [pc, #100]	; (80047dc <HAL_RCC_ClockConfig+0x248>)
 8004778:	4013      	ands	r3, r2
 800477a:	0019      	movs	r1, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	00da      	lsls	r2, r3, #3
 8004782:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 8004784:	430a      	orrs	r2, r1
 8004786:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004788:	f000 f82e 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 800478c:	0001      	movs	r1, r0
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_RCC_ClockConfig+0x23c>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	220f      	movs	r2, #15
 8004796:	4013      	ands	r3, r2
 8004798:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <HAL_RCC_ClockConfig+0x24c>)
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	000a      	movs	r2, r1
 800479e:	40da      	lsrs	r2, r3
 80047a0:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_RCC_ClockConfig+0x250>)
 80047a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80047a4:	250b      	movs	r5, #11
 80047a6:	197c      	adds	r4, r7, r5
 80047a8:	2000      	movs	r0, #0
 80047aa:	f7fe fb53 	bl	8002e54 <HAL_InitTick>
 80047ae:	0003      	movs	r3, r0
 80047b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80047b2:	197b      	adds	r3, r7, r5
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80047ba:	230b      	movs	r3, #11
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	e000      	b.n	80047c4 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b004      	add	sp, #16
 80047ca:	bdb0      	pop	{r4, r5, r7, pc}
 80047cc:	40022000 	.word	0x40022000
 80047d0:	40021000 	.word	0x40021000
 80047d4:	00001388 	.word	0x00001388
 80047d8:	fffff8ff 	.word	0xfffff8ff
 80047dc:	ffffc7ff 	.word	0xffffc7ff
 80047e0:	0800925c 	.word	0x0800925c
 80047e4:	20000000 	.word	0x20000000

080047e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80047ee:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <HAL_RCC_GetSysClockFreq+0xf4>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	220c      	movs	r2, #12
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d00e      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x34>
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d00f      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0x3a>
 8004802:	2b04      	cmp	r3, #4
 8004804:	d157      	bne.n	80048b6 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004806:	4b35      	ldr	r3, [pc, #212]	; (80048dc <HAL_RCC_GetSysClockFreq+0xf4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2210      	movs	r2, #16
 800480c:	4013      	ands	r3, r2
 800480e:	d002      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004810:	4b33      	ldr	r3, [pc, #204]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004812:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004814:	e05d      	b.n	80048d2 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8004816:	4b33      	ldr	r3, [pc, #204]	; (80048e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004818:	613b      	str	r3, [r7, #16]
      break;
 800481a:	e05a      	b.n	80048d2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800481c:	4b32      	ldr	r3, [pc, #200]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x100>)
 800481e:	613b      	str	r3, [r7, #16]
      break;
 8004820:	e057      	b.n	80048d2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	0c9b      	lsrs	r3, r3, #18
 8004826:	220f      	movs	r2, #15
 8004828:	4013      	ands	r3, r2
 800482a:	4a30      	ldr	r2, [pc, #192]	; (80048ec <HAL_RCC_GetSysClockFreq+0x104>)
 800482c:	5cd3      	ldrb	r3, [r2, r3]
 800482e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	0d9b      	lsrs	r3, r3, #22
 8004834:	2203      	movs	r2, #3
 8004836:	4013      	ands	r3, r2
 8004838:	3301      	adds	r3, #1
 800483a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <HAL_RCC_GetSysClockFreq+0xf4>)
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	025b      	lsls	r3, r3, #9
 8004844:	4013      	ands	r3, r2
 8004846:	d00f      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	000a      	movs	r2, r1
 800484c:	0152      	lsls	r2, r2, #5
 800484e:	1a52      	subs	r2, r2, r1
 8004850:	0193      	lsls	r3, r2, #6
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	185b      	adds	r3, r3, r1
 8004858:	025b      	lsls	r3, r3, #9
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	0018      	movs	r0, r3
 800485e:	f7fb fc65 	bl	800012c <__udivsi3>
 8004862:	0003      	movs	r3, r0
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e023      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004868:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <HAL_RCC_GetSysClockFreq+0xf4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2210      	movs	r2, #16
 800486e:	4013      	ands	r3, r2
 8004870:	d00f      	beq.n	8004892 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	000a      	movs	r2, r1
 8004876:	0152      	lsls	r2, r2, #5
 8004878:	1a52      	subs	r2, r2, r1
 800487a:	0193      	lsls	r3, r2, #6
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	185b      	adds	r3, r3, r1
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	0018      	movs	r0, r3
 8004888:	f7fb fc50 	bl	800012c <__udivsi3>
 800488c:	0003      	movs	r3, r0
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e00e      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	000a      	movs	r2, r1
 8004896:	0152      	lsls	r2, r2, #5
 8004898:	1a52      	subs	r2, r2, r1
 800489a:	0193      	lsls	r3, r2, #6
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	185b      	adds	r3, r3, r1
 80048a2:	029b      	lsls	r3, r3, #10
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	0018      	movs	r0, r3
 80048a8:	f7fb fc40 	bl	800012c <__udivsi3>
 80048ac:	0003      	movs	r3, r0
 80048ae:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	613b      	str	r3, [r7, #16]
      break;
 80048b4:	e00d      	b.n	80048d2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_GetSysClockFreq+0xf4>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	0b5b      	lsrs	r3, r3, #13
 80048bc:	2207      	movs	r2, #7
 80048be:	4013      	ands	r3, r2
 80048c0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	2280      	movs	r2, #128	; 0x80
 80048c8:	0212      	lsls	r2, r2, #8
 80048ca:	409a      	lsls	r2, r3
 80048cc:	0013      	movs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
      break;
 80048d0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80048d2:	693b      	ldr	r3, [r7, #16]
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b006      	add	sp, #24
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	003d0900 	.word	0x003d0900
 80048e4:	00f42400 	.word	0x00f42400
 80048e8:	007a1200 	.word	0x007a1200
 80048ec:	08009274 	.word	0x08009274

080048f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f4:	4b02      	ldr	r3, [pc, #8]	; (8004900 <HAL_RCC_GetHCLKFreq+0x10>)
 80048f6:	681b      	ldr	r3, [r3, #0]
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	20000000 	.word	0x20000000

08004904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004908:	f7ff fff2 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 800490c:	0001      	movs	r1, r0
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	0a1b      	lsrs	r3, r3, #8
 8004914:	2207      	movs	r2, #7
 8004916:	4013      	ands	r3, r2
 8004918:	4a04      	ldr	r2, [pc, #16]	; (800492c <HAL_RCC_GetPCLK1Freq+0x28>)
 800491a:	5cd3      	ldrb	r3, [r2, r3]
 800491c:	40d9      	lsrs	r1, r3
 800491e:	000b      	movs	r3, r1
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	40021000 	.word	0x40021000
 800492c:	0800926c 	.word	0x0800926c

08004930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004934:	f7ff ffdc 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004938:	0001      	movs	r1, r0
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	0adb      	lsrs	r3, r3, #11
 8004940:	2207      	movs	r2, #7
 8004942:	4013      	ands	r3, r2
 8004944:	4a04      	ldr	r2, [pc, #16]	; (8004958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	40d9      	lsrs	r1, r3
 800494a:	000b      	movs	r3, r1
}
 800494c:	0018      	movs	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	40021000 	.word	0x40021000
 8004958:	0800926c 	.word	0x0800926c

0800495c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2220      	movs	r2, #32
 800496a:	4013      	ands	r3, r2
 800496c:	d100      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x14>
 800496e:	e0c7      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004970:	2317      	movs	r3, #23
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004978:	4b82      	ldr	r3, [pc, #520]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800497a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	055b      	lsls	r3, r3, #21
 8004980:	4013      	ands	r3, r2
 8004982:	d10a      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004984:	4b7f      	ldr	r3, [pc, #508]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004988:	4b7e      	ldr	r3, [pc, #504]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	0549      	lsls	r1, r1, #21
 800498e:	430a      	orrs	r2, r1
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004992:	2317      	movs	r3, #23
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	2201      	movs	r2, #1
 8004998:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499a:	4b7b      	ldr	r3, [pc, #492]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4013      	ands	r3, r2
 80049a4:	d11a      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a6:	4b78      	ldr	r3, [pc, #480]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b77      	ldr	r3, [pc, #476]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80049ac:	2180      	movs	r1, #128	; 0x80
 80049ae:	0049      	lsls	r1, r1, #1
 80049b0:	430a      	orrs	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b4:	f7fe fa94 	bl	8002ee0 <HAL_GetTick>
 80049b8:	0003      	movs	r3, r0
 80049ba:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	e008      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049be:	f7fe fa8f 	bl	8002ee0 <HAL_GetTick>
 80049c2:	0002      	movs	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b64      	cmp	r3, #100	; 0x64
 80049ca:	d901      	bls.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0d4      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	4b6d      	ldr	r3, [pc, #436]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4013      	ands	r3, r2
 80049da:	d0f0      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80049dc:	4b69      	ldr	r3, [pc, #420]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	23c0      	movs	r3, #192	; 0xc0
 80049e2:	039b      	lsls	r3, r3, #14
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	23c0      	movs	r3, #192	; 0xc0
 80049ee:	039b      	lsls	r3, r3, #14
 80049f0:	4013      	ands	r3, r2
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d013      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	23c0      	movs	r3, #192	; 0xc0
 80049fe:	029b      	lsls	r3, r3, #10
 8004a00:	401a      	ands	r2, r3
 8004a02:	23c0      	movs	r3, #192	; 0xc0
 8004a04:	029b      	lsls	r3, r3, #10
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d10a      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a0a:	4b5e      	ldr	r3, [pc, #376]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	029b      	lsls	r3, r3, #10
 8004a12:	401a      	ands	r2, r3
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	029b      	lsls	r3, r3, #10
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0ac      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004a20:	4b58      	ldr	r3, [pc, #352]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a24:	23c0      	movs	r3, #192	; 0xc0
 8004a26:	029b      	lsls	r3, r3, #10
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d03b      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	23c0      	movs	r3, #192	; 0xc0
 8004a38:	029b      	lsls	r3, r3, #10
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d033      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2220      	movs	r2, #32
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d02e      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a4c:	4b4d      	ldr	r3, [pc, #308]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	4a4e      	ldr	r2, [pc, #312]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a56:	4b4b      	ldr	r3, [pc, #300]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a5a:	4b4a      	ldr	r3, [pc, #296]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004a5c:	2180      	movs	r1, #128	; 0x80
 8004a5e:	0309      	lsls	r1, r1, #12
 8004a60:	430a      	orrs	r2, r1
 8004a62:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a64:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004a66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a68:	4b46      	ldr	r3, [pc, #280]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004a6a:	4949      	ldr	r1, [pc, #292]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004a6c:	400a      	ands	r2, r1
 8004a6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004a70:	4b44      	ldr	r3, [pc, #272]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d014      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fe fa2e 	bl	8002ee0 <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a88:	e009      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7fe fa29 	bl	8002ee0 <HAL_GetTick>
 8004a8e:	0002      	movs	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	4a3f      	ldr	r2, [pc, #252]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e06d      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a9e:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004aa2:	2380      	movs	r3, #128	; 0x80
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d0ef      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	23c0      	movs	r3, #192	; 0xc0
 8004ab0:	029b      	lsls	r3, r3, #10
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	23c0      	movs	r3, #192	; 0xc0
 8004ab6:	029b      	lsls	r3, r3, #10
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d10c      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004abc:	4b31      	ldr	r3, [pc, #196]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a35      	ldr	r2, [pc, #212]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	23c0      	movs	r3, #192	; 0xc0
 8004acc:	039b      	lsls	r3, r3, #14
 8004ace:	401a      	ands	r2, r3
 8004ad0:	4b2c      	ldr	r3, [pc, #176]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004ad8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	23c0      	movs	r3, #192	; 0xc0
 8004ae0:	029b      	lsls	r3, r3, #10
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004aea:	2317      	movs	r3, #23
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d105      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af4:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af8:	4b22      	ldr	r3, [pc, #136]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004afa:	4928      	ldr	r1, [pc, #160]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004afc:	400a      	ands	r2, r1
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2202      	movs	r2, #2
 8004b06:	4013      	ands	r3, r2
 8004b08:	d009      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	220c      	movs	r2, #12
 8004b10:	4393      	bics	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	4b1a      	ldr	r3, [pc, #104]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2204      	movs	r2, #4
 8004b24:	4013      	ands	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b28:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2c:	4a1c      	ldr	r2, [pc, #112]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	0019      	movs	r1, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	4b13      	ldr	r3, [pc, #76]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2208      	movs	r2, #8
 8004b42:	4013      	ands	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004b56:	430a      	orrs	r2, r1
 8004b58:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2280      	movs	r2, #128	; 0x80
 8004b60:	4013      	ands	r3, r2
 8004b62:	d009      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004b64:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b68:	4a0f      	ldr	r2, [pc, #60]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004b74:	430a      	orrs	r2, r1
 8004b76:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	b006      	add	sp, #24
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	40021000 	.word	0x40021000
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	fffcffff 	.word	0xfffcffff
 8004b90:	fff7ffff 	.word	0xfff7ffff
 8004b94:	00001388 	.word	0x00001388
 8004b98:	ffcfffff 	.word	0xffcfffff
 8004b9c:	efffffff 	.word	0xefffffff
 8004ba0:	fffff3ff 	.word	0xfffff3ff
 8004ba4:	ffffcfff 	.word	0xffffcfff
 8004ba8:	fff3ffff 	.word	0xfff3ffff

08004bac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e044      	b.n	8004c48 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d107      	bne.n	8004bd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2270      	movs	r2, #112	; 0x70
 8004bca:	2100      	movs	r1, #0
 8004bcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f7fe f80b 	bl	8002bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2224      	movs	r2, #36	; 0x24
 8004bda:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2101      	movs	r1, #1
 8004be8:	438a      	bics	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f000 f8d8 	bl	8004da4 <UART_SetConfig>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e024      	b.n	8004c48 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f000 fba5 	bl	8005358 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	490d      	ldr	r1, [pc, #52]	; (8004c50 <HAL_UART_Init+0xa4>)
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	212a      	movs	r1, #42	; 0x2a
 8004c2a:	438a      	bics	r2, r1
 8004c2c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2101      	movs	r1, #1
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 fc3d 	bl	80054c0 <UART_CheckIdleState>
 8004c46:	0003      	movs	r3, r0
}
 8004c48:	0018      	movs	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b002      	add	sp, #8
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	ffffb7ff 	.word	0xffffb7ff

08004c54 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	; 0x28
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	1dbb      	adds	r3, r7, #6
 8004c62:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d000      	beq.n	8004c6e <HAL_UART_Transmit+0x1a>
 8004c6c:	e094      	b.n	8004d98 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_UART_Transmit+0x28>
 8004c74:	1dbb      	adds	r3, r7, #6
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e08c      	b.n	8004d9a <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	015b      	lsls	r3, r3, #5
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d109      	bne.n	8004ca0 <HAL_UART_Transmit+0x4c>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2201      	movs	r2, #1
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d001      	beq.n	8004ca0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e07c      	b.n	8004d9a <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2270      	movs	r2, #112	; 0x70
 8004ca4:	5c9b      	ldrb	r3, [r3, r2]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_UART_Transmit+0x5a>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e075      	b.n	8004d9a <HAL_UART_Transmit+0x146>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2270      	movs	r2, #112	; 0x70
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2221      	movs	r2, #33	; 0x21
 8004cc0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004cc2:	f7fe f90d 	bl	8002ee0 <HAL_GetTick>
 8004cc6:	0003      	movs	r3, r0
 8004cc8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1dba      	adds	r2, r7, #6
 8004cce:	2150      	movs	r1, #80	; 0x50
 8004cd0:	8812      	ldrh	r2, [r2, #0]
 8004cd2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1dba      	adds	r2, r7, #6
 8004cd8:	2152      	movs	r1, #82	; 0x52
 8004cda:	8812      	ldrh	r2, [r2, #0]
 8004cdc:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	015b      	lsls	r3, r3, #5
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d108      	bne.n	8004cfc <HAL_UART_Transmit+0xa8>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	e003      	b.n	8004d04 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d04:	e02c      	b.n	8004d60 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	0013      	movs	r3, r2
 8004d10:	2200      	movs	r2, #0
 8004d12:	2180      	movs	r1, #128	; 0x80
 8004d14:	f000 fc1a 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 8004d18:	1e03      	subs	r3, r0, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e03c      	b.n	8004d9a <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	001a      	movs	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	05d2      	lsls	r2, r2, #23
 8004d32:	0dd2      	lsrs	r2, r2, #23
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	3302      	adds	r3, #2
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	e007      	b.n	8004d4e <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	781a      	ldrb	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2252      	movs	r2, #82	; 0x52
 8004d52:	5a9b      	ldrh	r3, [r3, r2]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b299      	uxth	r1, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2252      	movs	r2, #82	; 0x52
 8004d5e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2252      	movs	r2, #82	; 0x52
 8004d64:	5a9b      	ldrh	r3, [r3, r2]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1cc      	bne.n	8004d06 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	0013      	movs	r3, r2
 8004d76:	2200      	movs	r2, #0
 8004d78:	2140      	movs	r1, #64	; 0x40
 8004d7a:	f000 fbe7 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 8004d7e:	1e03      	subs	r3, r0, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e009      	b.n	8004d9a <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2270      	movs	r2, #112	; 0x70
 8004d90:	2100      	movs	r1, #0
 8004d92:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e000      	b.n	8004d9a <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
  }
}
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b008      	add	sp, #32
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da4:	b5b0      	push	{r4, r5, r7, lr}
 8004da6:	b08e      	sub	sp, #56	; 0x38
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004dac:	231b      	movs	r3, #27
 8004dae:	2218      	movs	r2, #24
 8004db0:	4694      	mov	ip, r2
 8004db2:	44bc      	add	ip, r7
 8004db4:	4463      	add	r3, ip
 8004db6:	2210      	movs	r2, #16
 8004db8:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dbe:	2313      	movs	r3, #19
 8004dc0:	2218      	movs	r2, #24
 8004dc2:	4694      	mov	ip, r2
 8004dc4:	44bc      	add	ip, r7
 8004dc6:	4463      	add	r3, ip
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4ace      	ldr	r2, [pc, #824]	; (8005128 <UART_SetConfig+0x384>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4ac9      	ldr	r2, [pc, #804]	; (800512c <UART_SetConfig+0x388>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	0019      	movs	r1, r3
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4ac3      	ldr	r2, [pc, #780]	; (8005130 <UART_SetConfig+0x38c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	4abf      	ldr	r2, [pc, #764]	; (8005134 <UART_SetConfig+0x390>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	0019      	movs	r1, r3
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e42:	430a      	orrs	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4abb      	ldr	r2, [pc, #748]	; (8005138 <UART_SetConfig+0x394>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d137      	bne.n	8004ec0 <UART_SetConfig+0x11c>
 8004e50:	4bba      	ldr	r3, [pc, #744]	; (800513c <UART_SetConfig+0x398>)
 8004e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e54:	220c      	movs	r2, #12
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d018      	beq.n	8004e8e <UART_SetConfig+0xea>
 8004e5c:	d802      	bhi.n	8004e64 <UART_SetConfig+0xc0>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <UART_SetConfig+0xca>
 8004e62:	e024      	b.n	8004eae <UART_SetConfig+0x10a>
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d00a      	beq.n	8004e7e <UART_SetConfig+0xda>
 8004e68:	2b0c      	cmp	r3, #12
 8004e6a:	d018      	beq.n	8004e9e <UART_SetConfig+0xfa>
 8004e6c:	e01f      	b.n	8004eae <UART_SetConfig+0x10a>
 8004e6e:	231b      	movs	r3, #27
 8004e70:	2218      	movs	r2, #24
 8004e72:	4694      	mov	ip, r2
 8004e74:	44bc      	add	ip, r7
 8004e76:	4463      	add	r3, ip
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	e06e      	b.n	8004f5c <UART_SetConfig+0x1b8>
 8004e7e:	231b      	movs	r3, #27
 8004e80:	2218      	movs	r2, #24
 8004e82:	4694      	mov	ip, r2
 8004e84:	44bc      	add	ip, r7
 8004e86:	4463      	add	r3, ip
 8004e88:	2202      	movs	r2, #2
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	e066      	b.n	8004f5c <UART_SetConfig+0x1b8>
 8004e8e:	231b      	movs	r3, #27
 8004e90:	2218      	movs	r2, #24
 8004e92:	4694      	mov	ip, r2
 8004e94:	44bc      	add	ip, r7
 8004e96:	4463      	add	r3, ip
 8004e98:	2204      	movs	r2, #4
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	e05e      	b.n	8004f5c <UART_SetConfig+0x1b8>
 8004e9e:	231b      	movs	r3, #27
 8004ea0:	2218      	movs	r2, #24
 8004ea2:	4694      	mov	ip, r2
 8004ea4:	44bc      	add	ip, r7
 8004ea6:	4463      	add	r3, ip
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	e056      	b.n	8004f5c <UART_SetConfig+0x1b8>
 8004eae:	231b      	movs	r3, #27
 8004eb0:	2218      	movs	r2, #24
 8004eb2:	4694      	mov	ip, r2
 8004eb4:	44bc      	add	ip, r7
 8004eb6:	4463      	add	r3, ip
 8004eb8:	2210      	movs	r2, #16
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	e04d      	b.n	8004f5c <UART_SetConfig+0x1b8>
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a9a      	ldr	r2, [pc, #616]	; (8005130 <UART_SetConfig+0x38c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d141      	bne.n	8004f4e <UART_SetConfig+0x1aa>
 8004eca:	4b9c      	ldr	r3, [pc, #624]	; (800513c <UART_SetConfig+0x398>)
 8004ecc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ece:	23c0      	movs	r3, #192	; 0xc0
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2280      	movs	r2, #128	; 0x80
 8004ed6:	00d2      	lsls	r2, r2, #3
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d01f      	beq.n	8004f1c <UART_SetConfig+0x178>
 8004edc:	2280      	movs	r2, #128	; 0x80
 8004ede:	00d2      	lsls	r2, r2, #3
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d802      	bhi.n	8004eea <UART_SetConfig+0x146>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d009      	beq.n	8004efc <UART_SetConfig+0x158>
 8004ee8:	e028      	b.n	8004f3c <UART_SetConfig+0x198>
 8004eea:	2280      	movs	r2, #128	; 0x80
 8004eec:	0112      	lsls	r2, r2, #4
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00c      	beq.n	8004f0c <UART_SetConfig+0x168>
 8004ef2:	22c0      	movs	r2, #192	; 0xc0
 8004ef4:	0112      	lsls	r2, r2, #4
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d018      	beq.n	8004f2c <UART_SetConfig+0x188>
 8004efa:	e01f      	b.n	8004f3c <UART_SetConfig+0x198>
 8004efc:	231b      	movs	r3, #27
 8004efe:	2218      	movs	r2, #24
 8004f00:	4694      	mov	ip, r2
 8004f02:	44bc      	add	ip, r7
 8004f04:	4463      	add	r3, ip
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e027      	b.n	8004f5c <UART_SetConfig+0x1b8>
 8004f0c:	231b      	movs	r3, #27
 8004f0e:	2218      	movs	r2, #24
 8004f10:	4694      	mov	ip, r2
 8004f12:	44bc      	add	ip, r7
 8004f14:	4463      	add	r3, ip
 8004f16:	2202      	movs	r2, #2
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	e01f      	b.n	8004f5c <UART_SetConfig+0x1b8>
 8004f1c:	231b      	movs	r3, #27
 8004f1e:	2218      	movs	r2, #24
 8004f20:	4694      	mov	ip, r2
 8004f22:	44bc      	add	ip, r7
 8004f24:	4463      	add	r3, ip
 8004f26:	2204      	movs	r2, #4
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	e017      	b.n	8004f5c <UART_SetConfig+0x1b8>
 8004f2c:	231b      	movs	r3, #27
 8004f2e:	2218      	movs	r2, #24
 8004f30:	4694      	mov	ip, r2
 8004f32:	44bc      	add	ip, r7
 8004f34:	4463      	add	r3, ip
 8004f36:	2208      	movs	r2, #8
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	e00f      	b.n	8004f5c <UART_SetConfig+0x1b8>
 8004f3c:	231b      	movs	r3, #27
 8004f3e:	2218      	movs	r2, #24
 8004f40:	4694      	mov	ip, r2
 8004f42:	44bc      	add	ip, r7
 8004f44:	4463      	add	r3, ip
 8004f46:	2210      	movs	r2, #16
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	e006      	b.n	8004f5c <UART_SetConfig+0x1b8>
 8004f4e:	231b      	movs	r3, #27
 8004f50:	2218      	movs	r2, #24
 8004f52:	4694      	mov	ip, r2
 8004f54:	44bc      	add	ip, r7
 8004f56:	4463      	add	r3, ip
 8004f58:	2210      	movs	r2, #16
 8004f5a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a73      	ldr	r2, [pc, #460]	; (8005130 <UART_SetConfig+0x38c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d000      	beq.n	8004f68 <UART_SetConfig+0x1c4>
 8004f66:	e083      	b.n	8005070 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f68:	231b      	movs	r3, #27
 8004f6a:	2218      	movs	r2, #24
 8004f6c:	4694      	mov	ip, r2
 8004f6e:	44bc      	add	ip, r7
 8004f70:	4463      	add	r3, ip
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d00d      	beq.n	8004f94 <UART_SetConfig+0x1f0>
 8004f78:	dc02      	bgt.n	8004f80 <UART_SetConfig+0x1dc>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <UART_SetConfig+0x1e6>
 8004f7e:	e01d      	b.n	8004fbc <UART_SetConfig+0x218>
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d012      	beq.n	8004faa <UART_SetConfig+0x206>
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d015      	beq.n	8004fb4 <UART_SetConfig+0x210>
 8004f88:	e018      	b.n	8004fbc <UART_SetConfig+0x218>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004f8a:	f7ff fcbb 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f92:	e01b      	b.n	8004fcc <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f94:	4b69      	ldr	r3, [pc, #420]	; (800513c <UART_SetConfig+0x398>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2210      	movs	r2, #16
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d002      	beq.n	8004fa4 <UART_SetConfig+0x200>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004f9e:	4b68      	ldr	r3, [pc, #416]	; (8005140 <UART_SetConfig+0x39c>)
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8004fa2:	e013      	b.n	8004fcc <UART_SetConfig+0x228>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004fa4:	4b67      	ldr	r3, [pc, #412]	; (8005144 <UART_SetConfig+0x3a0>)
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fa8:	e010      	b.n	8004fcc <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004faa:	f7ff fc1d 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fb2:	e00b      	b.n	8004fcc <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fba:	e007      	b.n	8004fcc <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004fbc:	2313      	movs	r3, #19
 8004fbe:	2218      	movs	r2, #24
 8004fc0:	4694      	mov	ip, r2
 8004fc2:	44bc      	add	ip, r7
 8004fc4:	4463      	add	r3, ip
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
        break;
 8004fca:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d100      	bne.n	8004fd4 <UART_SetConfig+0x230>
 8004fd2:	e1a7      	b.n	8005324 <UART_SetConfig+0x580>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	0013      	movs	r3, r2
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	189b      	adds	r3, r3, r2
 8004fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d305      	bcc.n	8004ff0 <UART_SetConfig+0x24c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d907      	bls.n	8005000 <UART_SetConfig+0x25c>
      {
        ret = HAL_ERROR;
 8004ff0:	2313      	movs	r3, #19
 8004ff2:	2218      	movs	r2, #24
 8004ff4:	4694      	mov	ip, r2
 8004ff6:	44bc      	add	ip, r7
 8004ff8:	4463      	add	r3, ip
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	e191      	b.n	8005324 <UART_SetConfig+0x580>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	6939      	ldr	r1, [r7, #16]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	000b      	movs	r3, r1
 800500e:	0e1b      	lsrs	r3, r3, #24
 8005010:	0010      	movs	r0, r2
 8005012:	0205      	lsls	r5, r0, #8
 8005014:	431d      	orrs	r5, r3
 8005016:	000b      	movs	r3, r1
 8005018:	021c      	lsls	r4, r3, #8
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	68b8      	ldr	r0, [r7, #8]
 8005028:	68f9      	ldr	r1, [r7, #12]
 800502a:	1900      	adds	r0, r0, r4
 800502c:	4169      	adcs	r1, r5
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	2300      	movs	r3, #0
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f7fb fa64 	bl	8000508 <__aeabi_uldivmod>
 8005040:	0003      	movs	r3, r0
 8005042:	000c      	movs	r4, r1
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	4a3f      	ldr	r2, [pc, #252]	; (8005148 <UART_SetConfig+0x3a4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d908      	bls.n	8005060 <UART_SetConfig+0x2bc>
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	4a3e      	ldr	r2, [pc, #248]	; (800514c <UART_SetConfig+0x3a8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d804      	bhi.n	8005060 <UART_SetConfig+0x2bc>
        {
          huart->Instance->BRR = usartdiv;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800505c:	60da      	str	r2, [r3, #12]
 800505e:	e161      	b.n	8005324 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8005060:	2313      	movs	r3, #19
 8005062:	2218      	movs	r2, #24
 8005064:	4694      	mov	ip, r2
 8005066:	44bc      	add	ip, r7
 8005068:	4463      	add	r3, ip
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	e159      	b.n	8005324 <UART_SetConfig+0x580>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	429a      	cmp	r2, r3
 800507a:	d000      	beq.n	800507e <UART_SetConfig+0x2da>
 800507c:	e0c4      	b.n	8005208 <UART_SetConfig+0x464>
  {
    switch (clocksource)
 800507e:	231b      	movs	r3, #27
 8005080:	2218      	movs	r2, #24
 8005082:	4694      	mov	ip, r2
 8005084:	44bc      	add	ip, r7
 8005086:	4463      	add	r3, ip
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b08      	cmp	r3, #8
 800508c:	d900      	bls.n	8005090 <UART_SetConfig+0x2ec>
 800508e:	e087      	b.n	80051a0 <UART_SetConfig+0x3fc>
 8005090:	009a      	lsls	r2, r3, #2
 8005092:	4b2f      	ldr	r3, [pc, #188]	; (8005150 <UART_SetConfig+0x3ac>)
 8005094:	18d3      	adds	r3, r2, r3
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800509a:	f7ff fc33 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 800509e:	0003      	movs	r3, r0
 80050a0:	005a      	lsls	r2, r3, #1
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	085b      	lsrs	r3, r3, #1
 80050a8:	18d2      	adds	r2, r2, r3
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	0019      	movs	r1, r3
 80050b0:	0010      	movs	r0, r2
 80050b2:	f7fb f83b 	bl	800012c <__udivsi3>
 80050b6:	0003      	movs	r3, r0
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050bc:	e078      	b.n	80051b0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80050be:	f7ff fc37 	bl	8004930 <HAL_RCC_GetPCLK2Freq>
 80050c2:	0003      	movs	r3, r0
 80050c4:	005a      	lsls	r2, r3, #1
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	18d2      	adds	r2, r2, r3
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	0019      	movs	r1, r3
 80050d4:	0010      	movs	r0, r2
 80050d6:	f7fb f829 	bl	800012c <__udivsi3>
 80050da:	0003      	movs	r3, r0
 80050dc:	b29b      	uxth	r3, r3
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050e0:	e066      	b.n	80051b0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e2:	4b16      	ldr	r3, [pc, #88]	; (800513c <UART_SetConfig+0x398>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2210      	movs	r2, #16
 80050e8:	4013      	ands	r3, r2
 80050ea:	d00e      	beq.n	800510a <UART_SetConfig+0x366>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	085b      	lsrs	r3, r3, #1
 80050f2:	4a18      	ldr	r2, [pc, #96]	; (8005154 <UART_SetConfig+0x3b0>)
 80050f4:	189a      	adds	r2, r3, r2
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	0019      	movs	r1, r3
 80050fc:	0010      	movs	r0, r2
 80050fe:	f7fb f815 	bl	800012c <__udivsi3>
 8005102:	0003      	movs	r3, r0
 8005104:	b29b      	uxth	r3, r3
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8005108:	e052      	b.n	80051b0 <UART_SetConfig+0x40c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	4a11      	ldr	r2, [pc, #68]	; (8005158 <UART_SetConfig+0x3b4>)
 8005112:	189a      	adds	r2, r3, r2
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	0019      	movs	r1, r3
 800511a:	0010      	movs	r0, r2
 800511c:	f7fb f806 	bl	800012c <__udivsi3>
 8005120:	0003      	movs	r3, r0
 8005122:	b29b      	uxth	r3, r3
 8005124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005126:	e043      	b.n	80051b0 <UART_SetConfig+0x40c>
 8005128:	efff69f3 	.word	0xefff69f3
 800512c:	ffffcfff 	.word	0xffffcfff
 8005130:	40004800 	.word	0x40004800
 8005134:	fffff4ff 	.word	0xfffff4ff
 8005138:	40004400 	.word	0x40004400
 800513c:	40021000 	.word	0x40021000
 8005140:	003d0900 	.word	0x003d0900
 8005144:	00f42400 	.word	0x00f42400
 8005148:	000002ff 	.word	0x000002ff
 800514c:	000fffff 	.word	0x000fffff
 8005150:	08009280 	.word	0x08009280
 8005154:	007a1200 	.word	0x007a1200
 8005158:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800515c:	f7ff fb44 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8005160:	0003      	movs	r3, r0
 8005162:	005a      	lsls	r2, r3, #1
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	18d2      	adds	r2, r2, r3
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	0019      	movs	r1, r3
 8005172:	0010      	movs	r0, r2
 8005174:	f7fa ffda 	bl	800012c <__udivsi3>
 8005178:	0003      	movs	r3, r0
 800517a:	b29b      	uxth	r3, r3
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800517e:	e017      	b.n	80051b0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	2280      	movs	r2, #128	; 0x80
 8005188:	0252      	lsls	r2, r2, #9
 800518a:	189a      	adds	r2, r3, r2
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	0019      	movs	r1, r3
 8005192:	0010      	movs	r0, r2
 8005194:	f7fa ffca 	bl	800012c <__udivsi3>
 8005198:	0003      	movs	r3, r0
 800519a:	b29b      	uxth	r3, r3
 800519c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800519e:	e007      	b.n	80051b0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80051a0:	2313      	movs	r3, #19
 80051a2:	2218      	movs	r2, #24
 80051a4:	4694      	mov	ip, r2
 80051a6:	44bc      	add	ip, r7
 80051a8:	4463      	add	r3, ip
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
        break;
 80051ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	2b0f      	cmp	r3, #15
 80051b4:	d920      	bls.n	80051f8 <UART_SetConfig+0x454>
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	4a62      	ldr	r2, [pc, #392]	; (8005344 <UART_SetConfig+0x5a0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d81c      	bhi.n	80051f8 <UART_SetConfig+0x454>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	200a      	movs	r0, #10
 80051c4:	2418      	movs	r4, #24
 80051c6:	193b      	adds	r3, r7, r4
 80051c8:	181b      	adds	r3, r3, r0
 80051ca:	210f      	movs	r1, #15
 80051cc:	438a      	bics	r2, r1
 80051ce:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2207      	movs	r2, #7
 80051d8:	4013      	ands	r3, r2
 80051da:	b299      	uxth	r1, r3
 80051dc:	193b      	adds	r3, r7, r4
 80051de:	181b      	adds	r3, r3, r0
 80051e0:	193a      	adds	r2, r7, r4
 80051e2:	1812      	adds	r2, r2, r0
 80051e4:	8812      	ldrh	r2, [r2, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	193a      	adds	r2, r7, r4
 80051f0:	1812      	adds	r2, r2, r0
 80051f2:	8812      	ldrh	r2, [r2, #0]
 80051f4:	60da      	str	r2, [r3, #12]
 80051f6:	e095      	b.n	8005324 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 80051f8:	2313      	movs	r3, #19
 80051fa:	2218      	movs	r2, #24
 80051fc:	4694      	mov	ip, r2
 80051fe:	44bc      	add	ip, r7
 8005200:	4463      	add	r3, ip
 8005202:	2201      	movs	r2, #1
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	e08d      	b.n	8005324 <UART_SetConfig+0x580>
    }
  }
  else
  {
    switch (clocksource)
 8005208:	231b      	movs	r3, #27
 800520a:	2218      	movs	r2, #24
 800520c:	4694      	mov	ip, r2
 800520e:	44bc      	add	ip, r7
 8005210:	4463      	add	r3, ip
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d86a      	bhi.n	80052ee <UART_SetConfig+0x54a>
 8005218:	009a      	lsls	r2, r3, #2
 800521a:	4b4b      	ldr	r3, [pc, #300]	; (8005348 <UART_SetConfig+0x5a4>)
 800521c:	18d3      	adds	r3, r2, r3
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005222:	f7ff fb6f 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8005226:	0002      	movs	r2, r0
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	18d2      	adds	r2, r2, r3
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	0019      	movs	r1, r3
 8005236:	0010      	movs	r0, r2
 8005238:	f7fa ff78 	bl	800012c <__udivsi3>
 800523c:	0003      	movs	r3, r0
 800523e:	b29b      	uxth	r3, r3
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005242:	e05c      	b.n	80052fe <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005244:	f7ff fb74 	bl	8004930 <HAL_RCC_GetPCLK2Freq>
 8005248:	0002      	movs	r2, r0
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	18d2      	adds	r2, r2, r3
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	0019      	movs	r1, r3
 8005258:	0010      	movs	r0, r2
 800525a:	f7fa ff67 	bl	800012c <__udivsi3>
 800525e:	0003      	movs	r3, r0
 8005260:	b29b      	uxth	r3, r3
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005264:	e04b      	b.n	80052fe <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005266:	4b39      	ldr	r3, [pc, #228]	; (800534c <UART_SetConfig+0x5a8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2210      	movs	r2, #16
 800526c:	4013      	ands	r3, r2
 800526e:	d00e      	beq.n	800528e <UART_SetConfig+0x4ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	4a36      	ldr	r2, [pc, #216]	; (8005350 <UART_SetConfig+0x5ac>)
 8005278:	189a      	adds	r2, r3, r2
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	0019      	movs	r1, r3
 8005280:	0010      	movs	r0, r2
 8005282:	f7fa ff53 	bl	800012c <__udivsi3>
 8005286:	0003      	movs	r3, r0
 8005288:	b29b      	uxth	r3, r3
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800528c:	e037      	b.n	80052fe <UART_SetConfig+0x55a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	4a2f      	ldr	r2, [pc, #188]	; (8005354 <UART_SetConfig+0x5b0>)
 8005296:	189a      	adds	r2, r3, r2
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	0019      	movs	r1, r3
 800529e:	0010      	movs	r0, r2
 80052a0:	f7fa ff44 	bl	800012c <__udivsi3>
 80052a4:	0003      	movs	r3, r0
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052aa:	e028      	b.n	80052fe <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80052ac:	f7ff fa9c 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 80052b0:	0002      	movs	r2, r0
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	085b      	lsrs	r3, r3, #1
 80052b8:	18d2      	adds	r2, r2, r3
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	0019      	movs	r1, r3
 80052c0:	0010      	movs	r0, r2
 80052c2:	f7fa ff33 	bl	800012c <__udivsi3>
 80052c6:	0003      	movs	r3, r0
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052cc:	e017      	b.n	80052fe <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	2280      	movs	r2, #128	; 0x80
 80052d6:	0212      	lsls	r2, r2, #8
 80052d8:	189a      	adds	r2, r3, r2
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	0019      	movs	r1, r3
 80052e0:	0010      	movs	r0, r2
 80052e2:	f7fa ff23 	bl	800012c <__udivsi3>
 80052e6:	0003      	movs	r3, r0
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ec:	e007      	b.n	80052fe <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80052ee:	2313      	movs	r3, #19
 80052f0:	2218      	movs	r2, #24
 80052f2:	4694      	mov	ip, r2
 80052f4:	44bc      	add	ip, r7
 80052f6:	4463      	add	r3, ip
 80052f8:	2201      	movs	r2, #1
 80052fa:	701a      	strb	r2, [r3, #0]
        break;
 80052fc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	2b0f      	cmp	r3, #15
 8005302:	d908      	bls.n	8005316 <UART_SetConfig+0x572>
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	4a0f      	ldr	r2, [pc, #60]	; (8005344 <UART_SetConfig+0x5a0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d804      	bhi.n	8005316 <UART_SetConfig+0x572>
    {
      huart->Instance->BRR = usartdiv;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005312:	60da      	str	r2, [r3, #12]
 8005314:	e006      	b.n	8005324 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8005316:	2313      	movs	r3, #19
 8005318:	2218      	movs	r2, #24
 800531a:	4694      	mov	ip, r2
 800531c:	44bc      	add	ip, r7
 800531e:	4463      	add	r3, ip
 8005320:	2201      	movs	r2, #1
 8005322:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2200      	movs	r2, #0
 8005328:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2200      	movs	r2, #0
 800532e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005330:	2313      	movs	r3, #19
 8005332:	2218      	movs	r2, #24
 8005334:	4694      	mov	ip, r2
 8005336:	44bc      	add	ip, r7
 8005338:	4463      	add	r3, ip
 800533a:	781b      	ldrb	r3, [r3, #0]
}
 800533c:	0018      	movs	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	b00e      	add	sp, #56	; 0x38
 8005342:	bdb0      	pop	{r4, r5, r7, pc}
 8005344:	0000ffff 	.word	0x0000ffff
 8005348:	080092a4 	.word	0x080092a4
 800534c:	40021000 	.word	0x40021000
 8005350:	003d0900 	.word	0x003d0900
 8005354:	00f42400 	.word	0x00f42400

08005358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	2201      	movs	r2, #1
 8005366:	4013      	ands	r3, r2
 8005368:	d00b      	beq.n	8005382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4a4a      	ldr	r2, [pc, #296]	; (800549c <UART_AdvFeatureConfig+0x144>)
 8005372:	4013      	ands	r3, r2
 8005374:	0019      	movs	r1, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	2202      	movs	r2, #2
 8005388:	4013      	ands	r3, r2
 800538a:	d00b      	beq.n	80053a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4a43      	ldr	r2, [pc, #268]	; (80054a0 <UART_AdvFeatureConfig+0x148>)
 8005394:	4013      	ands	r3, r2
 8005396:	0019      	movs	r1, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	2204      	movs	r2, #4
 80053aa:	4013      	ands	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4a3b      	ldr	r2, [pc, #236]	; (80054a4 <UART_AdvFeatureConfig+0x14c>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	0019      	movs	r1, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2208      	movs	r2, #8
 80053cc:	4013      	ands	r3, r2
 80053ce:	d00b      	beq.n	80053e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4a34      	ldr	r2, [pc, #208]	; (80054a8 <UART_AdvFeatureConfig+0x150>)
 80053d8:	4013      	ands	r3, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	2210      	movs	r2, #16
 80053ee:	4013      	ands	r3, r2
 80053f0:	d00b      	beq.n	800540a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <UART_AdvFeatureConfig+0x154>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	0019      	movs	r1, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	2220      	movs	r2, #32
 8005410:	4013      	ands	r3, r2
 8005412:	d00b      	beq.n	800542c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	4a25      	ldr	r2, [pc, #148]	; (80054b0 <UART_AdvFeatureConfig+0x158>)
 800541c:	4013      	ands	r3, r2
 800541e:	0019      	movs	r1, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	2240      	movs	r2, #64	; 0x40
 8005432:	4013      	ands	r3, r2
 8005434:	d01d      	beq.n	8005472 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4a1d      	ldr	r2, [pc, #116]	; (80054b4 <UART_AdvFeatureConfig+0x15c>)
 800543e:	4013      	ands	r3, r2
 8005440:	0019      	movs	r1, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005452:	2380      	movs	r3, #128	; 0x80
 8005454:	035b      	lsls	r3, r3, #13
 8005456:	429a      	cmp	r2, r3
 8005458:	d10b      	bne.n	8005472 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <UART_AdvFeatureConfig+0x160>)
 8005462:	4013      	ands	r3, r2
 8005464:	0019      	movs	r1, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2280      	movs	r2, #128	; 0x80
 8005478:	4013      	ands	r3, r2
 800547a:	d00b      	beq.n	8005494 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <UART_AdvFeatureConfig+0x164>)
 8005484:	4013      	ands	r3, r2
 8005486:	0019      	movs	r1, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }
}
 8005494:	46c0      	nop			; (mov r8, r8)
 8005496:	46bd      	mov	sp, r7
 8005498:	b002      	add	sp, #8
 800549a:	bd80      	pop	{r7, pc}
 800549c:	fffdffff 	.word	0xfffdffff
 80054a0:	fffeffff 	.word	0xfffeffff
 80054a4:	fffbffff 	.word	0xfffbffff
 80054a8:	ffff7fff 	.word	0xffff7fff
 80054ac:	ffffefff 	.word	0xffffefff
 80054b0:	ffffdfff 	.word	0xffffdfff
 80054b4:	ffefffff 	.word	0xffefffff
 80054b8:	ff9fffff 	.word	0xff9fffff
 80054bc:	fff7ffff 	.word	0xfff7ffff

080054c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80054ce:	f7fd fd07 	bl	8002ee0 <HAL_GetTick>
 80054d2:	0003      	movs	r3, r0
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2208      	movs	r2, #8
 80054de:	4013      	ands	r3, r2
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d10d      	bne.n	8005500 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	0399      	lsls	r1, r3, #14
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4b16      	ldr	r3, [pc, #88]	; (8005548 <UART_CheckIdleState+0x88>)
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	0013      	movs	r3, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	f000 f82a 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 80054f8:	1e03      	subs	r3, r0, #0
 80054fa:	d001      	beq.n	8005500 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e01f      	b.n	8005540 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2204      	movs	r2, #4
 8005508:	4013      	ands	r3, r2
 800550a:	2b04      	cmp	r3, #4
 800550c:	d10d      	bne.n	800552a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	03d9      	lsls	r1, r3, #15
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <UART_CheckIdleState+0x88>)
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	0013      	movs	r3, r2
 800551c:	2200      	movs	r2, #0
 800551e:	f000 f815 	bl	800554c <UART_WaitOnFlagUntilTimeout>
 8005522:	1e03      	subs	r3, r0, #0
 8005524:	d001      	beq.n	800552a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e00a      	b.n	8005540 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2270      	movs	r2, #112	; 0x70
 800553a:	2100      	movs	r1, #0
 800553c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	0018      	movs	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	b004      	add	sp, #16
 8005546:	bd80      	pop	{r7, pc}
 8005548:	01ffffff 	.word	0x01ffffff

0800554c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	1dfb      	adds	r3, r7, #7
 800555a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555c:	e029      	b.n	80055b2 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	3301      	adds	r3, #1
 8005562:	d026      	beq.n	80055b2 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005564:	f7fd fcbc 	bl	8002ee0 <HAL_GetTick>
 8005568:	0002      	movs	r2, r0
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	429a      	cmp	r2, r3
 8005572:	d302      	bcc.n	800557a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d11b      	bne.n	80055b2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4915      	ldr	r1, [pc, #84]	; (80055dc <UART_WaitOnFlagUntilTimeout+0x90>)
 8005586:	400a      	ands	r2, r1
 8005588:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2101      	movs	r1, #1
 8005596:	438a      	bics	r2, r1
 8005598:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2270      	movs	r2, #112	; 0x70
 80055aa:	2100      	movs	r1, #0
 80055ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e00f      	b.n	80055d2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	4013      	ands	r3, r2
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	425a      	negs	r2, r3
 80055c2:	4153      	adcs	r3, r2
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	001a      	movs	r2, r3
 80055c8:	1dfb      	adds	r3, r7, #7
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d0c6      	beq.n	800555e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	0018      	movs	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b004      	add	sp, #16
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	fffffe5f 	.word	0xfffffe5f

080055e0 <__errno>:
 80055e0:	4b01      	ldr	r3, [pc, #4]	; (80055e8 <__errno+0x8>)
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	4770      	bx	lr
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	2000000c 	.word	0x2000000c

080055ec <__libc_init_array>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	2600      	movs	r6, #0
 80055f0:	4d0c      	ldr	r5, [pc, #48]	; (8005624 <__libc_init_array+0x38>)
 80055f2:	4c0d      	ldr	r4, [pc, #52]	; (8005628 <__libc_init_array+0x3c>)
 80055f4:	1b64      	subs	r4, r4, r5
 80055f6:	10a4      	asrs	r4, r4, #2
 80055f8:	42a6      	cmp	r6, r4
 80055fa:	d109      	bne.n	8005610 <__libc_init_array+0x24>
 80055fc:	2600      	movs	r6, #0
 80055fe:	f003 fdd7 	bl	80091b0 <_init>
 8005602:	4d0a      	ldr	r5, [pc, #40]	; (800562c <__libc_init_array+0x40>)
 8005604:	4c0a      	ldr	r4, [pc, #40]	; (8005630 <__libc_init_array+0x44>)
 8005606:	1b64      	subs	r4, r4, r5
 8005608:	10a4      	asrs	r4, r4, #2
 800560a:	42a6      	cmp	r6, r4
 800560c:	d105      	bne.n	800561a <__libc_init_array+0x2e>
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	00b3      	lsls	r3, r6, #2
 8005612:	58eb      	ldr	r3, [r5, r3]
 8005614:	4798      	blx	r3
 8005616:	3601      	adds	r6, #1
 8005618:	e7ee      	b.n	80055f8 <__libc_init_array+0xc>
 800561a:	00b3      	lsls	r3, r6, #2
 800561c:	58eb      	ldr	r3, [r5, r3]
 800561e:	4798      	blx	r3
 8005620:	3601      	adds	r6, #1
 8005622:	e7f2      	b.n	800560a <__libc_init_array+0x1e>
 8005624:	08009588 	.word	0x08009588
 8005628:	08009588 	.word	0x08009588
 800562c:	08009588 	.word	0x08009588
 8005630:	0800958c 	.word	0x0800958c

08005634 <memset>:
 8005634:	0003      	movs	r3, r0
 8005636:	1812      	adds	r2, r2, r0
 8005638:	4293      	cmp	r3, r2
 800563a:	d100      	bne.n	800563e <memset+0xa>
 800563c:	4770      	bx	lr
 800563e:	7019      	strb	r1, [r3, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	e7f9      	b.n	8005638 <memset+0x4>

08005644 <__cvt>:
 8005644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005646:	b08b      	sub	sp, #44	; 0x2c
 8005648:	0014      	movs	r4, r2
 800564a:	1e1d      	subs	r5, r3, #0
 800564c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800564e:	da53      	bge.n	80056f8 <__cvt+0xb4>
 8005650:	2480      	movs	r4, #128	; 0x80
 8005652:	0624      	lsls	r4, r4, #24
 8005654:	191b      	adds	r3, r3, r4
 8005656:	001d      	movs	r5, r3
 8005658:	0014      	movs	r4, r2
 800565a:	232d      	movs	r3, #45	; 0x2d
 800565c:	700b      	strb	r3, [r1, #0]
 800565e:	2320      	movs	r3, #32
 8005660:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8005662:	2203      	movs	r2, #3
 8005664:	439e      	bics	r6, r3
 8005666:	2e46      	cmp	r6, #70	; 0x46
 8005668:	d007      	beq.n	800567a <__cvt+0x36>
 800566a:	0033      	movs	r3, r6
 800566c:	3b45      	subs	r3, #69	; 0x45
 800566e:	4259      	negs	r1, r3
 8005670:	414b      	adcs	r3, r1
 8005672:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005674:	3a01      	subs	r2, #1
 8005676:	18cb      	adds	r3, r1, r3
 8005678:	9310      	str	r3, [sp, #64]	; 0x40
 800567a:	ab09      	add	r3, sp, #36	; 0x24
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	ab08      	add	r3, sp, #32
 8005680:	9303      	str	r3, [sp, #12]
 8005682:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005684:	9200      	str	r2, [sp, #0]
 8005686:	9302      	str	r3, [sp, #8]
 8005688:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800568a:	0022      	movs	r2, r4
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	002b      	movs	r3, r5
 8005690:	f001 fdbe 	bl	8007210 <_dtoa_r>
 8005694:	0007      	movs	r7, r0
 8005696:	2e47      	cmp	r6, #71	; 0x47
 8005698:	d102      	bne.n	80056a0 <__cvt+0x5c>
 800569a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800569c:	07db      	lsls	r3, r3, #31
 800569e:	d524      	bpl.n	80056ea <__cvt+0xa6>
 80056a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	9307      	str	r3, [sp, #28]
 80056a6:	2e46      	cmp	r6, #70	; 0x46
 80056a8:	d114      	bne.n	80056d4 <__cvt+0x90>
 80056aa:	783b      	ldrb	r3, [r7, #0]
 80056ac:	2b30      	cmp	r3, #48	; 0x30
 80056ae:	d10c      	bne.n	80056ca <__cvt+0x86>
 80056b0:	2200      	movs	r2, #0
 80056b2:	2300      	movs	r3, #0
 80056b4:	0020      	movs	r0, r4
 80056b6:	0029      	movs	r1, r5
 80056b8:	f7fa febe 	bl	8000438 <__aeabi_dcmpeq>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d104      	bne.n	80056ca <__cvt+0x86>
 80056c0:	2301      	movs	r3, #1
 80056c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80056cc:	9a07      	ldr	r2, [sp, #28]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	18d3      	adds	r3, r2, r3
 80056d2:	9307      	str	r3, [sp, #28]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2300      	movs	r3, #0
 80056d8:	0020      	movs	r0, r4
 80056da:	0029      	movs	r1, r5
 80056dc:	f7fa feac 	bl	8000438 <__aeabi_dcmpeq>
 80056e0:	2230      	movs	r2, #48	; 0x30
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d00d      	beq.n	8005702 <__cvt+0xbe>
 80056e6:	9b07      	ldr	r3, [sp, #28]
 80056e8:	9309      	str	r3, [sp, #36]	; 0x24
 80056ea:	0038      	movs	r0, r7
 80056ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80056f0:	1bdb      	subs	r3, r3, r7
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	b00b      	add	sp, #44	; 0x2c
 80056f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f8:	2300      	movs	r3, #0
 80056fa:	e7af      	b.n	800565c <__cvt+0x18>
 80056fc:	1c59      	adds	r1, r3, #1
 80056fe:	9109      	str	r1, [sp, #36]	; 0x24
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005704:	9907      	ldr	r1, [sp, #28]
 8005706:	428b      	cmp	r3, r1
 8005708:	d3f8      	bcc.n	80056fc <__cvt+0xb8>
 800570a:	e7ee      	b.n	80056ea <__cvt+0xa6>

0800570c <__exponent>:
 800570c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800570e:	1c83      	adds	r3, r0, #2
 8005710:	b085      	sub	sp, #20
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	0006      	movs	r6, r0
 8005716:	000c      	movs	r4, r1
 8005718:	7002      	strb	r2, [r0, #0]
 800571a:	232b      	movs	r3, #43	; 0x2b
 800571c:	2900      	cmp	r1, #0
 800571e:	da01      	bge.n	8005724 <__exponent+0x18>
 8005720:	232d      	movs	r3, #45	; 0x2d
 8005722:	424c      	negs	r4, r1
 8005724:	7073      	strb	r3, [r6, #1]
 8005726:	2c09      	cmp	r4, #9
 8005728:	dd22      	ble.n	8005770 <__exponent+0x64>
 800572a:	ab02      	add	r3, sp, #8
 800572c:	1ddd      	adds	r5, r3, #7
 800572e:	0020      	movs	r0, r4
 8005730:	210a      	movs	r1, #10
 8005732:	f7fa fe6b 	bl	800040c <__aeabi_idivmod>
 8005736:	1e6f      	subs	r7, r5, #1
 8005738:	3130      	adds	r1, #48	; 0x30
 800573a:	7039      	strb	r1, [r7, #0]
 800573c:	0020      	movs	r0, r4
 800573e:	210a      	movs	r1, #10
 8005740:	f7fa fd7e 	bl	8000240 <__divsi3>
 8005744:	0004      	movs	r4, r0
 8005746:	2809      	cmp	r0, #9
 8005748:	dc0b      	bgt.n	8005762 <__exponent+0x56>
 800574a:	3d02      	subs	r5, #2
 800574c:	3430      	adds	r4, #48	; 0x30
 800574e:	9b01      	ldr	r3, [sp, #4]
 8005750:	702c      	strb	r4, [r5, #0]
 8005752:	aa02      	add	r2, sp, #8
 8005754:	3207      	adds	r2, #7
 8005756:	0018      	movs	r0, r3
 8005758:	42aa      	cmp	r2, r5
 800575a:	d804      	bhi.n	8005766 <__exponent+0x5a>
 800575c:	1b80      	subs	r0, r0, r6
 800575e:	b005      	add	sp, #20
 8005760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005762:	003d      	movs	r5, r7
 8005764:	e7e3      	b.n	800572e <__exponent+0x22>
 8005766:	782a      	ldrb	r2, [r5, #0]
 8005768:	3501      	adds	r5, #1
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	3301      	adds	r3, #1
 800576e:	e7f0      	b.n	8005752 <__exponent+0x46>
 8005770:	2330      	movs	r3, #48	; 0x30
 8005772:	18e4      	adds	r4, r4, r3
 8005774:	70b3      	strb	r3, [r6, #2]
 8005776:	1d30      	adds	r0, r6, #4
 8005778:	70f4      	strb	r4, [r6, #3]
 800577a:	e7ef      	b.n	800575c <__exponent+0x50>

0800577c <_printf_float>:
 800577c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800577e:	b095      	sub	sp, #84	; 0x54
 8005780:	000c      	movs	r4, r1
 8005782:	920a      	str	r2, [sp, #40]	; 0x28
 8005784:	930b      	str	r3, [sp, #44]	; 0x2c
 8005786:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005788:	9009      	str	r0, [sp, #36]	; 0x24
 800578a:	f002 fe57 	bl	800843c <_localeconv_r>
 800578e:	6803      	ldr	r3, [r0, #0]
 8005790:	0018      	movs	r0, r3
 8005792:	930c      	str	r3, [sp, #48]	; 0x30
 8005794:	f7fa fcb8 	bl	8000108 <strlen>
 8005798:	2300      	movs	r3, #0
 800579a:	9312      	str	r3, [sp, #72]	; 0x48
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	900e      	str	r0, [sp, #56]	; 0x38
 80057a0:	930d      	str	r3, [sp, #52]	; 0x34
 80057a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057a4:	7e27      	ldrb	r7, [r4, #24]
 80057a6:	682b      	ldr	r3, [r5, #0]
 80057a8:	2207      	movs	r2, #7
 80057aa:	05c9      	lsls	r1, r1, #23
 80057ac:	d545      	bpl.n	800583a <_printf_float+0xbe>
 80057ae:	189b      	adds	r3, r3, r2
 80057b0:	4393      	bics	r3, r2
 80057b2:	001a      	movs	r2, r3
 80057b4:	3208      	adds	r2, #8
 80057b6:	602a      	str	r2, [r5, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	64a2      	str	r2, [r4, #72]	; 0x48
 80057be:	64e3      	str	r3, [r4, #76]	; 0x4c
 80057c0:	2201      	movs	r2, #1
 80057c2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80057c4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80057c6:	006b      	lsls	r3, r5, #1
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80057cc:	4252      	negs	r2, r2
 80057ce:	4bac      	ldr	r3, [pc, #688]	; (8005a80 <_printf_float+0x304>)
 80057d0:	0030      	movs	r0, r6
 80057d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80057d4:	f7fc fd3e 	bl	8002254 <__aeabi_dcmpun>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d130      	bne.n	800583e <_printf_float+0xc2>
 80057dc:	2201      	movs	r2, #1
 80057de:	4ba8      	ldr	r3, [pc, #672]	; (8005a80 <_printf_float+0x304>)
 80057e0:	4252      	negs	r2, r2
 80057e2:	0030      	movs	r0, r6
 80057e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80057e6:	f7fa fe37 	bl	8000458 <__aeabi_dcmple>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d127      	bne.n	800583e <_printf_float+0xc2>
 80057ee:	2200      	movs	r2, #0
 80057f0:	2300      	movs	r3, #0
 80057f2:	0030      	movs	r0, r6
 80057f4:	0029      	movs	r1, r5
 80057f6:	f7fa fe25 	bl	8000444 <__aeabi_dcmplt>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d003      	beq.n	8005806 <_printf_float+0x8a>
 80057fe:	0023      	movs	r3, r4
 8005800:	222d      	movs	r2, #45	; 0x2d
 8005802:	3343      	adds	r3, #67	; 0x43
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	4d9f      	ldr	r5, [pc, #636]	; (8005a84 <_printf_float+0x308>)
 8005808:	2f47      	cmp	r7, #71	; 0x47
 800580a:	d800      	bhi.n	800580e <_printf_float+0x92>
 800580c:	4d9e      	ldr	r5, [pc, #632]	; (8005a88 <_printf_float+0x30c>)
 800580e:	2303      	movs	r3, #3
 8005810:	2600      	movs	r6, #0
 8005812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005814:	6123      	str	r3, [r4, #16]
 8005816:	3301      	adds	r3, #1
 8005818:	439a      	bics	r2, r3
 800581a:	6022      	str	r2, [r4, #0]
 800581c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800581e:	aa13      	add	r2, sp, #76	; 0x4c
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	0021      	movs	r1, r4
 8005824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005826:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005828:	f000 f9f4 	bl	8005c14 <_printf_common>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d000      	beq.n	8005832 <_printf_float+0xb6>
 8005830:	e093      	b.n	800595a <_printf_float+0x1de>
 8005832:	2001      	movs	r0, #1
 8005834:	4240      	negs	r0, r0
 8005836:	b015      	add	sp, #84	; 0x54
 8005838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800583a:	3307      	adds	r3, #7
 800583c:	e7b8      	b.n	80057b0 <_printf_float+0x34>
 800583e:	0032      	movs	r2, r6
 8005840:	002b      	movs	r3, r5
 8005842:	0030      	movs	r0, r6
 8005844:	0029      	movs	r1, r5
 8005846:	f7fc fd05 	bl	8002254 <__aeabi_dcmpun>
 800584a:	2800      	cmp	r0, #0
 800584c:	d004      	beq.n	8005858 <_printf_float+0xdc>
 800584e:	4d8f      	ldr	r5, [pc, #572]	; (8005a8c <_printf_float+0x310>)
 8005850:	2f47      	cmp	r7, #71	; 0x47
 8005852:	d8dc      	bhi.n	800580e <_printf_float+0x92>
 8005854:	4d8e      	ldr	r5, [pc, #568]	; (8005a90 <_printf_float+0x314>)
 8005856:	e7da      	b.n	800580e <_printf_float+0x92>
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800585c:	6862      	ldr	r2, [r4, #4]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	430b      	orrs	r3, r1
 8005862:	1c51      	adds	r1, r2, #1
 8005864:	d143      	bne.n	80058ee <_printf_float+0x172>
 8005866:	3207      	adds	r2, #7
 8005868:	6062      	str	r2, [r4, #4]
 800586a:	aa12      	add	r2, sp, #72	; 0x48
 800586c:	2100      	movs	r1, #0
 800586e:	9205      	str	r2, [sp, #20]
 8005870:	aa11      	add	r2, sp, #68	; 0x44
 8005872:	9203      	str	r2, [sp, #12]
 8005874:	2223      	movs	r2, #35	; 0x23
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	9106      	str	r1, [sp, #24]
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	a908      	add	r1, sp, #32
 800587e:	6863      	ldr	r3, [r4, #4]
 8005880:	1852      	adds	r2, r2, r1
 8005882:	9202      	str	r2, [sp, #8]
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	0032      	movs	r2, r6
 8005888:	002b      	movs	r3, r5
 800588a:	9704      	str	r7, [sp, #16]
 800588c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800588e:	f7ff fed9 	bl	8005644 <__cvt>
 8005892:	2320      	movs	r3, #32
 8005894:	003a      	movs	r2, r7
 8005896:	0005      	movs	r5, r0
 8005898:	439a      	bics	r2, r3
 800589a:	2a47      	cmp	r2, #71	; 0x47
 800589c:	d107      	bne.n	80058ae <_printf_float+0x132>
 800589e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058a0:	1cda      	adds	r2, r3, #3
 80058a2:	db02      	blt.n	80058aa <_printf_float+0x12e>
 80058a4:	6862      	ldr	r2, [r4, #4]
 80058a6:	4293      	cmp	r3, r2
 80058a8:	dd45      	ble.n	8005936 <_printf_float+0x1ba>
 80058aa:	3f02      	subs	r7, #2
 80058ac:	b2ff      	uxtb	r7, r7
 80058ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80058b0:	2f65      	cmp	r7, #101	; 0x65
 80058b2:	d825      	bhi.n	8005900 <_printf_float+0x184>
 80058b4:	0020      	movs	r0, r4
 80058b6:	3901      	subs	r1, #1
 80058b8:	003a      	movs	r2, r7
 80058ba:	3050      	adds	r0, #80	; 0x50
 80058bc:	9111      	str	r1, [sp, #68]	; 0x44
 80058be:	f7ff ff25 	bl	800570c <__exponent>
 80058c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058c4:	0006      	movs	r6, r0
 80058c6:	1813      	adds	r3, r2, r0
 80058c8:	6123      	str	r3, [r4, #16]
 80058ca:	2a01      	cmp	r2, #1
 80058cc:	dc02      	bgt.n	80058d4 <_printf_float+0x158>
 80058ce:	6822      	ldr	r2, [r4, #0]
 80058d0:	07d2      	lsls	r2, r2, #31
 80058d2:	d501      	bpl.n	80058d8 <_printf_float+0x15c>
 80058d4:	3301      	adds	r3, #1
 80058d6:	6123      	str	r3, [r4, #16]
 80058d8:	2323      	movs	r3, #35	; 0x23
 80058da:	aa08      	add	r2, sp, #32
 80058dc:	189b      	adds	r3, r3, r2
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d09b      	beq.n	800581c <_printf_float+0xa0>
 80058e4:	0023      	movs	r3, r4
 80058e6:	222d      	movs	r2, #45	; 0x2d
 80058e8:	3343      	adds	r3, #67	; 0x43
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	e796      	b.n	800581c <_printf_float+0xa0>
 80058ee:	2f67      	cmp	r7, #103	; 0x67
 80058f0:	d100      	bne.n	80058f4 <_printf_float+0x178>
 80058f2:	e176      	b.n	8005be2 <_printf_float+0x466>
 80058f4:	2f47      	cmp	r7, #71	; 0x47
 80058f6:	d1b8      	bne.n	800586a <_printf_float+0xee>
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	d1b6      	bne.n	800586a <_printf_float+0xee>
 80058fc:	2201      	movs	r2, #1
 80058fe:	e7b3      	b.n	8005868 <_printf_float+0xec>
 8005900:	2f66      	cmp	r7, #102	; 0x66
 8005902:	d119      	bne.n	8005938 <_printf_float+0x1bc>
 8005904:	6863      	ldr	r3, [r4, #4]
 8005906:	2900      	cmp	r1, #0
 8005908:	dd0c      	ble.n	8005924 <_printf_float+0x1a8>
 800590a:	6121      	str	r1, [r4, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <_printf_float+0x19a>
 8005910:	6822      	ldr	r2, [r4, #0]
 8005912:	07d2      	lsls	r2, r2, #31
 8005914:	d502      	bpl.n	800591c <_printf_float+0x1a0>
 8005916:	3301      	adds	r3, #1
 8005918:	185b      	adds	r3, r3, r1
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800591e:	2600      	movs	r6, #0
 8005920:	65a3      	str	r3, [r4, #88]	; 0x58
 8005922:	e7d9      	b.n	80058d8 <_printf_float+0x15c>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d103      	bne.n	8005930 <_printf_float+0x1b4>
 8005928:	2201      	movs	r2, #1
 800592a:	6821      	ldr	r1, [r4, #0]
 800592c:	4211      	tst	r1, r2
 800592e:	d000      	beq.n	8005932 <_printf_float+0x1b6>
 8005930:	1c9a      	adds	r2, r3, #2
 8005932:	6122      	str	r2, [r4, #16]
 8005934:	e7f2      	b.n	800591c <_printf_float+0x1a0>
 8005936:	2767      	movs	r7, #103	; 0x67
 8005938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800593a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800593c:	4293      	cmp	r3, r2
 800593e:	db05      	blt.n	800594c <_printf_float+0x1d0>
 8005940:	6822      	ldr	r2, [r4, #0]
 8005942:	6123      	str	r3, [r4, #16]
 8005944:	07d2      	lsls	r2, r2, #31
 8005946:	d5e9      	bpl.n	800591c <_printf_float+0x1a0>
 8005948:	3301      	adds	r3, #1
 800594a:	e7e6      	b.n	800591a <_printf_float+0x19e>
 800594c:	2101      	movs	r1, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	dc01      	bgt.n	8005956 <_printf_float+0x1da>
 8005952:	1849      	adds	r1, r1, r1
 8005954:	1ac9      	subs	r1, r1, r3
 8005956:	1852      	adds	r2, r2, r1
 8005958:	e7eb      	b.n	8005932 <_printf_float+0x1b6>
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	0553      	lsls	r3, r2, #21
 800595e:	d408      	bmi.n	8005972 <_printf_float+0x1f6>
 8005960:	6923      	ldr	r3, [r4, #16]
 8005962:	002a      	movs	r2, r5
 8005964:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005966:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005968:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800596a:	47a8      	blx	r5
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d129      	bne.n	80059c4 <_printf_float+0x248>
 8005970:	e75f      	b.n	8005832 <_printf_float+0xb6>
 8005972:	2f65      	cmp	r7, #101	; 0x65
 8005974:	d800      	bhi.n	8005978 <_printf_float+0x1fc>
 8005976:	e0e0      	b.n	8005b3a <_printf_float+0x3be>
 8005978:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800597a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800597c:	2200      	movs	r2, #0
 800597e:	2300      	movs	r3, #0
 8005980:	f7fa fd5a 	bl	8000438 <__aeabi_dcmpeq>
 8005984:	2800      	cmp	r0, #0
 8005986:	d034      	beq.n	80059f2 <_printf_float+0x276>
 8005988:	2301      	movs	r3, #1
 800598a:	4a42      	ldr	r2, [pc, #264]	; (8005a94 <_printf_float+0x318>)
 800598c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800598e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005990:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005992:	47a8      	blx	r5
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d100      	bne.n	800599a <_printf_float+0x21e>
 8005998:	e74b      	b.n	8005832 <_printf_float+0xb6>
 800599a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800599c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800599e:	4293      	cmp	r3, r2
 80059a0:	db02      	blt.n	80059a8 <_printf_float+0x22c>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	07db      	lsls	r3, r3, #31
 80059a6:	d50d      	bpl.n	80059c4 <_printf_float+0x248>
 80059a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80059aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059b2:	47a8      	blx	r5
 80059b4:	2500      	movs	r5, #0
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	d100      	bne.n	80059bc <_printf_float+0x240>
 80059ba:	e73a      	b.n	8005832 <_printf_float+0xb6>
 80059bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059be:	3b01      	subs	r3, #1
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	dc0a      	bgt.n	80059da <_printf_float+0x25e>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	079b      	lsls	r3, r3, #30
 80059c8:	d500      	bpl.n	80059cc <_printf_float+0x250>
 80059ca:	e108      	b.n	8005bde <_printf_float+0x462>
 80059cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059ce:	68e0      	ldr	r0, [r4, #12]
 80059d0:	4298      	cmp	r0, r3
 80059d2:	db00      	blt.n	80059d6 <_printf_float+0x25a>
 80059d4:	e72f      	b.n	8005836 <_printf_float+0xba>
 80059d6:	0018      	movs	r0, r3
 80059d8:	e72d      	b.n	8005836 <_printf_float+0xba>
 80059da:	0022      	movs	r2, r4
 80059dc:	2301      	movs	r3, #1
 80059de:	321a      	adds	r2, #26
 80059e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80059e6:	47b0      	blx	r6
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d100      	bne.n	80059ee <_printf_float+0x272>
 80059ec:	e721      	b.n	8005832 <_printf_float+0xb6>
 80059ee:	3501      	adds	r5, #1
 80059f0:	e7e4      	b.n	80059bc <_printf_float+0x240>
 80059f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	dc2d      	bgt.n	8005a54 <_printf_float+0x2d8>
 80059f8:	2301      	movs	r3, #1
 80059fa:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <_printf_float+0x318>)
 80059fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a00:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a02:	47b0      	blx	r6
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d100      	bne.n	8005a0a <_printf_float+0x28e>
 8005a08:	e713      	b.n	8005832 <_printf_float+0xb6>
 8005a0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d105      	bne.n	8005a1c <_printf_float+0x2a0>
 8005a10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <_printf_float+0x2a0>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	07db      	lsls	r3, r3, #31
 8005a1a:	d5d3      	bpl.n	80059c4 <_printf_float+0x248>
 8005a1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a22:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a26:	47b0      	blx	r6
 8005a28:	2600      	movs	r6, #0
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d100      	bne.n	8005a30 <_printf_float+0x2b4>
 8005a2e:	e700      	b.n	8005832 <_printf_float+0xb6>
 8005a30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a32:	425b      	negs	r3, r3
 8005a34:	42b3      	cmp	r3, r6
 8005a36:	dc01      	bgt.n	8005a3c <_printf_float+0x2c0>
 8005a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a3a:	e792      	b.n	8005962 <_printf_float+0x1e6>
 8005a3c:	0022      	movs	r2, r4
 8005a3e:	2301      	movs	r3, #1
 8005a40:	321a      	adds	r2, #26
 8005a42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a46:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005a48:	47b8      	blx	r7
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	d100      	bne.n	8005a50 <_printf_float+0x2d4>
 8005a4e:	e6f0      	b.n	8005832 <_printf_float+0xb6>
 8005a50:	3601      	adds	r6, #1
 8005a52:	e7ed      	b.n	8005a30 <_printf_float+0x2b4>
 8005a54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a56:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005a58:	429f      	cmp	r7, r3
 8005a5a:	dd00      	ble.n	8005a5e <_printf_float+0x2e2>
 8005a5c:	001f      	movs	r7, r3
 8005a5e:	2f00      	cmp	r7, #0
 8005a60:	dd08      	ble.n	8005a74 <_printf_float+0x2f8>
 8005a62:	003b      	movs	r3, r7
 8005a64:	002a      	movs	r2, r5
 8005a66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a6a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a6c:	47b0      	blx	r6
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d100      	bne.n	8005a74 <_printf_float+0x2f8>
 8005a72:	e6de      	b.n	8005832 <_printf_float+0xb6>
 8005a74:	2300      	movs	r3, #0
 8005a76:	930d      	str	r3, [sp, #52]	; 0x34
 8005a78:	43fb      	mvns	r3, r7
 8005a7a:	17db      	asrs	r3, r3, #31
 8005a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a7e:	e018      	b.n	8005ab2 <_printf_float+0x336>
 8005a80:	7fefffff 	.word	0x7fefffff
 8005a84:	080092cc 	.word	0x080092cc
 8005a88:	080092c8 	.word	0x080092c8
 8005a8c:	080092d4 	.word	0x080092d4
 8005a90:	080092d0 	.word	0x080092d0
 8005a94:	080092d8 	.word	0x080092d8
 8005a98:	0022      	movs	r2, r4
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	321a      	adds	r2, #26
 8005a9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aa2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005aa4:	47b0      	blx	r6
 8005aa6:	1c43      	adds	r3, r0, #1
 8005aa8:	d100      	bne.n	8005aac <_printf_float+0x330>
 8005aaa:	e6c2      	b.n	8005832 <_printf_float+0xb6>
 8005aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aae:	3301      	adds	r3, #1
 8005ab0:	930d      	str	r3, [sp, #52]	; 0x34
 8005ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ab4:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8005ab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ab8:	403b      	ands	r3, r7
 8005aba:	1af3      	subs	r3, r6, r3
 8005abc:	4293      	cmp	r3, r2
 8005abe:	dceb      	bgt.n	8005a98 <_printf_float+0x31c>
 8005ac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ac2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ac4:	19ad      	adds	r5, r5, r6
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	db10      	blt.n	8005aec <_printf_float+0x370>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	07db      	lsls	r3, r3, #31
 8005ace:	d40d      	bmi.n	8005aec <_printf_float+0x370>
 8005ad0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8005ad2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ad4:	1bbe      	subs	r6, r7, r6
 8005ad6:	1aff      	subs	r7, r7, r3
 8005ad8:	42b7      	cmp	r7, r6
 8005ada:	dd00      	ble.n	8005ade <_printf_float+0x362>
 8005adc:	0037      	movs	r7, r6
 8005ade:	2f00      	cmp	r7, #0
 8005ae0:	dc0d      	bgt.n	8005afe <_printf_float+0x382>
 8005ae2:	43fe      	mvns	r6, r7
 8005ae4:	17f3      	asrs	r3, r6, #31
 8005ae6:	2500      	movs	r5, #0
 8005ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8005aea:	e01c      	b.n	8005b26 <_printf_float+0x3aa>
 8005aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005af0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005af2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005af4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005af6:	47b8      	blx	r7
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d1e9      	bne.n	8005ad0 <_printf_float+0x354>
 8005afc:	e699      	b.n	8005832 <_printf_float+0xb6>
 8005afe:	003b      	movs	r3, r7
 8005b00:	002a      	movs	r2, r5
 8005b02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b06:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005b08:	47a8      	blx	r5
 8005b0a:	1c43      	adds	r3, r0, #1
 8005b0c:	d1e9      	bne.n	8005ae2 <_printf_float+0x366>
 8005b0e:	e690      	b.n	8005832 <_printf_float+0xb6>
 8005b10:	0022      	movs	r2, r4
 8005b12:	2301      	movs	r3, #1
 8005b14:	321a      	adds	r2, #26
 8005b16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b1a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b1c:	47b0      	blx	r6
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	d100      	bne.n	8005b24 <_printf_float+0x3a8>
 8005b22:	e686      	b.n	8005832 <_printf_float+0xb6>
 8005b24:	3501      	adds	r5, #1
 8005b26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005b28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	003a      	movs	r2, r7
 8005b30:	400a      	ands	r2, r1
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	42ab      	cmp	r3, r5
 8005b36:	dceb      	bgt.n	8005b10 <_printf_float+0x394>
 8005b38:	e744      	b.n	80059c4 <_printf_float+0x248>
 8005b3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	dc02      	bgt.n	8005b46 <_printf_float+0x3ca>
 8005b40:	2301      	movs	r3, #1
 8005b42:	421a      	tst	r2, r3
 8005b44:	d032      	beq.n	8005bac <_printf_float+0x430>
 8005b46:	2301      	movs	r3, #1
 8005b48:	002a      	movs	r2, r5
 8005b4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b4e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005b50:	47b8      	blx	r7
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d100      	bne.n	8005b58 <_printf_float+0x3dc>
 8005b56:	e66c      	b.n	8005832 <_printf_float+0xb6>
 8005b58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b60:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005b62:	3501      	adds	r5, #1
 8005b64:	47b8      	blx	r7
 8005b66:	1c43      	adds	r3, r0, #1
 8005b68:	d100      	bne.n	8005b6c <_printf_float+0x3f0>
 8005b6a:	e662      	b.n	8005832 <_printf_float+0xb6>
 8005b6c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005b6e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005b70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b72:	2200      	movs	r2, #0
 8005b74:	1e5f      	subs	r7, r3, #1
 8005b76:	2300      	movs	r3, #0
 8005b78:	f7fa fc5e 	bl	8000438 <__aeabi_dcmpeq>
 8005b7c:	003b      	movs	r3, r7
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d014      	beq.n	8005bac <_printf_float+0x430>
 8005b82:	2500      	movs	r5, #0
 8005b84:	e00a      	b.n	8005b9c <_printf_float+0x420>
 8005b86:	0022      	movs	r2, r4
 8005b88:	2301      	movs	r3, #1
 8005b8a:	321a      	adds	r2, #26
 8005b8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b90:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005b92:	47b8      	blx	r7
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d100      	bne.n	8005b9a <_printf_float+0x41e>
 8005b98:	e64b      	b.n	8005832 <_printf_float+0xb6>
 8005b9a:	3501      	adds	r5, #1
 8005b9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	dcf0      	bgt.n	8005b86 <_printf_float+0x40a>
 8005ba4:	0022      	movs	r2, r4
 8005ba6:	0033      	movs	r3, r6
 8005ba8:	3250      	adds	r2, #80	; 0x50
 8005baa:	e6db      	b.n	8005964 <_printf_float+0x1e8>
 8005bac:	002a      	movs	r2, r5
 8005bae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bb2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005bb4:	47a8      	blx	r5
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	d1f4      	bne.n	8005ba4 <_printf_float+0x428>
 8005bba:	e63a      	b.n	8005832 <_printf_float+0xb6>
 8005bbc:	0022      	movs	r2, r4
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	3219      	adds	r2, #25
 8005bc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bc6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005bc8:	47b0      	blx	r6
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	d100      	bne.n	8005bd0 <_printf_float+0x454>
 8005bce:	e630      	b.n	8005832 <_printf_float+0xb6>
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	42ab      	cmp	r3, r5
 8005bda:	dcef      	bgt.n	8005bbc <_printf_float+0x440>
 8005bdc:	e6f6      	b.n	80059cc <_printf_float+0x250>
 8005bde:	2500      	movs	r5, #0
 8005be0:	e7f7      	b.n	8005bd2 <_printf_float+0x456>
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	d100      	bne.n	8005be8 <_printf_float+0x46c>
 8005be6:	e689      	b.n	80058fc <_printf_float+0x180>
 8005be8:	2100      	movs	r1, #0
 8005bea:	9106      	str	r1, [sp, #24]
 8005bec:	a912      	add	r1, sp, #72	; 0x48
 8005bee:	9105      	str	r1, [sp, #20]
 8005bf0:	a911      	add	r1, sp, #68	; 0x44
 8005bf2:	9103      	str	r1, [sp, #12]
 8005bf4:	2123      	movs	r1, #35	; 0x23
 8005bf6:	a808      	add	r0, sp, #32
 8005bf8:	1809      	adds	r1, r1, r0
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	9301      	str	r3, [sp, #4]
 8005bfe:	9200      	str	r2, [sp, #0]
 8005c00:	002b      	movs	r3, r5
 8005c02:	9704      	str	r7, [sp, #16]
 8005c04:	9102      	str	r1, [sp, #8]
 8005c06:	0032      	movs	r2, r6
 8005c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c0a:	f7ff fd1b 	bl	8005644 <__cvt>
 8005c0e:	0005      	movs	r5, r0
 8005c10:	e645      	b.n	800589e <_printf_float+0x122>
 8005c12:	46c0      	nop			; (mov r8, r8)

08005c14 <_printf_common>:
 8005c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c16:	0015      	movs	r5, r2
 8005c18:	9301      	str	r3, [sp, #4]
 8005c1a:	688a      	ldr	r2, [r1, #8]
 8005c1c:	690b      	ldr	r3, [r1, #16]
 8005c1e:	9000      	str	r0, [sp, #0]
 8005c20:	000c      	movs	r4, r1
 8005c22:	4293      	cmp	r3, r2
 8005c24:	da00      	bge.n	8005c28 <_printf_common+0x14>
 8005c26:	0013      	movs	r3, r2
 8005c28:	0022      	movs	r2, r4
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	3243      	adds	r2, #67	; 0x43
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	d001      	beq.n	8005c38 <_printf_common+0x24>
 8005c34:	3301      	adds	r3, #1
 8005c36:	602b      	str	r3, [r5, #0]
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	069b      	lsls	r3, r3, #26
 8005c3c:	d502      	bpl.n	8005c44 <_printf_common+0x30>
 8005c3e:	682b      	ldr	r3, [r5, #0]
 8005c40:	3302      	adds	r3, #2
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	2706      	movs	r7, #6
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	401f      	ands	r7, r3
 8005c4a:	d027      	beq.n	8005c9c <_printf_common+0x88>
 8005c4c:	0023      	movs	r3, r4
 8005c4e:	3343      	adds	r3, #67	; 0x43
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	1e5a      	subs	r2, r3, #1
 8005c54:	4193      	sbcs	r3, r2
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	0692      	lsls	r2, r2, #26
 8005c5a:	d430      	bmi.n	8005cbe <_printf_common+0xaa>
 8005c5c:	0022      	movs	r2, r4
 8005c5e:	9901      	ldr	r1, [sp, #4]
 8005c60:	3243      	adds	r2, #67	; 0x43
 8005c62:	9800      	ldr	r0, [sp, #0]
 8005c64:	9e08      	ldr	r6, [sp, #32]
 8005c66:	47b0      	blx	r6
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d025      	beq.n	8005cb8 <_printf_common+0xa4>
 8005c6c:	2306      	movs	r3, #6
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	682a      	ldr	r2, [r5, #0]
 8005c72:	68e1      	ldr	r1, [r4, #12]
 8005c74:	4003      	ands	r3, r0
 8005c76:	2500      	movs	r5, #0
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d103      	bne.n	8005c84 <_printf_common+0x70>
 8005c7c:	1a8d      	subs	r5, r1, r2
 8005c7e:	43eb      	mvns	r3, r5
 8005c80:	17db      	asrs	r3, r3, #31
 8005c82:	401d      	ands	r5, r3
 8005c84:	68a3      	ldr	r3, [r4, #8]
 8005c86:	6922      	ldr	r2, [r4, #16]
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	dd01      	ble.n	8005c90 <_printf_common+0x7c>
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	18ed      	adds	r5, r5, r3
 8005c90:	2700      	movs	r7, #0
 8005c92:	42bd      	cmp	r5, r7
 8005c94:	d120      	bne.n	8005cd8 <_printf_common+0xc4>
 8005c96:	2000      	movs	r0, #0
 8005c98:	e010      	b.n	8005cbc <_printf_common+0xa8>
 8005c9a:	3701      	adds	r7, #1
 8005c9c:	68e3      	ldr	r3, [r4, #12]
 8005c9e:	682a      	ldr	r2, [r5, #0]
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	42bb      	cmp	r3, r7
 8005ca4:	ddd2      	ble.n	8005c4c <_printf_common+0x38>
 8005ca6:	0022      	movs	r2, r4
 8005ca8:	2301      	movs	r3, #1
 8005caa:	3219      	adds	r2, #25
 8005cac:	9901      	ldr	r1, [sp, #4]
 8005cae:	9800      	ldr	r0, [sp, #0]
 8005cb0:	9e08      	ldr	r6, [sp, #32]
 8005cb2:	47b0      	blx	r6
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d1f0      	bne.n	8005c9a <_printf_common+0x86>
 8005cb8:	2001      	movs	r0, #1
 8005cba:	4240      	negs	r0, r0
 8005cbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cbe:	2030      	movs	r0, #48	; 0x30
 8005cc0:	18e1      	adds	r1, r4, r3
 8005cc2:	3143      	adds	r1, #67	; 0x43
 8005cc4:	7008      	strb	r0, [r1, #0]
 8005cc6:	0021      	movs	r1, r4
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	3145      	adds	r1, #69	; 0x45
 8005ccc:	7809      	ldrb	r1, [r1, #0]
 8005cce:	18a2      	adds	r2, r4, r2
 8005cd0:	3243      	adds	r2, #67	; 0x43
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	7011      	strb	r1, [r2, #0]
 8005cd6:	e7c1      	b.n	8005c5c <_printf_common+0x48>
 8005cd8:	0022      	movs	r2, r4
 8005cda:	2301      	movs	r3, #1
 8005cdc:	321a      	adds	r2, #26
 8005cde:	9901      	ldr	r1, [sp, #4]
 8005ce0:	9800      	ldr	r0, [sp, #0]
 8005ce2:	9e08      	ldr	r6, [sp, #32]
 8005ce4:	47b0      	blx	r6
 8005ce6:	1c43      	adds	r3, r0, #1
 8005ce8:	d0e6      	beq.n	8005cb8 <_printf_common+0xa4>
 8005cea:	3701      	adds	r7, #1
 8005cec:	e7d1      	b.n	8005c92 <_printf_common+0x7e>
	...

08005cf0 <_printf_i>:
 8005cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	9204      	str	r2, [sp, #16]
 8005cf6:	000a      	movs	r2, r1
 8005cf8:	3243      	adds	r2, #67	; 0x43
 8005cfa:	9305      	str	r3, [sp, #20]
 8005cfc:	9003      	str	r0, [sp, #12]
 8005cfe:	9202      	str	r2, [sp, #8]
 8005d00:	7e0a      	ldrb	r2, [r1, #24]
 8005d02:	000c      	movs	r4, r1
 8005d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d06:	2a6e      	cmp	r2, #110	; 0x6e
 8005d08:	d100      	bne.n	8005d0c <_printf_i+0x1c>
 8005d0a:	e086      	b.n	8005e1a <_printf_i+0x12a>
 8005d0c:	d81f      	bhi.n	8005d4e <_printf_i+0x5e>
 8005d0e:	2a63      	cmp	r2, #99	; 0x63
 8005d10:	d033      	beq.n	8005d7a <_printf_i+0x8a>
 8005d12:	d808      	bhi.n	8005d26 <_printf_i+0x36>
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	d100      	bne.n	8005d1a <_printf_i+0x2a>
 8005d18:	e08c      	b.n	8005e34 <_printf_i+0x144>
 8005d1a:	2a58      	cmp	r2, #88	; 0x58
 8005d1c:	d04d      	beq.n	8005dba <_printf_i+0xca>
 8005d1e:	0025      	movs	r5, r4
 8005d20:	3542      	adds	r5, #66	; 0x42
 8005d22:	702a      	strb	r2, [r5, #0]
 8005d24:	e030      	b.n	8005d88 <_printf_i+0x98>
 8005d26:	2a64      	cmp	r2, #100	; 0x64
 8005d28:	d001      	beq.n	8005d2e <_printf_i+0x3e>
 8005d2a:	2a69      	cmp	r2, #105	; 0x69
 8005d2c:	d1f7      	bne.n	8005d1e <_printf_i+0x2e>
 8005d2e:	6819      	ldr	r1, [r3, #0]
 8005d30:	6825      	ldr	r5, [r4, #0]
 8005d32:	1d0a      	adds	r2, r1, #4
 8005d34:	0628      	lsls	r0, r5, #24
 8005d36:	d529      	bpl.n	8005d8c <_printf_i+0x9c>
 8005d38:	6808      	ldr	r0, [r1, #0]
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	da03      	bge.n	8005d48 <_printf_i+0x58>
 8005d40:	232d      	movs	r3, #45	; 0x2d
 8005d42:	9a02      	ldr	r2, [sp, #8]
 8005d44:	4240      	negs	r0, r0
 8005d46:	7013      	strb	r3, [r2, #0]
 8005d48:	4e6b      	ldr	r6, [pc, #428]	; (8005ef8 <_printf_i+0x208>)
 8005d4a:	270a      	movs	r7, #10
 8005d4c:	e04f      	b.n	8005dee <_printf_i+0xfe>
 8005d4e:	2a73      	cmp	r2, #115	; 0x73
 8005d50:	d074      	beq.n	8005e3c <_printf_i+0x14c>
 8005d52:	d808      	bhi.n	8005d66 <_printf_i+0x76>
 8005d54:	2a6f      	cmp	r2, #111	; 0x6f
 8005d56:	d01f      	beq.n	8005d98 <_printf_i+0xa8>
 8005d58:	2a70      	cmp	r2, #112	; 0x70
 8005d5a:	d1e0      	bne.n	8005d1e <_printf_i+0x2e>
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	6809      	ldr	r1, [r1, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	6022      	str	r2, [r4, #0]
 8005d64:	e003      	b.n	8005d6e <_printf_i+0x7e>
 8005d66:	2a75      	cmp	r2, #117	; 0x75
 8005d68:	d016      	beq.n	8005d98 <_printf_i+0xa8>
 8005d6a:	2a78      	cmp	r2, #120	; 0x78
 8005d6c:	d1d7      	bne.n	8005d1e <_printf_i+0x2e>
 8005d6e:	0022      	movs	r2, r4
 8005d70:	2178      	movs	r1, #120	; 0x78
 8005d72:	3245      	adds	r2, #69	; 0x45
 8005d74:	7011      	strb	r1, [r2, #0]
 8005d76:	4e61      	ldr	r6, [pc, #388]	; (8005efc <_printf_i+0x20c>)
 8005d78:	e022      	b.n	8005dc0 <_printf_i+0xd0>
 8005d7a:	0025      	movs	r5, r4
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	3542      	adds	r5, #66	; 0x42
 8005d80:	1d11      	adds	r1, r2, #4
 8005d82:	6019      	str	r1, [r3, #0]
 8005d84:	6813      	ldr	r3, [r2, #0]
 8005d86:	702b      	strb	r3, [r5, #0]
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e065      	b.n	8005e58 <_printf_i+0x168>
 8005d8c:	6808      	ldr	r0, [r1, #0]
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	0669      	lsls	r1, r5, #25
 8005d92:	d5d3      	bpl.n	8005d3c <_printf_i+0x4c>
 8005d94:	b200      	sxth	r0, r0
 8005d96:	e7d1      	b.n	8005d3c <_printf_i+0x4c>
 8005d98:	6819      	ldr	r1, [r3, #0]
 8005d9a:	6825      	ldr	r5, [r4, #0]
 8005d9c:	1d08      	adds	r0, r1, #4
 8005d9e:	6018      	str	r0, [r3, #0]
 8005da0:	6808      	ldr	r0, [r1, #0]
 8005da2:	062e      	lsls	r6, r5, #24
 8005da4:	d505      	bpl.n	8005db2 <_printf_i+0xc2>
 8005da6:	4e54      	ldr	r6, [pc, #336]	; (8005ef8 <_printf_i+0x208>)
 8005da8:	2708      	movs	r7, #8
 8005daa:	2a6f      	cmp	r2, #111	; 0x6f
 8005dac:	d01b      	beq.n	8005de6 <_printf_i+0xf6>
 8005dae:	270a      	movs	r7, #10
 8005db0:	e019      	b.n	8005de6 <_printf_i+0xf6>
 8005db2:	066d      	lsls	r5, r5, #25
 8005db4:	d5f7      	bpl.n	8005da6 <_printf_i+0xb6>
 8005db6:	b280      	uxth	r0, r0
 8005db8:	e7f5      	b.n	8005da6 <_printf_i+0xb6>
 8005dba:	3145      	adds	r1, #69	; 0x45
 8005dbc:	4e4e      	ldr	r6, [pc, #312]	; (8005ef8 <_printf_i+0x208>)
 8005dbe:	700a      	strb	r2, [r1, #0]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	6822      	ldr	r2, [r4, #0]
 8005dc4:	1d01      	adds	r1, r0, #4
 8005dc6:	6800      	ldr	r0, [r0, #0]
 8005dc8:	6019      	str	r1, [r3, #0]
 8005dca:	0615      	lsls	r5, r2, #24
 8005dcc:	d521      	bpl.n	8005e12 <_printf_i+0x122>
 8005dce:	07d3      	lsls	r3, r2, #31
 8005dd0:	d502      	bpl.n	8005dd8 <_printf_i+0xe8>
 8005dd2:	2320      	movs	r3, #32
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	6022      	str	r2, [r4, #0]
 8005dd8:	2710      	movs	r7, #16
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d103      	bne.n	8005de6 <_printf_i+0xf6>
 8005dde:	2320      	movs	r3, #32
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	439a      	bics	r2, r3
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	0023      	movs	r3, r4
 8005de8:	2200      	movs	r2, #0
 8005dea:	3343      	adds	r3, #67	; 0x43
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	6863      	ldr	r3, [r4, #4]
 8005df0:	60a3      	str	r3, [r4, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	db58      	blt.n	8005ea8 <_printf_i+0x1b8>
 8005df6:	2204      	movs	r2, #4
 8005df8:	6821      	ldr	r1, [r4, #0]
 8005dfa:	4391      	bics	r1, r2
 8005dfc:	6021      	str	r1, [r4, #0]
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d154      	bne.n	8005eac <_printf_i+0x1bc>
 8005e02:	9d02      	ldr	r5, [sp, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d05a      	beq.n	8005ebe <_printf_i+0x1ce>
 8005e08:	0025      	movs	r5, r4
 8005e0a:	7833      	ldrb	r3, [r6, #0]
 8005e0c:	3542      	adds	r5, #66	; 0x42
 8005e0e:	702b      	strb	r3, [r5, #0]
 8005e10:	e055      	b.n	8005ebe <_printf_i+0x1ce>
 8005e12:	0655      	lsls	r5, r2, #25
 8005e14:	d5db      	bpl.n	8005dce <_printf_i+0xde>
 8005e16:	b280      	uxth	r0, r0
 8005e18:	e7d9      	b.n	8005dce <_printf_i+0xde>
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	680d      	ldr	r5, [r1, #0]
 8005e1e:	1d10      	adds	r0, r2, #4
 8005e20:	6949      	ldr	r1, [r1, #20]
 8005e22:	6018      	str	r0, [r3, #0]
 8005e24:	6813      	ldr	r3, [r2, #0]
 8005e26:	062e      	lsls	r6, r5, #24
 8005e28:	d501      	bpl.n	8005e2e <_printf_i+0x13e>
 8005e2a:	6019      	str	r1, [r3, #0]
 8005e2c:	e002      	b.n	8005e34 <_printf_i+0x144>
 8005e2e:	066d      	lsls	r5, r5, #25
 8005e30:	d5fb      	bpl.n	8005e2a <_printf_i+0x13a>
 8005e32:	8019      	strh	r1, [r3, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	9d02      	ldr	r5, [sp, #8]
 8005e38:	6123      	str	r3, [r4, #16]
 8005e3a:	e04f      	b.n	8005edc <_printf_i+0x1ec>
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	1d11      	adds	r1, r2, #4
 8005e40:	6019      	str	r1, [r3, #0]
 8005e42:	6815      	ldr	r5, [r2, #0]
 8005e44:	2100      	movs	r1, #0
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	0028      	movs	r0, r5
 8005e4a:	f002 fb1f 	bl	800848c <memchr>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d001      	beq.n	8005e56 <_printf_i+0x166>
 8005e52:	1b40      	subs	r0, r0, r5
 8005e54:	6060      	str	r0, [r4, #4]
 8005e56:	6863      	ldr	r3, [r4, #4]
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	9a02      	ldr	r2, [sp, #8]
 8005e5e:	7013      	strb	r3, [r2, #0]
 8005e60:	e03c      	b.n	8005edc <_printf_i+0x1ec>
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	002a      	movs	r2, r5
 8005e66:	9904      	ldr	r1, [sp, #16]
 8005e68:	9803      	ldr	r0, [sp, #12]
 8005e6a:	9d05      	ldr	r5, [sp, #20]
 8005e6c:	47a8      	blx	r5
 8005e6e:	1c43      	adds	r3, r0, #1
 8005e70:	d03e      	beq.n	8005ef0 <_printf_i+0x200>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	079b      	lsls	r3, r3, #30
 8005e76:	d415      	bmi.n	8005ea4 <_printf_i+0x1b4>
 8005e78:	9b07      	ldr	r3, [sp, #28]
 8005e7a:	68e0      	ldr	r0, [r4, #12]
 8005e7c:	4298      	cmp	r0, r3
 8005e7e:	da39      	bge.n	8005ef4 <_printf_i+0x204>
 8005e80:	0018      	movs	r0, r3
 8005e82:	e037      	b.n	8005ef4 <_printf_i+0x204>
 8005e84:	0022      	movs	r2, r4
 8005e86:	2301      	movs	r3, #1
 8005e88:	3219      	adds	r2, #25
 8005e8a:	9904      	ldr	r1, [sp, #16]
 8005e8c:	9803      	ldr	r0, [sp, #12]
 8005e8e:	9e05      	ldr	r6, [sp, #20]
 8005e90:	47b0      	blx	r6
 8005e92:	1c43      	adds	r3, r0, #1
 8005e94:	d02c      	beq.n	8005ef0 <_printf_i+0x200>
 8005e96:	3501      	adds	r5, #1
 8005e98:	68e3      	ldr	r3, [r4, #12]
 8005e9a:	9a07      	ldr	r2, [sp, #28]
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	42ab      	cmp	r3, r5
 8005ea0:	dcf0      	bgt.n	8005e84 <_printf_i+0x194>
 8005ea2:	e7e9      	b.n	8005e78 <_printf_i+0x188>
 8005ea4:	2500      	movs	r5, #0
 8005ea6:	e7f7      	b.n	8005e98 <_printf_i+0x1a8>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d0ad      	beq.n	8005e08 <_printf_i+0x118>
 8005eac:	9d02      	ldr	r5, [sp, #8]
 8005eae:	0039      	movs	r1, r7
 8005eb0:	f7fa f9c2 	bl	8000238 <__aeabi_uidivmod>
 8005eb4:	5c73      	ldrb	r3, [r6, r1]
 8005eb6:	3d01      	subs	r5, #1
 8005eb8:	702b      	strb	r3, [r5, #0]
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d1f7      	bne.n	8005eae <_printf_i+0x1be>
 8005ebe:	2f08      	cmp	r7, #8
 8005ec0:	d109      	bne.n	8005ed6 <_printf_i+0x1e6>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	07db      	lsls	r3, r3, #31
 8005ec6:	d506      	bpl.n	8005ed6 <_printf_i+0x1e6>
 8005ec8:	6863      	ldr	r3, [r4, #4]
 8005eca:	6922      	ldr	r2, [r4, #16]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	dc02      	bgt.n	8005ed6 <_printf_i+0x1e6>
 8005ed0:	2330      	movs	r3, #48	; 0x30
 8005ed2:	3d01      	subs	r5, #1
 8005ed4:	702b      	strb	r3, [r5, #0]
 8005ed6:	9b02      	ldr	r3, [sp, #8]
 8005ed8:	1b5b      	subs	r3, r3, r5
 8005eda:	6123      	str	r3, [r4, #16]
 8005edc:	9b05      	ldr	r3, [sp, #20]
 8005ede:	aa07      	add	r2, sp, #28
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	0021      	movs	r1, r4
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	9803      	ldr	r0, [sp, #12]
 8005ee8:	f7ff fe94 	bl	8005c14 <_printf_common>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d1b8      	bne.n	8005e62 <_printf_i+0x172>
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	4240      	negs	r0, r0
 8005ef4:	b009      	add	sp, #36	; 0x24
 8005ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef8:	080092da 	.word	0x080092da
 8005efc:	080092eb 	.word	0x080092eb

08005f00 <_scanf_float>:
 8005f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f02:	b08b      	sub	sp, #44	; 0x2c
 8005f04:	9002      	str	r0, [sp, #8]
 8005f06:	9200      	str	r2, [sp, #0]
 8005f08:	2000      	movs	r0, #0
 8005f0a:	22ae      	movs	r2, #174	; 0xae
 8005f0c:	9305      	str	r3, [sp, #20]
 8005f0e:	688b      	ldr	r3, [r1, #8]
 8005f10:	000e      	movs	r6, r1
 8005f12:	1e59      	subs	r1, r3, #1
 8005f14:	0052      	lsls	r2, r2, #1
 8005f16:	9004      	str	r0, [sp, #16]
 8005f18:	4291      	cmp	r1, r2
 8005f1a:	d905      	bls.n	8005f28 <_scanf_float+0x28>
 8005f1c:	3b5e      	subs	r3, #94	; 0x5e
 8005f1e:	3bff      	subs	r3, #255	; 0xff
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	235e      	movs	r3, #94	; 0x5e
 8005f24:	33ff      	adds	r3, #255	; 0xff
 8005f26:	60b3      	str	r3, [r6, #8]
 8005f28:	23f0      	movs	r3, #240	; 0xf0
 8005f2a:	6832      	ldr	r2, [r6, #0]
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	6033      	str	r3, [r6, #0]
 8005f32:	0033      	movs	r3, r6
 8005f34:	2700      	movs	r7, #0
 8005f36:	331c      	adds	r3, #28
 8005f38:	001d      	movs	r5, r3
 8005f3a:	003c      	movs	r4, r7
 8005f3c:	9303      	str	r3, [sp, #12]
 8005f3e:	9708      	str	r7, [sp, #32]
 8005f40:	9707      	str	r7, [sp, #28]
 8005f42:	9701      	str	r7, [sp, #4]
 8005f44:	9706      	str	r7, [sp, #24]
 8005f46:	68b2      	ldr	r2, [r6, #8]
 8005f48:	2a00      	cmp	r2, #0
 8005f4a:	d013      	beq.n	8005f74 <_scanf_float+0x74>
 8005f4c:	9b00      	ldr	r3, [sp, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	9309      	str	r3, [sp, #36]	; 0x24
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b49      	cmp	r3, #73	; 0x49
 8005f56:	d100      	bne.n	8005f5a <_scanf_float+0x5a>
 8005f58:	e07c      	b.n	8006054 <_scanf_float+0x154>
 8005f5a:	d854      	bhi.n	8006006 <_scanf_float+0x106>
 8005f5c:	2b39      	cmp	r3, #57	; 0x39
 8005f5e:	d847      	bhi.n	8005ff0 <_scanf_float+0xf0>
 8005f60:	2b31      	cmp	r3, #49	; 0x31
 8005f62:	d300      	bcc.n	8005f66 <_scanf_float+0x66>
 8005f64:	e094      	b.n	8006090 <_scanf_float+0x190>
 8005f66:	2b2d      	cmp	r3, #45	; 0x2d
 8005f68:	d100      	bne.n	8005f6c <_scanf_float+0x6c>
 8005f6a:	e09c      	b.n	80060a6 <_scanf_float+0x1a6>
 8005f6c:	d817      	bhi.n	8005f9e <_scanf_float+0x9e>
 8005f6e:	2b2b      	cmp	r3, #43	; 0x2b
 8005f70:	d100      	bne.n	8005f74 <_scanf_float+0x74>
 8005f72:	e098      	b.n	80060a6 <_scanf_float+0x1a6>
 8005f74:	9b01      	ldr	r3, [sp, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <_scanf_float+0x82>
 8005f7a:	6832      	ldr	r2, [r6, #0]
 8005f7c:	4b9b      	ldr	r3, [pc, #620]	; (80061ec <_scanf_float+0x2ec>)
 8005f7e:	4013      	ands	r3, r2
 8005f80:	6033      	str	r3, [r6, #0]
 8005f82:	3c01      	subs	r4, #1
 8005f84:	2c01      	cmp	r4, #1
 8005f86:	d900      	bls.n	8005f8a <_scanf_float+0x8a>
 8005f88:	e0ee      	b.n	8006168 <_scanf_float+0x268>
 8005f8a:	24be      	movs	r4, #190	; 0xbe
 8005f8c:	0064      	lsls	r4, r4, #1
 8005f8e:	9b03      	ldr	r3, [sp, #12]
 8005f90:	429d      	cmp	r5, r3
 8005f92:	d900      	bls.n	8005f96 <_scanf_float+0x96>
 8005f94:	e0de      	b.n	8006154 <_scanf_float+0x254>
 8005f96:	2701      	movs	r7, #1
 8005f98:	0038      	movs	r0, r7
 8005f9a:	b00b      	add	sp, #44	; 0x2c
 8005f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005fa0:	d100      	bne.n	8005fa4 <_scanf_float+0xa4>
 8005fa2:	e0a2      	b.n	80060ea <_scanf_float+0x1ea>
 8005fa4:	2b30      	cmp	r3, #48	; 0x30
 8005fa6:	d1e5      	bne.n	8005f74 <_scanf_float+0x74>
 8005fa8:	6831      	ldr	r1, [r6, #0]
 8005faa:	05c8      	lsls	r0, r1, #23
 8005fac:	d570      	bpl.n	8006090 <_scanf_float+0x190>
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	4399      	bics	r1, r3
 8005fb2:	9b01      	ldr	r3, [sp, #4]
 8005fb4:	6031      	str	r1, [r6, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	9b04      	ldr	r3, [sp, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <_scanf_float+0xc8>
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	3201      	adds	r2, #1
 8005fc4:	9304      	str	r3, [sp, #16]
 8005fc6:	60b2      	str	r2, [r6, #8]
 8005fc8:	68b3      	ldr	r3, [r6, #8]
 8005fca:	9a00      	ldr	r2, [sp, #0]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	60b3      	str	r3, [r6, #8]
 8005fd0:	6933      	ldr	r3, [r6, #16]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	6133      	str	r3, [r6, #16]
 8005fd6:	9b00      	ldr	r3, [sp, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	9309      	str	r3, [sp, #36]	; 0x24
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	6053      	str	r3, [r2, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	dc00      	bgt.n	8005fe6 <_scanf_float+0xe6>
 8005fe4:	e0ac      	b.n	8006140 <_scanf_float+0x240>
 8005fe6:	6813      	ldr	r3, [r2, #0]
 8005fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fea:	3301      	adds	r3, #1
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e7aa      	b.n	8005f46 <_scanf_float+0x46>
 8005ff0:	2b45      	cmp	r3, #69	; 0x45
 8005ff2:	d100      	bne.n	8005ff6 <_scanf_float+0xf6>
 8005ff4:	e083      	b.n	80060fe <_scanf_float+0x1fe>
 8005ff6:	2b46      	cmp	r3, #70	; 0x46
 8005ff8:	d06d      	beq.n	80060d6 <_scanf_float+0x1d6>
 8005ffa:	2b41      	cmp	r3, #65	; 0x41
 8005ffc:	d1ba      	bne.n	8005f74 <_scanf_float+0x74>
 8005ffe:	2c01      	cmp	r4, #1
 8006000:	d1b8      	bne.n	8005f74 <_scanf_float+0x74>
 8006002:	2402      	movs	r4, #2
 8006004:	e04c      	b.n	80060a0 <_scanf_float+0x1a0>
 8006006:	2b65      	cmp	r3, #101	; 0x65
 8006008:	d079      	beq.n	80060fe <_scanf_float+0x1fe>
 800600a:	d81b      	bhi.n	8006044 <_scanf_float+0x144>
 800600c:	2b54      	cmp	r3, #84	; 0x54
 800600e:	d067      	beq.n	80060e0 <_scanf_float+0x1e0>
 8006010:	d813      	bhi.n	800603a <_scanf_float+0x13a>
 8006012:	2b4e      	cmp	r3, #78	; 0x4e
 8006014:	d1ae      	bne.n	8005f74 <_scanf_float+0x74>
 8006016:	2c00      	cmp	r4, #0
 8006018:	d14c      	bne.n	80060b4 <_scanf_float+0x1b4>
 800601a:	9a01      	ldr	r2, [sp, #4]
 800601c:	2a00      	cmp	r2, #0
 800601e:	d14b      	bne.n	80060b8 <_scanf_float+0x1b8>
 8006020:	21e0      	movs	r1, #224	; 0xe0
 8006022:	20e0      	movs	r0, #224	; 0xe0
 8006024:	6832      	ldr	r2, [r6, #0]
 8006026:	00c9      	lsls	r1, r1, #3
 8006028:	4011      	ands	r1, r2
 800602a:	00c0      	lsls	r0, r0, #3
 800602c:	4281      	cmp	r1, r0
 800602e:	d143      	bne.n	80060b8 <_scanf_float+0x1b8>
 8006030:	496f      	ldr	r1, [pc, #444]	; (80061f0 <_scanf_float+0x2f0>)
 8006032:	3401      	adds	r4, #1
 8006034:	400a      	ands	r2, r1
 8006036:	6032      	str	r2, [r6, #0]
 8006038:	e032      	b.n	80060a0 <_scanf_float+0x1a0>
 800603a:	2b59      	cmp	r3, #89	; 0x59
 800603c:	d023      	beq.n	8006086 <_scanf_float+0x186>
 800603e:	2b61      	cmp	r3, #97	; 0x61
 8006040:	d0dd      	beq.n	8005ffe <_scanf_float+0xfe>
 8006042:	e797      	b.n	8005f74 <_scanf_float+0x74>
 8006044:	2b6e      	cmp	r3, #110	; 0x6e
 8006046:	d0e6      	beq.n	8006016 <_scanf_float+0x116>
 8006048:	d818      	bhi.n	800607c <_scanf_float+0x17c>
 800604a:	2b66      	cmp	r3, #102	; 0x66
 800604c:	d043      	beq.n	80060d6 <_scanf_float+0x1d6>
 800604e:	2b69      	cmp	r3, #105	; 0x69
 8006050:	d000      	beq.n	8006054 <_scanf_float+0x154>
 8006052:	e78f      	b.n	8005f74 <_scanf_float+0x74>
 8006054:	2f00      	cmp	r7, #0
 8006056:	d137      	bne.n	80060c8 <_scanf_float+0x1c8>
 8006058:	9a01      	ldr	r2, [sp, #4]
 800605a:	2a00      	cmp	r2, #0
 800605c:	d000      	beq.n	8006060 <_scanf_float+0x160>
 800605e:	e78c      	b.n	8005f7a <_scanf_float+0x7a>
 8006060:	21e0      	movs	r1, #224	; 0xe0
 8006062:	20e0      	movs	r0, #224	; 0xe0
 8006064:	6832      	ldr	r2, [r6, #0]
 8006066:	00c9      	lsls	r1, r1, #3
 8006068:	4011      	ands	r1, r2
 800606a:	00c0      	lsls	r0, r0, #3
 800606c:	4281      	cmp	r1, r0
 800606e:	d000      	beq.n	8006072 <_scanf_float+0x172>
 8006070:	e787      	b.n	8005f82 <_scanf_float+0x82>
 8006072:	495f      	ldr	r1, [pc, #380]	; (80061f0 <_scanf_float+0x2f0>)
 8006074:	3701      	adds	r7, #1
 8006076:	400a      	ands	r2, r1
 8006078:	6032      	str	r2, [r6, #0]
 800607a:	e011      	b.n	80060a0 <_scanf_float+0x1a0>
 800607c:	2b74      	cmp	r3, #116	; 0x74
 800607e:	d02f      	beq.n	80060e0 <_scanf_float+0x1e0>
 8006080:	2b79      	cmp	r3, #121	; 0x79
 8006082:	d000      	beq.n	8006086 <_scanf_float+0x186>
 8006084:	e776      	b.n	8005f74 <_scanf_float+0x74>
 8006086:	2f07      	cmp	r7, #7
 8006088:	d000      	beq.n	800608c <_scanf_float+0x18c>
 800608a:	e773      	b.n	8005f74 <_scanf_float+0x74>
 800608c:	2708      	movs	r7, #8
 800608e:	e007      	b.n	80060a0 <_scanf_float+0x1a0>
 8006090:	19e2      	adds	r2, r4, r7
 8006092:	2a00      	cmp	r2, #0
 8006094:	d000      	beq.n	8006098 <_scanf_float+0x198>
 8006096:	e76d      	b.n	8005f74 <_scanf_float+0x74>
 8006098:	4a56      	ldr	r2, [pc, #344]	; (80061f4 <_scanf_float+0x2f4>)
 800609a:	6831      	ldr	r1, [r6, #0]
 800609c:	400a      	ands	r2, r1
 800609e:	6032      	str	r2, [r6, #0]
 80060a0:	702b      	strb	r3, [r5, #0]
 80060a2:	3501      	adds	r5, #1
 80060a4:	e790      	b.n	8005fc8 <_scanf_float+0xc8>
 80060a6:	2180      	movs	r1, #128	; 0x80
 80060a8:	6832      	ldr	r2, [r6, #0]
 80060aa:	420a      	tst	r2, r1
 80060ac:	d100      	bne.n	80060b0 <_scanf_float+0x1b0>
 80060ae:	e761      	b.n	8005f74 <_scanf_float+0x74>
 80060b0:	438a      	bics	r2, r1
 80060b2:	e7f4      	b.n	800609e <_scanf_float+0x19e>
 80060b4:	2c02      	cmp	r4, #2
 80060b6:	d041      	beq.n	800613c <_scanf_float+0x23c>
 80060b8:	2f01      	cmp	r7, #1
 80060ba:	d002      	beq.n	80060c2 <_scanf_float+0x1c2>
 80060bc:	2f04      	cmp	r7, #4
 80060be:	d000      	beq.n	80060c2 <_scanf_float+0x1c2>
 80060c0:	e758      	b.n	8005f74 <_scanf_float+0x74>
 80060c2:	3701      	adds	r7, #1
 80060c4:	b2ff      	uxtb	r7, r7
 80060c6:	e7eb      	b.n	80060a0 <_scanf_float+0x1a0>
 80060c8:	2102      	movs	r1, #2
 80060ca:	1efa      	subs	r2, r7, #3
 80060cc:	438a      	bics	r2, r1
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	d0f6      	beq.n	80060c2 <_scanf_float+0x1c2>
 80060d4:	e74e      	b.n	8005f74 <_scanf_float+0x74>
 80060d6:	2f02      	cmp	r7, #2
 80060d8:	d000      	beq.n	80060dc <_scanf_float+0x1dc>
 80060da:	e74b      	b.n	8005f74 <_scanf_float+0x74>
 80060dc:	2703      	movs	r7, #3
 80060de:	e7df      	b.n	80060a0 <_scanf_float+0x1a0>
 80060e0:	2f06      	cmp	r7, #6
 80060e2:	d000      	beq.n	80060e6 <_scanf_float+0x1e6>
 80060e4:	e746      	b.n	8005f74 <_scanf_float+0x74>
 80060e6:	2707      	movs	r7, #7
 80060e8:	e7da      	b.n	80060a0 <_scanf_float+0x1a0>
 80060ea:	6832      	ldr	r2, [r6, #0]
 80060ec:	0591      	lsls	r1, r2, #22
 80060ee:	d400      	bmi.n	80060f2 <_scanf_float+0x1f2>
 80060f0:	e740      	b.n	8005f74 <_scanf_float+0x74>
 80060f2:	4941      	ldr	r1, [pc, #260]	; (80061f8 <_scanf_float+0x2f8>)
 80060f4:	400a      	ands	r2, r1
 80060f6:	6032      	str	r2, [r6, #0]
 80060f8:	9a01      	ldr	r2, [sp, #4]
 80060fa:	9206      	str	r2, [sp, #24]
 80060fc:	e7d0      	b.n	80060a0 <_scanf_float+0x1a0>
 80060fe:	21a0      	movs	r1, #160	; 0xa0
 8006100:	2080      	movs	r0, #128	; 0x80
 8006102:	6832      	ldr	r2, [r6, #0]
 8006104:	00c9      	lsls	r1, r1, #3
 8006106:	4011      	ands	r1, r2
 8006108:	00c0      	lsls	r0, r0, #3
 800610a:	4281      	cmp	r1, r0
 800610c:	d006      	beq.n	800611c <_scanf_float+0x21c>
 800610e:	4202      	tst	r2, r0
 8006110:	d100      	bne.n	8006114 <_scanf_float+0x214>
 8006112:	e72f      	b.n	8005f74 <_scanf_float+0x74>
 8006114:	9901      	ldr	r1, [sp, #4]
 8006116:	2900      	cmp	r1, #0
 8006118:	d100      	bne.n	800611c <_scanf_float+0x21c>
 800611a:	e732      	b.n	8005f82 <_scanf_float+0x82>
 800611c:	0591      	lsls	r1, r2, #22
 800611e:	d404      	bmi.n	800612a <_scanf_float+0x22a>
 8006120:	9901      	ldr	r1, [sp, #4]
 8006122:	9806      	ldr	r0, [sp, #24]
 8006124:	9508      	str	r5, [sp, #32]
 8006126:	1a09      	subs	r1, r1, r0
 8006128:	9107      	str	r1, [sp, #28]
 800612a:	4931      	ldr	r1, [pc, #196]	; (80061f0 <_scanf_float+0x2f0>)
 800612c:	400a      	ands	r2, r1
 800612e:	21c0      	movs	r1, #192	; 0xc0
 8006130:	0049      	lsls	r1, r1, #1
 8006132:	430a      	orrs	r2, r1
 8006134:	6032      	str	r2, [r6, #0]
 8006136:	2200      	movs	r2, #0
 8006138:	9201      	str	r2, [sp, #4]
 800613a:	e7b1      	b.n	80060a0 <_scanf_float+0x1a0>
 800613c:	2403      	movs	r4, #3
 800613e:	e7af      	b.n	80060a0 <_scanf_float+0x1a0>
 8006140:	23c0      	movs	r3, #192	; 0xc0
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	58f3      	ldr	r3, [r6, r3]
 8006146:	9900      	ldr	r1, [sp, #0]
 8006148:	9802      	ldr	r0, [sp, #8]
 800614a:	4798      	blx	r3
 800614c:	2800      	cmp	r0, #0
 800614e:	d100      	bne.n	8006152 <_scanf_float+0x252>
 8006150:	e6f9      	b.n	8005f46 <_scanf_float+0x46>
 8006152:	e70f      	b.n	8005f74 <_scanf_float+0x74>
 8006154:	3d01      	subs	r5, #1
 8006156:	5933      	ldr	r3, [r6, r4]
 8006158:	7829      	ldrb	r1, [r5, #0]
 800615a:	9a00      	ldr	r2, [sp, #0]
 800615c:	9802      	ldr	r0, [sp, #8]
 800615e:	4798      	blx	r3
 8006160:	6933      	ldr	r3, [r6, #16]
 8006162:	3b01      	subs	r3, #1
 8006164:	6133      	str	r3, [r6, #16]
 8006166:	e712      	b.n	8005f8e <_scanf_float+0x8e>
 8006168:	1e7b      	subs	r3, r7, #1
 800616a:	2b06      	cmp	r3, #6
 800616c:	d826      	bhi.n	80061bc <_scanf_float+0x2bc>
 800616e:	2f02      	cmp	r7, #2
 8006170:	d839      	bhi.n	80061e6 <_scanf_float+0x2e6>
 8006172:	24be      	movs	r4, #190	; 0xbe
 8006174:	0064      	lsls	r4, r4, #1
 8006176:	9b03      	ldr	r3, [sp, #12]
 8006178:	429d      	cmp	r5, r3
 800617a:	d800      	bhi.n	800617e <_scanf_float+0x27e>
 800617c:	e70b      	b.n	8005f96 <_scanf_float+0x96>
 800617e:	3d01      	subs	r5, #1
 8006180:	5933      	ldr	r3, [r6, r4]
 8006182:	7829      	ldrb	r1, [r5, #0]
 8006184:	9a00      	ldr	r2, [sp, #0]
 8006186:	9802      	ldr	r0, [sp, #8]
 8006188:	4798      	blx	r3
 800618a:	6933      	ldr	r3, [r6, #16]
 800618c:	3b01      	subs	r3, #1
 800618e:	6133      	str	r3, [r6, #16]
 8006190:	e7f1      	b.n	8006176 <_scanf_float+0x276>
 8006192:	9b04      	ldr	r3, [sp, #16]
 8006194:	9a00      	ldr	r2, [sp, #0]
 8006196:	3b01      	subs	r3, #1
 8006198:	9304      	str	r3, [sp, #16]
 800619a:	7819      	ldrb	r1, [r3, #0]
 800619c:	23be      	movs	r3, #190	; 0xbe
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	58f3      	ldr	r3, [r6, r3]
 80061a2:	9802      	ldr	r0, [sp, #8]
 80061a4:	9309      	str	r3, [sp, #36]	; 0x24
 80061a6:	4798      	blx	r3
 80061a8:	6933      	ldr	r3, [r6, #16]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	6133      	str	r3, [r6, #16]
 80061ae:	3c01      	subs	r4, #1
 80061b0:	b2e4      	uxtb	r4, r4
 80061b2:	2c02      	cmp	r4, #2
 80061b4:	d1ed      	bne.n	8006192 <_scanf_float+0x292>
 80061b6:	3f03      	subs	r7, #3
 80061b8:	b2ff      	uxtb	r7, r7
 80061ba:	1bed      	subs	r5, r5, r7
 80061bc:	6833      	ldr	r3, [r6, #0]
 80061be:	05da      	lsls	r2, r3, #23
 80061c0:	d537      	bpl.n	8006232 <_scanf_float+0x332>
 80061c2:	055b      	lsls	r3, r3, #21
 80061c4:	d51a      	bpl.n	80061fc <_scanf_float+0x2fc>
 80061c6:	24be      	movs	r4, #190	; 0xbe
 80061c8:	0064      	lsls	r4, r4, #1
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	429d      	cmp	r5, r3
 80061ce:	d800      	bhi.n	80061d2 <_scanf_float+0x2d2>
 80061d0:	e6e1      	b.n	8005f96 <_scanf_float+0x96>
 80061d2:	3d01      	subs	r5, #1
 80061d4:	5933      	ldr	r3, [r6, r4]
 80061d6:	7829      	ldrb	r1, [r5, #0]
 80061d8:	9a00      	ldr	r2, [sp, #0]
 80061da:	9802      	ldr	r0, [sp, #8]
 80061dc:	4798      	blx	r3
 80061de:	6933      	ldr	r3, [r6, #16]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	6133      	str	r3, [r6, #16]
 80061e4:	e7f1      	b.n	80061ca <_scanf_float+0x2ca>
 80061e6:	003c      	movs	r4, r7
 80061e8:	9504      	str	r5, [sp, #16]
 80061ea:	e7e0      	b.n	80061ae <_scanf_float+0x2ae>
 80061ec:	fffffeff 	.word	0xfffffeff
 80061f0:	fffff87f 	.word	0xfffff87f
 80061f4:	fffffe7f 	.word	0xfffffe7f
 80061f8:	fffffd7f 	.word	0xfffffd7f
 80061fc:	6933      	ldr	r3, [r6, #16]
 80061fe:	1e6c      	subs	r4, r5, #1
 8006200:	7821      	ldrb	r1, [r4, #0]
 8006202:	3b01      	subs	r3, #1
 8006204:	6133      	str	r3, [r6, #16]
 8006206:	2965      	cmp	r1, #101	; 0x65
 8006208:	d00c      	beq.n	8006224 <_scanf_float+0x324>
 800620a:	2945      	cmp	r1, #69	; 0x45
 800620c:	d00a      	beq.n	8006224 <_scanf_float+0x324>
 800620e:	23be      	movs	r3, #190	; 0xbe
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	58f3      	ldr	r3, [r6, r3]
 8006214:	9a00      	ldr	r2, [sp, #0]
 8006216:	9802      	ldr	r0, [sp, #8]
 8006218:	4798      	blx	r3
 800621a:	6933      	ldr	r3, [r6, #16]
 800621c:	1eac      	subs	r4, r5, #2
 800621e:	3b01      	subs	r3, #1
 8006220:	7821      	ldrb	r1, [r4, #0]
 8006222:	6133      	str	r3, [r6, #16]
 8006224:	23be      	movs	r3, #190	; 0xbe
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	58f3      	ldr	r3, [r6, r3]
 800622a:	9a00      	ldr	r2, [sp, #0]
 800622c:	9802      	ldr	r0, [sp, #8]
 800622e:	4798      	blx	r3
 8006230:	0025      	movs	r5, r4
 8006232:	2710      	movs	r7, #16
 8006234:	6833      	ldr	r3, [r6, #0]
 8006236:	401f      	ands	r7, r3
 8006238:	d15b      	bne.n	80062f2 <_scanf_float+0x3f2>
 800623a:	23c0      	movs	r3, #192	; 0xc0
 800623c:	702f      	strb	r7, [r5, #0]
 800623e:	6832      	ldr	r2, [r6, #0]
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	4013      	ands	r3, r2
 8006244:	2280      	movs	r2, #128	; 0x80
 8006246:	00d2      	lsls	r2, r2, #3
 8006248:	4293      	cmp	r3, r2
 800624a:	d11b      	bne.n	8006284 <_scanf_float+0x384>
 800624c:	9a06      	ldr	r2, [sp, #24]
 800624e:	9b01      	ldr	r3, [sp, #4]
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	425a      	negs	r2, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d122      	bne.n	800629e <_scanf_float+0x39e>
 8006258:	2200      	movs	r2, #0
 800625a:	9903      	ldr	r1, [sp, #12]
 800625c:	9802      	ldr	r0, [sp, #8]
 800625e:	f000 feb1 	bl	8006fc4 <_strtod_r>
 8006262:	9b05      	ldr	r3, [sp, #20]
 8006264:	0004      	movs	r4, r0
 8006266:	6830      	ldr	r0, [r6, #0]
 8006268:	000d      	movs	r5, r1
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	0782      	lsls	r2, r0, #30
 800626e:	d523      	bpl.n	80062b8 <_scanf_float+0x3b8>
 8006270:	1d1a      	adds	r2, r3, #4
 8006272:	9905      	ldr	r1, [sp, #20]
 8006274:	600a      	str	r2, [r1, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	601c      	str	r4, [r3, #0]
 800627a:	605d      	str	r5, [r3, #4]
 800627c:	68f3      	ldr	r3, [r6, #12]
 800627e:	3301      	adds	r3, #1
 8006280:	60f3      	str	r3, [r6, #12]
 8006282:	e689      	b.n	8005f98 <_scanf_float+0x98>
 8006284:	9b07      	ldr	r3, [sp, #28]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0e6      	beq.n	8006258 <_scanf_float+0x358>
 800628a:	9b08      	ldr	r3, [sp, #32]
 800628c:	003a      	movs	r2, r7
 800628e:	1c59      	adds	r1, r3, #1
 8006290:	9802      	ldr	r0, [sp, #8]
 8006292:	230a      	movs	r3, #10
 8006294:	f000 ff26 	bl	80070e4 <_strtol_r>
 8006298:	9b07      	ldr	r3, [sp, #28]
 800629a:	9d08      	ldr	r5, [sp, #32]
 800629c:	1ac2      	subs	r2, r0, r3
 800629e:	0033      	movs	r3, r6
 80062a0:	3370      	adds	r3, #112	; 0x70
 80062a2:	33ff      	adds	r3, #255	; 0xff
 80062a4:	429d      	cmp	r5, r3
 80062a6:	d302      	bcc.n	80062ae <_scanf_float+0x3ae>
 80062a8:	0035      	movs	r5, r6
 80062aa:	356f      	adds	r5, #111	; 0x6f
 80062ac:	35ff      	adds	r5, #255	; 0xff
 80062ae:	4912      	ldr	r1, [pc, #72]	; (80062f8 <_scanf_float+0x3f8>)
 80062b0:	0028      	movs	r0, r5
 80062b2:	f000 f827 	bl	8006304 <siprintf>
 80062b6:	e7cf      	b.n	8006258 <_scanf_float+0x358>
 80062b8:	2104      	movs	r1, #4
 80062ba:	4008      	ands	r0, r1
 80062bc:	1d1a      	adds	r2, r3, #4
 80062be:	9001      	str	r0, [sp, #4]
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d1d6      	bne.n	8006272 <_scanf_float+0x372>
 80062c4:	9905      	ldr	r1, [sp, #20]
 80062c6:	0020      	movs	r0, r4
 80062c8:	600a      	str	r2, [r1, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	0022      	movs	r2, r4
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	0029      	movs	r1, r5
 80062d2:	002b      	movs	r3, r5
 80062d4:	f7fb ffbe 	bl	8002254 <__aeabi_dcmpun>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d005      	beq.n	80062e8 <_scanf_float+0x3e8>
 80062dc:	9801      	ldr	r0, [sp, #4]
 80062de:	f000 f80d 	bl	80062fc <nanf>
 80062e2:	9b00      	ldr	r3, [sp, #0]
 80062e4:	6018      	str	r0, [r3, #0]
 80062e6:	e7c9      	b.n	800627c <_scanf_float+0x37c>
 80062e8:	0020      	movs	r0, r4
 80062ea:	0029      	movs	r1, r5
 80062ec:	f7fc f8c2 	bl	8002474 <__aeabi_d2f>
 80062f0:	e7f7      	b.n	80062e2 <_scanf_float+0x3e2>
 80062f2:	2700      	movs	r7, #0
 80062f4:	e650      	b.n	8005f98 <_scanf_float+0x98>
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	080092fc 	.word	0x080092fc

080062fc <nanf>:
 80062fc:	4800      	ldr	r0, [pc, #0]	; (8006300 <nanf+0x4>)
 80062fe:	4770      	bx	lr
 8006300:	7fc00000 	.word	0x7fc00000

08006304 <siprintf>:
 8006304:	b40e      	push	{r1, r2, r3}
 8006306:	b500      	push	{lr}
 8006308:	490b      	ldr	r1, [pc, #44]	; (8006338 <siprintf+0x34>)
 800630a:	b09c      	sub	sp, #112	; 0x70
 800630c:	ab1d      	add	r3, sp, #116	; 0x74
 800630e:	9002      	str	r0, [sp, #8]
 8006310:	9006      	str	r0, [sp, #24]
 8006312:	9107      	str	r1, [sp, #28]
 8006314:	9104      	str	r1, [sp, #16]
 8006316:	4809      	ldr	r0, [pc, #36]	; (800633c <siprintf+0x38>)
 8006318:	4909      	ldr	r1, [pc, #36]	; (8006340 <siprintf+0x3c>)
 800631a:	cb04      	ldmia	r3!, {r2}
 800631c:	9105      	str	r1, [sp, #20]
 800631e:	6800      	ldr	r0, [r0, #0]
 8006320:	a902      	add	r1, sp, #8
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	f002 fdd4 	bl	8008ed0 <_svfiprintf_r>
 8006328:	2300      	movs	r3, #0
 800632a:	9a02      	ldr	r2, [sp, #8]
 800632c:	7013      	strb	r3, [r2, #0]
 800632e:	b01c      	add	sp, #112	; 0x70
 8006330:	bc08      	pop	{r3}
 8006332:	b003      	add	sp, #12
 8006334:	4718      	bx	r3
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	7fffffff 	.word	0x7fffffff
 800633c:	2000000c 	.word	0x2000000c
 8006340:	ffff0208 	.word	0xffff0208

08006344 <sulp>:
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	0016      	movs	r6, r2
 8006348:	000d      	movs	r5, r1
 800634a:	f002 fb83 	bl	8008a54 <__ulp>
 800634e:	2e00      	cmp	r6, #0
 8006350:	d00d      	beq.n	800636e <sulp+0x2a>
 8006352:	236b      	movs	r3, #107	; 0x6b
 8006354:	006a      	lsls	r2, r5, #1
 8006356:	0d52      	lsrs	r2, r2, #21
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	2b00      	cmp	r3, #0
 800635c:	dd07      	ble.n	800636e <sulp+0x2a>
 800635e:	2400      	movs	r4, #0
 8006360:	4a03      	ldr	r2, [pc, #12]	; (8006370 <sulp+0x2c>)
 8006362:	051b      	lsls	r3, r3, #20
 8006364:	189d      	adds	r5, r3, r2
 8006366:	002b      	movs	r3, r5
 8006368:	0022      	movs	r2, r4
 800636a:	f7fb f9b9 	bl	80016e0 <__aeabi_dmul>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	3ff00000 	.word	0x3ff00000

08006374 <_strtod_l>:
 8006374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006376:	b0a7      	sub	sp, #156	; 0x9c
 8006378:	9307      	str	r3, [sp, #28]
 800637a:	2300      	movs	r3, #0
 800637c:	9004      	str	r0, [sp, #16]
 800637e:	9807      	ldr	r0, [sp, #28]
 8006380:	9322      	str	r3, [sp, #136]	; 0x88
 8006382:	9106      	str	r1, [sp, #24]
 8006384:	921d      	str	r2, [sp, #116]	; 0x74
 8006386:	f002 f857 	bl	8008438 <__localeconv_l>
 800638a:	0005      	movs	r5, r0
 800638c:	6800      	ldr	r0, [r0, #0]
 800638e:	f7f9 febb 	bl	8000108 <strlen>
 8006392:	2600      	movs	r6, #0
 8006394:	2700      	movs	r7, #0
 8006396:	9b06      	ldr	r3, [sp, #24]
 8006398:	9005      	str	r0, [sp, #20]
 800639a:	9321      	str	r3, [sp, #132]	; 0x84
 800639c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800639e:	781a      	ldrb	r2, [r3, #0]
 80063a0:	2a0d      	cmp	r2, #13
 80063a2:	d839      	bhi.n	8006418 <_strtod_l+0xa4>
 80063a4:	2a09      	cmp	r2, #9
 80063a6:	d23d      	bcs.n	8006424 <_strtod_l+0xb0>
 80063a8:	2a00      	cmp	r2, #0
 80063aa:	d044      	beq.n	8006436 <_strtod_l+0xc2>
 80063ac:	2300      	movs	r3, #0
 80063ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80063b0:	2200      	movs	r2, #0
 80063b2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80063b4:	920c      	str	r2, [sp, #48]	; 0x30
 80063b6:	7823      	ldrb	r3, [r4, #0]
 80063b8:	2b30      	cmp	r3, #48	; 0x30
 80063ba:	d000      	beq.n	80063be <_strtod_l+0x4a>
 80063bc:	e07e      	b.n	80064bc <_strtod_l+0x148>
 80063be:	7863      	ldrb	r3, [r4, #1]
 80063c0:	2b58      	cmp	r3, #88	; 0x58
 80063c2:	d002      	beq.n	80063ca <_strtod_l+0x56>
 80063c4:	2b78      	cmp	r3, #120	; 0x78
 80063c6:	d000      	beq.n	80063ca <_strtod_l+0x56>
 80063c8:	e06e      	b.n	80064a8 <_strtod_l+0x134>
 80063ca:	9b07      	ldr	r3, [sp, #28]
 80063cc:	4a96      	ldr	r2, [pc, #600]	; (8006628 <_strtod_l+0x2b4>)
 80063ce:	9302      	str	r3, [sp, #8]
 80063d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063d2:	a921      	add	r1, sp, #132	; 0x84
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	ab22      	add	r3, sp, #136	; 0x88
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	9804      	ldr	r0, [sp, #16]
 80063dc:	ab23      	add	r3, sp, #140	; 0x8c
 80063de:	f001 fd40 	bl	8007e62 <__gethex>
 80063e2:	2507      	movs	r5, #7
 80063e4:	9005      	str	r0, [sp, #20]
 80063e6:	4005      	ands	r5, r0
 80063e8:	d005      	beq.n	80063f6 <_strtod_l+0x82>
 80063ea:	2d06      	cmp	r5, #6
 80063ec:	d12f      	bne.n	800644e <_strtod_l+0xda>
 80063ee:	2300      	movs	r3, #0
 80063f0:	3401      	adds	r4, #1
 80063f2:	9421      	str	r4, [sp, #132]	; 0x84
 80063f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80063f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <_strtod_l+0x8e>
 80063fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01d      	beq.n	8006444 <_strtod_l+0xd0>
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	0032      	movs	r2, r6
 800640c:	061b      	lsls	r3, r3, #24
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	0010      	movs	r0, r2
 8006412:	0019      	movs	r1, r3
 8006414:	b027      	add	sp, #156	; 0x9c
 8006416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006418:	2a2b      	cmp	r2, #43	; 0x2b
 800641a:	d016      	beq.n	800644a <_strtod_l+0xd6>
 800641c:	2a2d      	cmp	r2, #45	; 0x2d
 800641e:	d003      	beq.n	8006428 <_strtod_l+0xb4>
 8006420:	2a20      	cmp	r2, #32
 8006422:	d1c3      	bne.n	80063ac <_strtod_l+0x38>
 8006424:	3301      	adds	r3, #1
 8006426:	e7b8      	b.n	800639a <_strtod_l+0x26>
 8006428:	2201      	movs	r2, #1
 800642a:	9213      	str	r2, [sp, #76]	; 0x4c
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	9221      	str	r2, [sp, #132]	; 0x84
 8006430:	785b      	ldrb	r3, [r3, #1]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1bc      	bne.n	80063b0 <_strtod_l+0x3c>
 8006436:	9b06      	ldr	r3, [sp, #24]
 8006438:	9321      	str	r3, [sp, #132]	; 0x84
 800643a:	2300      	movs	r3, #0
 800643c:	9313      	str	r3, [sp, #76]	; 0x4c
 800643e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1db      	bne.n	80063fc <_strtod_l+0x88>
 8006444:	0032      	movs	r2, r6
 8006446:	003b      	movs	r3, r7
 8006448:	e7e2      	b.n	8006410 <_strtod_l+0x9c>
 800644a:	2200      	movs	r2, #0
 800644c:	e7ed      	b.n	800642a <_strtod_l+0xb6>
 800644e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006450:	2a00      	cmp	r2, #0
 8006452:	d007      	beq.n	8006464 <_strtod_l+0xf0>
 8006454:	2135      	movs	r1, #53	; 0x35
 8006456:	a824      	add	r0, sp, #144	; 0x90
 8006458:	f002 fbe9 	bl	8008c2e <__copybits>
 800645c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800645e:	9804      	ldr	r0, [sp, #16]
 8006460:	f002 f860 	bl	8008524 <_Bfree>
 8006464:	1e68      	subs	r0, r5, #1
 8006466:	2804      	cmp	r0, #4
 8006468:	d806      	bhi.n	8006478 <_strtod_l+0x104>
 800646a:	f7f9 fe55 	bl	8000118 <__gnu_thumb1_case_uqi>
 800646e:	030c      	.short	0x030c
 8006470:	1917      	.short	0x1917
 8006472:	0c          	.byte	0x0c
 8006473:	00          	.byte	0x00
 8006474:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006476:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006478:	9b05      	ldr	r3, [sp, #20]
 800647a:	071b      	lsls	r3, r3, #28
 800647c:	d5bb      	bpl.n	80063f6 <_strtod_l+0x82>
 800647e:	2380      	movs	r3, #128	; 0x80
 8006480:	061b      	lsls	r3, r3, #24
 8006482:	431f      	orrs	r7, r3
 8006484:	e7b7      	b.n	80063f6 <_strtod_l+0x82>
 8006486:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006488:	4a68      	ldr	r2, [pc, #416]	; (800662c <_strtod_l+0x2b8>)
 800648a:	4969      	ldr	r1, [pc, #420]	; (8006630 <_strtod_l+0x2bc>)
 800648c:	401a      	ands	r2, r3
 800648e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006490:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006492:	185b      	adds	r3, r3, r1
 8006494:	051b      	lsls	r3, r3, #20
 8006496:	431a      	orrs	r2, r3
 8006498:	0017      	movs	r7, r2
 800649a:	e7ed      	b.n	8006478 <_strtod_l+0x104>
 800649c:	4f65      	ldr	r7, [pc, #404]	; (8006634 <_strtod_l+0x2c0>)
 800649e:	e7eb      	b.n	8006478 <_strtod_l+0x104>
 80064a0:	2601      	movs	r6, #1
 80064a2:	4f65      	ldr	r7, [pc, #404]	; (8006638 <_strtod_l+0x2c4>)
 80064a4:	4276      	negs	r6, r6
 80064a6:	e7e7      	b.n	8006478 <_strtod_l+0x104>
 80064a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	9221      	str	r2, [sp, #132]	; 0x84
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b30      	cmp	r3, #48	; 0x30
 80064b2:	d0f9      	beq.n	80064a8 <_strtod_l+0x134>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d09e      	beq.n	80063f6 <_strtod_l+0x82>
 80064b8:	2301      	movs	r3, #1
 80064ba:	930c      	str	r3, [sp, #48]	; 0x30
 80064bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064be:	220a      	movs	r2, #10
 80064c0:	9312      	str	r3, [sp, #72]	; 0x48
 80064c2:	2300      	movs	r3, #0
 80064c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80064c6:	9308      	str	r3, [sp, #32]
 80064c8:	930a      	str	r3, [sp, #40]	; 0x28
 80064ca:	9821      	ldr	r0, [sp, #132]	; 0x84
 80064cc:	7804      	ldrb	r4, [r0, #0]
 80064ce:	0023      	movs	r3, r4
 80064d0:	3b30      	subs	r3, #48	; 0x30
 80064d2:	b2d9      	uxtb	r1, r3
 80064d4:	2909      	cmp	r1, #9
 80064d6:	d934      	bls.n	8006542 <_strtod_l+0x1ce>
 80064d8:	9a05      	ldr	r2, [sp, #20]
 80064da:	6829      	ldr	r1, [r5, #0]
 80064dc:	f002 fe08 	bl	80090f0 <strncmp>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d040      	beq.n	8006566 <_strtod_l+0x1f2>
 80064e4:	2000      	movs	r0, #0
 80064e6:	0023      	movs	r3, r4
 80064e8:	4684      	mov	ip, r0
 80064ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ec:	9007      	str	r0, [sp, #28]
 80064ee:	9205      	str	r2, [sp, #20]
 80064f0:	2220      	movs	r2, #32
 80064f2:	0019      	movs	r1, r3
 80064f4:	4391      	bics	r1, r2
 80064f6:	000a      	movs	r2, r1
 80064f8:	2100      	movs	r1, #0
 80064fa:	2a45      	cmp	r2, #69	; 0x45
 80064fc:	d000      	beq.n	8006500 <_strtod_l+0x18c>
 80064fe:	e0bf      	b.n	8006680 <_strtod_l+0x30c>
 8006500:	9b05      	ldr	r3, [sp, #20]
 8006502:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006504:	4303      	orrs	r3, r0
 8006506:	4313      	orrs	r3, r2
 8006508:	428b      	cmp	r3, r1
 800650a:	d094      	beq.n	8006436 <_strtod_l+0xc2>
 800650c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800650e:	9306      	str	r3, [sp, #24]
 8006510:	3301      	adds	r3, #1
 8006512:	9321      	str	r3, [sp, #132]	; 0x84
 8006514:	9b06      	ldr	r3, [sp, #24]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b2b      	cmp	r3, #43	; 0x2b
 800651a:	d100      	bne.n	800651e <_strtod_l+0x1aa>
 800651c:	e082      	b.n	8006624 <_strtod_l+0x2b0>
 800651e:	000c      	movs	r4, r1
 8006520:	2b2d      	cmp	r3, #45	; 0x2d
 8006522:	d105      	bne.n	8006530 <_strtod_l+0x1bc>
 8006524:	2401      	movs	r4, #1
 8006526:	9b06      	ldr	r3, [sp, #24]
 8006528:	3302      	adds	r3, #2
 800652a:	9321      	str	r3, [sp, #132]	; 0x84
 800652c:	9b06      	ldr	r3, [sp, #24]
 800652e:	789b      	ldrb	r3, [r3, #2]
 8006530:	001a      	movs	r2, r3
 8006532:	3a30      	subs	r2, #48	; 0x30
 8006534:	2a09      	cmp	r2, #9
 8006536:	d800      	bhi.n	800653a <_strtod_l+0x1c6>
 8006538:	e084      	b.n	8006644 <_strtod_l+0x2d0>
 800653a:	9a06      	ldr	r2, [sp, #24]
 800653c:	2100      	movs	r1, #0
 800653e:	9221      	str	r2, [sp, #132]	; 0x84
 8006540:	e09e      	b.n	8006680 <_strtod_l+0x30c>
 8006542:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006544:	2908      	cmp	r1, #8
 8006546:	dc09      	bgt.n	800655c <_strtod_l+0x1e8>
 8006548:	9908      	ldr	r1, [sp, #32]
 800654a:	4351      	muls	r1, r2
 800654c:	18cb      	adds	r3, r1, r3
 800654e:	9308      	str	r3, [sp, #32]
 8006550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006552:	3001      	adds	r0, #1
 8006554:	3301      	adds	r3, #1
 8006556:	930a      	str	r3, [sp, #40]	; 0x28
 8006558:	9021      	str	r0, [sp, #132]	; 0x84
 800655a:	e7b6      	b.n	80064ca <_strtod_l+0x156>
 800655c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800655e:	4351      	muls	r1, r2
 8006560:	18cb      	adds	r3, r1, r3
 8006562:	930b      	str	r3, [sp, #44]	; 0x2c
 8006564:	e7f4      	b.n	8006550 <_strtod_l+0x1dc>
 8006566:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006568:	9b05      	ldr	r3, [sp, #20]
 800656a:	4694      	mov	ip, r2
 800656c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800656e:	4463      	add	r3, ip
 8006570:	9321      	str	r3, [sp, #132]	; 0x84
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2a00      	cmp	r2, #0
 8006576:	d036      	beq.n	80065e6 <_strtod_l+0x272>
 8006578:	4684      	mov	ip, r0
 800657a:	9205      	str	r2, [sp, #20]
 800657c:	001a      	movs	r2, r3
 800657e:	3a30      	subs	r2, #48	; 0x30
 8006580:	2a09      	cmp	r2, #9
 8006582:	d912      	bls.n	80065aa <_strtod_l+0x236>
 8006584:	2201      	movs	r2, #1
 8006586:	9207      	str	r2, [sp, #28]
 8006588:	e7b2      	b.n	80064f0 <_strtod_l+0x17c>
 800658a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800658c:	3001      	adds	r0, #1
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	9221      	str	r2, [sp, #132]	; 0x84
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b30      	cmp	r3, #48	; 0x30
 8006596:	d0f8      	beq.n	800658a <_strtod_l+0x216>
 8006598:	001a      	movs	r2, r3
 800659a:	3a31      	subs	r2, #49	; 0x31
 800659c:	2a08      	cmp	r2, #8
 800659e:	d83c      	bhi.n	800661a <_strtod_l+0x2a6>
 80065a0:	4684      	mov	ip, r0
 80065a2:	2000      	movs	r0, #0
 80065a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065a6:	9005      	str	r0, [sp, #20]
 80065a8:	9212      	str	r2, [sp, #72]	; 0x48
 80065aa:	3b30      	subs	r3, #48	; 0x30
 80065ac:	1c42      	adds	r2, r0, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d013      	beq.n	80065da <_strtod_l+0x266>
 80065b2:	210a      	movs	r1, #10
 80065b4:	4494      	add	ip, r2
 80065b6:	9a05      	ldr	r2, [sp, #20]
 80065b8:	1885      	adds	r5, r0, r2
 80065ba:	42aa      	cmp	r2, r5
 80065bc:	d115      	bne.n	80065ea <_strtod_l+0x276>
 80065be:	9905      	ldr	r1, [sp, #20]
 80065c0:	9a05      	ldr	r2, [sp, #20]
 80065c2:	3101      	adds	r1, #1
 80065c4:	1809      	adds	r1, r1, r0
 80065c6:	1812      	adds	r2, r2, r0
 80065c8:	9105      	str	r1, [sp, #20]
 80065ca:	2a08      	cmp	r2, #8
 80065cc:	dc1b      	bgt.n	8006606 <_strtod_l+0x292>
 80065ce:	220a      	movs	r2, #10
 80065d0:	9908      	ldr	r1, [sp, #32]
 80065d2:	434a      	muls	r2, r1
 80065d4:	189b      	adds	r3, r3, r2
 80065d6:	2200      	movs	r2, #0
 80065d8:	9308      	str	r3, [sp, #32]
 80065da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065dc:	0010      	movs	r0, r2
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	9121      	str	r1, [sp, #132]	; 0x84
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	e7ca      	b.n	800657c <_strtod_l+0x208>
 80065e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80065e8:	e7d4      	b.n	8006594 <_strtod_l+0x220>
 80065ea:	1c54      	adds	r4, r2, #1
 80065ec:	2a08      	cmp	r2, #8
 80065ee:	dc04      	bgt.n	80065fa <_strtod_l+0x286>
 80065f0:	9a08      	ldr	r2, [sp, #32]
 80065f2:	434a      	muls	r2, r1
 80065f4:	9208      	str	r2, [sp, #32]
 80065f6:	0022      	movs	r2, r4
 80065f8:	e7df      	b.n	80065ba <_strtod_l+0x246>
 80065fa:	2c10      	cmp	r4, #16
 80065fc:	dcfb      	bgt.n	80065f6 <_strtod_l+0x282>
 80065fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006600:	434a      	muls	r2, r1
 8006602:	920b      	str	r2, [sp, #44]	; 0x2c
 8006604:	e7f7      	b.n	80065f6 <_strtod_l+0x282>
 8006606:	9905      	ldr	r1, [sp, #20]
 8006608:	2200      	movs	r2, #0
 800660a:	2910      	cmp	r1, #16
 800660c:	dce5      	bgt.n	80065da <_strtod_l+0x266>
 800660e:	210a      	movs	r1, #10
 8006610:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006612:	4341      	muls	r1, r0
 8006614:	185b      	adds	r3, r3, r1
 8006616:	930b      	str	r3, [sp, #44]	; 0x2c
 8006618:	e7df      	b.n	80065da <_strtod_l+0x266>
 800661a:	2200      	movs	r2, #0
 800661c:	4694      	mov	ip, r2
 800661e:	9205      	str	r2, [sp, #20]
 8006620:	3201      	adds	r2, #1
 8006622:	e7b0      	b.n	8006586 <_strtod_l+0x212>
 8006624:	000c      	movs	r4, r1
 8006626:	e77e      	b.n	8006526 <_strtod_l+0x1b2>
 8006628:	08009304 	.word	0x08009304
 800662c:	ffefffff 	.word	0xffefffff
 8006630:	00000433 	.word	0x00000433
 8006634:	7ff00000 	.word	0x7ff00000
 8006638:	7fffffff 	.word	0x7fffffff
 800663c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	9221      	str	r2, [sp, #132]	; 0x84
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b30      	cmp	r3, #48	; 0x30
 8006646:	d0f9      	beq.n	800663c <_strtod_l+0x2c8>
 8006648:	001a      	movs	r2, r3
 800664a:	3a31      	subs	r2, #49	; 0x31
 800664c:	2100      	movs	r1, #0
 800664e:	2a08      	cmp	r2, #8
 8006650:	d816      	bhi.n	8006680 <_strtod_l+0x30c>
 8006652:	3b30      	subs	r3, #48	; 0x30
 8006654:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006656:	930e      	str	r3, [sp, #56]	; 0x38
 8006658:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800665a:	1c59      	adds	r1, r3, #1
 800665c:	9121      	str	r1, [sp, #132]	; 0x84
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	001a      	movs	r2, r3
 8006662:	3a30      	subs	r2, #48	; 0x30
 8006664:	2a09      	cmp	r2, #9
 8006666:	d932      	bls.n	80066ce <_strtod_l+0x35a>
 8006668:	1b4a      	subs	r2, r1, r5
 800666a:	4dad      	ldr	r5, [pc, #692]	; (8006920 <_strtod_l+0x5ac>)
 800666c:	0029      	movs	r1, r5
 800666e:	2a08      	cmp	r2, #8
 8006670:	dc03      	bgt.n	800667a <_strtod_l+0x306>
 8006672:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006674:	42a9      	cmp	r1, r5
 8006676:	dd00      	ble.n	800667a <_strtod_l+0x306>
 8006678:	0029      	movs	r1, r5
 800667a:	2c00      	cmp	r4, #0
 800667c:	d000      	beq.n	8006680 <_strtod_l+0x30c>
 800667e:	4249      	negs	r1, r1
 8006680:	9a05      	ldr	r2, [sp, #20]
 8006682:	2a00      	cmp	r2, #0
 8006684:	d149      	bne.n	800671a <_strtod_l+0x3a6>
 8006686:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006688:	4310      	orrs	r0, r2
 800668a:	d000      	beq.n	800668e <_strtod_l+0x31a>
 800668c:	e6b3      	b.n	80063f6 <_strtod_l+0x82>
 800668e:	9a07      	ldr	r2, [sp, #28]
 8006690:	2a00      	cmp	r2, #0
 8006692:	d000      	beq.n	8006696 <_strtod_l+0x322>
 8006694:	e6cf      	b.n	8006436 <_strtod_l+0xc2>
 8006696:	2b4e      	cmp	r3, #78	; 0x4e
 8006698:	d025      	beq.n	80066e6 <_strtod_l+0x372>
 800669a:	dc1f      	bgt.n	80066dc <_strtod_l+0x368>
 800669c:	2b49      	cmp	r3, #73	; 0x49
 800669e:	d000      	beq.n	80066a2 <_strtod_l+0x32e>
 80066a0:	e6c9      	b.n	8006436 <_strtod_l+0xc2>
 80066a2:	49a0      	ldr	r1, [pc, #640]	; (8006924 <_strtod_l+0x5b0>)
 80066a4:	a821      	add	r0, sp, #132	; 0x84
 80066a6:	f001 fe19 	bl	80082dc <__match>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d100      	bne.n	80066b0 <_strtod_l+0x33c>
 80066ae:	e6c2      	b.n	8006436 <_strtod_l+0xc2>
 80066b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066b2:	499d      	ldr	r1, [pc, #628]	; (8006928 <_strtod_l+0x5b4>)
 80066b4:	3b01      	subs	r3, #1
 80066b6:	a821      	add	r0, sp, #132	; 0x84
 80066b8:	9321      	str	r3, [sp, #132]	; 0x84
 80066ba:	f001 fe0f 	bl	80082dc <__match>
 80066be:	2800      	cmp	r0, #0
 80066c0:	d102      	bne.n	80066c8 <_strtod_l+0x354>
 80066c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066c4:	3301      	adds	r3, #1
 80066c6:	9321      	str	r3, [sp, #132]	; 0x84
 80066c8:	4f98      	ldr	r7, [pc, #608]	; (800692c <_strtod_l+0x5b8>)
 80066ca:	2600      	movs	r6, #0
 80066cc:	e693      	b.n	80063f6 <_strtod_l+0x82>
 80066ce:	220a      	movs	r2, #10
 80066d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80066d2:	434a      	muls	r2, r1
 80066d4:	18d2      	adds	r2, r2, r3
 80066d6:	3a30      	subs	r2, #48	; 0x30
 80066d8:	920e      	str	r2, [sp, #56]	; 0x38
 80066da:	e7bd      	b.n	8006658 <_strtod_l+0x2e4>
 80066dc:	2b69      	cmp	r3, #105	; 0x69
 80066de:	d0e0      	beq.n	80066a2 <_strtod_l+0x32e>
 80066e0:	2b6e      	cmp	r3, #110	; 0x6e
 80066e2:	d000      	beq.n	80066e6 <_strtod_l+0x372>
 80066e4:	e6a7      	b.n	8006436 <_strtod_l+0xc2>
 80066e6:	4992      	ldr	r1, [pc, #584]	; (8006930 <_strtod_l+0x5bc>)
 80066e8:	a821      	add	r0, sp, #132	; 0x84
 80066ea:	f001 fdf7 	bl	80082dc <__match>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d100      	bne.n	80066f4 <_strtod_l+0x380>
 80066f2:	e6a0      	b.n	8006436 <_strtod_l+0xc2>
 80066f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b28      	cmp	r3, #40	; 0x28
 80066fa:	d10c      	bne.n	8006716 <_strtod_l+0x3a2>
 80066fc:	aa24      	add	r2, sp, #144	; 0x90
 80066fe:	498d      	ldr	r1, [pc, #564]	; (8006934 <_strtod_l+0x5c0>)
 8006700:	a821      	add	r0, sp, #132	; 0x84
 8006702:	f001 fdff 	bl	8008304 <__hexnan>
 8006706:	2805      	cmp	r0, #5
 8006708:	d105      	bne.n	8006716 <_strtod_l+0x3a2>
 800670a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800670c:	4a87      	ldr	r2, [pc, #540]	; (800692c <_strtod_l+0x5b8>)
 800670e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8006710:	431a      	orrs	r2, r3
 8006712:	0017      	movs	r7, r2
 8006714:	e66f      	b.n	80063f6 <_strtod_l+0x82>
 8006716:	4f88      	ldr	r7, [pc, #544]	; (8006938 <_strtod_l+0x5c4>)
 8006718:	e7d7      	b.n	80066ca <_strtod_l+0x356>
 800671a:	4663      	mov	r3, ip
 800671c:	1acb      	subs	r3, r1, r3
 800671e:	9307      	str	r3, [sp, #28]
 8006720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <_strtod_l+0x3b6>
 8006726:	9b05      	ldr	r3, [sp, #20]
 8006728:	930a      	str	r3, [sp, #40]	; 0x28
 800672a:	9c05      	ldr	r4, [sp, #20]
 800672c:	2c10      	cmp	r4, #16
 800672e:	dd00      	ble.n	8006732 <_strtod_l+0x3be>
 8006730:	2410      	movs	r4, #16
 8006732:	9808      	ldr	r0, [sp, #32]
 8006734:	f7fb fe1a 	bl	800236c <__aeabi_ui2d>
 8006738:	9b05      	ldr	r3, [sp, #20]
 800673a:	0006      	movs	r6, r0
 800673c:	000f      	movs	r7, r1
 800673e:	2b09      	cmp	r3, #9
 8006740:	dc15      	bgt.n	800676e <_strtod_l+0x3fa>
 8006742:	9b07      	ldr	r3, [sp, #28]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d100      	bne.n	800674a <_strtod_l+0x3d6>
 8006748:	e655      	b.n	80063f6 <_strtod_l+0x82>
 800674a:	9b07      	ldr	r3, [sp, #28]
 800674c:	2b00      	cmp	r3, #0
 800674e:	dc00      	bgt.n	8006752 <_strtod_l+0x3de>
 8006750:	e07d      	b.n	800684e <_strtod_l+0x4da>
 8006752:	2b16      	cmp	r3, #22
 8006754:	dc62      	bgt.n	800681c <_strtod_l+0x4a8>
 8006756:	00dc      	lsls	r4, r3, #3
 8006758:	4b78      	ldr	r3, [pc, #480]	; (800693c <_strtod_l+0x5c8>)
 800675a:	0032      	movs	r2, r6
 800675c:	1919      	adds	r1, r3, r4
 800675e:	003b      	movs	r3, r7
 8006760:	6808      	ldr	r0, [r1, #0]
 8006762:	6849      	ldr	r1, [r1, #4]
 8006764:	f7fa ffbc 	bl	80016e0 <__aeabi_dmul>
 8006768:	0006      	movs	r6, r0
 800676a:	000f      	movs	r7, r1
 800676c:	e643      	b.n	80063f6 <_strtod_l+0x82>
 800676e:	0022      	movs	r2, r4
 8006770:	4b72      	ldr	r3, [pc, #456]	; (800693c <_strtod_l+0x5c8>)
 8006772:	3a09      	subs	r2, #9
 8006774:	00d2      	lsls	r2, r2, #3
 8006776:	189b      	adds	r3, r3, r2
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f7fa ffb0 	bl	80016e0 <__aeabi_dmul>
 8006780:	0006      	movs	r6, r0
 8006782:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006784:	000f      	movs	r7, r1
 8006786:	f7fb fdf1 	bl	800236c <__aeabi_ui2d>
 800678a:	000b      	movs	r3, r1
 800678c:	0002      	movs	r2, r0
 800678e:	0039      	movs	r1, r7
 8006790:	0030      	movs	r0, r6
 8006792:	f7fa f87f 	bl	8000894 <__aeabi_dadd>
 8006796:	9b05      	ldr	r3, [sp, #20]
 8006798:	0006      	movs	r6, r0
 800679a:	000f      	movs	r7, r1
 800679c:	2b0f      	cmp	r3, #15
 800679e:	ddd0      	ble.n	8006742 <_strtod_l+0x3ce>
 80067a0:	9b05      	ldr	r3, [sp, #20]
 80067a2:	1b1c      	subs	r4, r3, r4
 80067a4:	9b07      	ldr	r3, [sp, #28]
 80067a6:	18e4      	adds	r4, r4, r3
 80067a8:	2c00      	cmp	r4, #0
 80067aa:	dc00      	bgt.n	80067ae <_strtod_l+0x43a>
 80067ac:	e094      	b.n	80068d8 <_strtod_l+0x564>
 80067ae:	230f      	movs	r3, #15
 80067b0:	4023      	ands	r3, r4
 80067b2:	d00a      	beq.n	80067ca <_strtod_l+0x456>
 80067b4:	4961      	ldr	r1, [pc, #388]	; (800693c <_strtod_l+0x5c8>)
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	18c9      	adds	r1, r1, r3
 80067ba:	0032      	movs	r2, r6
 80067bc:	6808      	ldr	r0, [r1, #0]
 80067be:	6849      	ldr	r1, [r1, #4]
 80067c0:	003b      	movs	r3, r7
 80067c2:	f7fa ff8d 	bl	80016e0 <__aeabi_dmul>
 80067c6:	0006      	movs	r6, r0
 80067c8:	000f      	movs	r7, r1
 80067ca:	230f      	movs	r3, #15
 80067cc:	439c      	bics	r4, r3
 80067ce:	d06e      	beq.n	80068ae <_strtod_l+0x53a>
 80067d0:	3326      	adds	r3, #38	; 0x26
 80067d2:	33ff      	adds	r3, #255	; 0xff
 80067d4:	429c      	cmp	r4, r3
 80067d6:	dd48      	ble.n	800686a <_strtod_l+0x4f6>
 80067d8:	2400      	movs	r4, #0
 80067da:	9405      	str	r4, [sp, #20]
 80067dc:	940b      	str	r4, [sp, #44]	; 0x2c
 80067de:	940a      	str	r4, [sp, #40]	; 0x28
 80067e0:	2322      	movs	r3, #34	; 0x22
 80067e2:	2600      	movs	r6, #0
 80067e4:	9a04      	ldr	r2, [sp, #16]
 80067e6:	4f51      	ldr	r7, [pc, #324]	; (800692c <_strtod_l+0x5b8>)
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ec:	42b3      	cmp	r3, r6
 80067ee:	d100      	bne.n	80067f2 <_strtod_l+0x47e>
 80067f0:	e601      	b.n	80063f6 <_strtod_l+0x82>
 80067f2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80067f4:	9804      	ldr	r0, [sp, #16]
 80067f6:	f001 fe95 	bl	8008524 <_Bfree>
 80067fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067fc:	9804      	ldr	r0, [sp, #16]
 80067fe:	f001 fe91 	bl	8008524 <_Bfree>
 8006802:	9905      	ldr	r1, [sp, #20]
 8006804:	9804      	ldr	r0, [sp, #16]
 8006806:	f001 fe8d 	bl	8008524 <_Bfree>
 800680a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800680c:	9804      	ldr	r0, [sp, #16]
 800680e:	f001 fe89 	bl	8008524 <_Bfree>
 8006812:	0021      	movs	r1, r4
 8006814:	9804      	ldr	r0, [sp, #16]
 8006816:	f001 fe85 	bl	8008524 <_Bfree>
 800681a:	e5ec      	b.n	80063f6 <_strtod_l+0x82>
 800681c:	2325      	movs	r3, #37	; 0x25
 800681e:	9a05      	ldr	r2, [sp, #20]
 8006820:	1a9b      	subs	r3, r3, r2
 8006822:	9a07      	ldr	r2, [sp, #28]
 8006824:	4293      	cmp	r3, r2
 8006826:	dbbb      	blt.n	80067a0 <_strtod_l+0x42c>
 8006828:	230f      	movs	r3, #15
 800682a:	9a05      	ldr	r2, [sp, #20]
 800682c:	4c43      	ldr	r4, [pc, #268]	; (800693c <_strtod_l+0x5c8>)
 800682e:	1a9d      	subs	r5, r3, r2
 8006830:	00e9      	lsls	r1, r5, #3
 8006832:	1861      	adds	r1, r4, r1
 8006834:	0032      	movs	r2, r6
 8006836:	6808      	ldr	r0, [r1, #0]
 8006838:	6849      	ldr	r1, [r1, #4]
 800683a:	003b      	movs	r3, r7
 800683c:	f7fa ff50 	bl	80016e0 <__aeabi_dmul>
 8006840:	9b07      	ldr	r3, [sp, #28]
 8006842:	1b5e      	subs	r6, r3, r5
 8006844:	00f6      	lsls	r6, r6, #3
 8006846:	19a6      	adds	r6, r4, r6
 8006848:	6832      	ldr	r2, [r6, #0]
 800684a:	6873      	ldr	r3, [r6, #4]
 800684c:	e78a      	b.n	8006764 <_strtod_l+0x3f0>
 800684e:	9b07      	ldr	r3, [sp, #28]
 8006850:	3316      	adds	r3, #22
 8006852:	dba5      	blt.n	80067a0 <_strtod_l+0x42c>
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	0030      	movs	r0, r6
 8006858:	00da      	lsls	r2, r3, #3
 800685a:	4b38      	ldr	r3, [pc, #224]	; (800693c <_strtod_l+0x5c8>)
 800685c:	0039      	movs	r1, r7
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f7fa fb32 	bl	8000ecc <__aeabi_ddiv>
 8006868:	e77e      	b.n	8006768 <_strtod_l+0x3f4>
 800686a:	2300      	movs	r3, #0
 800686c:	0030      	movs	r0, r6
 800686e:	0039      	movs	r1, r7
 8006870:	001d      	movs	r5, r3
 8006872:	1124      	asrs	r4, r4, #4
 8006874:	2c01      	cmp	r4, #1
 8006876:	dc1d      	bgt.n	80068b4 <_strtod_l+0x540>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <_strtod_l+0x50c>
 800687c:	0006      	movs	r6, r0
 800687e:	000f      	movs	r7, r1
 8006880:	4b2f      	ldr	r3, [pc, #188]	; (8006940 <_strtod_l+0x5cc>)
 8006882:	00ed      	lsls	r5, r5, #3
 8006884:	18ff      	adds	r7, r7, r3
 8006886:	4b2f      	ldr	r3, [pc, #188]	; (8006944 <_strtod_l+0x5d0>)
 8006888:	0032      	movs	r2, r6
 800688a:	195d      	adds	r5, r3, r5
 800688c:	6828      	ldr	r0, [r5, #0]
 800688e:	6869      	ldr	r1, [r5, #4]
 8006890:	003b      	movs	r3, r7
 8006892:	f7fa ff25 	bl	80016e0 <__aeabi_dmul>
 8006896:	4b25      	ldr	r3, [pc, #148]	; (800692c <_strtod_l+0x5b8>)
 8006898:	4a2b      	ldr	r2, [pc, #172]	; (8006948 <_strtod_l+0x5d4>)
 800689a:	0006      	movs	r6, r0
 800689c:	400b      	ands	r3, r1
 800689e:	4293      	cmp	r3, r2
 80068a0:	d89a      	bhi.n	80067d8 <_strtod_l+0x464>
 80068a2:	4a2a      	ldr	r2, [pc, #168]	; (800694c <_strtod_l+0x5d8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d913      	bls.n	80068d0 <_strtod_l+0x55c>
 80068a8:	2601      	movs	r6, #1
 80068aa:	4f29      	ldr	r7, [pc, #164]	; (8006950 <_strtod_l+0x5dc>)
 80068ac:	4276      	negs	r6, r6
 80068ae:	2300      	movs	r3, #0
 80068b0:	9306      	str	r3, [sp, #24]
 80068b2:	e07b      	b.n	80069ac <_strtod_l+0x638>
 80068b4:	2201      	movs	r2, #1
 80068b6:	4214      	tst	r4, r2
 80068b8:	d007      	beq.n	80068ca <_strtod_l+0x556>
 80068ba:	4a22      	ldr	r2, [pc, #136]	; (8006944 <_strtod_l+0x5d0>)
 80068bc:	00eb      	lsls	r3, r5, #3
 80068be:	189b      	adds	r3, r3, r2
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f7fa ff0c 	bl	80016e0 <__aeabi_dmul>
 80068c8:	2301      	movs	r3, #1
 80068ca:	3501      	adds	r5, #1
 80068cc:	1064      	asrs	r4, r4, #1
 80068ce:	e7d1      	b.n	8006874 <_strtod_l+0x500>
 80068d0:	23d4      	movs	r3, #212	; 0xd4
 80068d2:	049b      	lsls	r3, r3, #18
 80068d4:	18cf      	adds	r7, r1, r3
 80068d6:	e7ea      	b.n	80068ae <_strtod_l+0x53a>
 80068d8:	2c00      	cmp	r4, #0
 80068da:	d0e8      	beq.n	80068ae <_strtod_l+0x53a>
 80068dc:	230f      	movs	r3, #15
 80068de:	4264      	negs	r4, r4
 80068e0:	4023      	ands	r3, r4
 80068e2:	d00a      	beq.n	80068fa <_strtod_l+0x586>
 80068e4:	4a15      	ldr	r2, [pc, #84]	; (800693c <_strtod_l+0x5c8>)
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	18d3      	adds	r3, r2, r3
 80068ea:	0030      	movs	r0, r6
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	0039      	movs	r1, r7
 80068f2:	f7fa faeb 	bl	8000ecc <__aeabi_ddiv>
 80068f6:	0006      	movs	r6, r0
 80068f8:	000f      	movs	r7, r1
 80068fa:	1124      	asrs	r4, r4, #4
 80068fc:	d0d7      	beq.n	80068ae <_strtod_l+0x53a>
 80068fe:	2c1f      	cmp	r4, #31
 8006900:	dd28      	ble.n	8006954 <_strtod_l+0x5e0>
 8006902:	2400      	movs	r4, #0
 8006904:	9405      	str	r4, [sp, #20]
 8006906:	940b      	str	r4, [sp, #44]	; 0x2c
 8006908:	940a      	str	r4, [sp, #40]	; 0x28
 800690a:	2322      	movs	r3, #34	; 0x22
 800690c:	9a04      	ldr	r2, [sp, #16]
 800690e:	2600      	movs	r6, #0
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006914:	2700      	movs	r7, #0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d000      	beq.n	800691c <_strtod_l+0x5a8>
 800691a:	e76a      	b.n	80067f2 <_strtod_l+0x47e>
 800691c:	e56b      	b.n	80063f6 <_strtod_l+0x82>
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	00004e1f 	.word	0x00004e1f
 8006924:	080092cd 	.word	0x080092cd
 8006928:	0800935b 	.word	0x0800935b
 800692c:	7ff00000 	.word	0x7ff00000
 8006930:	080092d5 	.word	0x080092d5
 8006934:	08009318 	.word	0x08009318
 8006938:	fff80000 	.word	0xfff80000
 800693c:	08009398 	.word	0x08009398
 8006940:	fcb00000 	.word	0xfcb00000
 8006944:	08009370 	.word	0x08009370
 8006948:	7ca00000 	.word	0x7ca00000
 800694c:	7c900000 	.word	0x7c900000
 8006950:	7fefffff 	.word	0x7fefffff
 8006954:	2310      	movs	r3, #16
 8006956:	4023      	ands	r3, r4
 8006958:	9306      	str	r3, [sp, #24]
 800695a:	d001      	beq.n	8006960 <_strtod_l+0x5ec>
 800695c:	236a      	movs	r3, #106	; 0x6a
 800695e:	9306      	str	r3, [sp, #24]
 8006960:	2300      	movs	r3, #0
 8006962:	0030      	movs	r0, r6
 8006964:	0039      	movs	r1, r7
 8006966:	001d      	movs	r5, r3
 8006968:	2c00      	cmp	r4, #0
 800696a:	dd00      	ble.n	800696e <_strtod_l+0x5fa>
 800696c:	e10e      	b.n	8006b8c <_strtod_l+0x818>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <_strtod_l+0x602>
 8006972:	0006      	movs	r6, r0
 8006974:	000f      	movs	r7, r1
 8006976:	9b06      	ldr	r3, [sp, #24]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00f      	beq.n	800699c <_strtod_l+0x628>
 800697c:	236b      	movs	r3, #107	; 0x6b
 800697e:	0079      	lsls	r1, r7, #1
 8006980:	0d49      	lsrs	r1, r1, #21
 8006982:	003a      	movs	r2, r7
 8006984:	1a5b      	subs	r3, r3, r1
 8006986:	2b00      	cmp	r3, #0
 8006988:	dd08      	ble.n	800699c <_strtod_l+0x628>
 800698a:	2b1f      	cmp	r3, #31
 800698c:	dc00      	bgt.n	8006990 <_strtod_l+0x61c>
 800698e:	e112      	b.n	8006bb6 <_strtod_l+0x842>
 8006990:	2600      	movs	r6, #0
 8006992:	2b34      	cmp	r3, #52	; 0x34
 8006994:	dc00      	bgt.n	8006998 <_strtod_l+0x624>
 8006996:	e107      	b.n	8006ba8 <_strtod_l+0x834>
 8006998:	27dc      	movs	r7, #220	; 0xdc
 800699a:	04bf      	lsls	r7, r7, #18
 800699c:	2200      	movs	r2, #0
 800699e:	2300      	movs	r3, #0
 80069a0:	0030      	movs	r0, r6
 80069a2:	0039      	movs	r1, r7
 80069a4:	f7f9 fd48 	bl	8000438 <__aeabi_dcmpeq>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d1aa      	bne.n	8006902 <_strtod_l+0x58e>
 80069ac:	9b08      	ldr	r3, [sp, #32]
 80069ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80069b4:	9b05      	ldr	r3, [sp, #20]
 80069b6:	9804      	ldr	r0, [sp, #16]
 80069b8:	f001 fe0b 	bl	80085d2 <__s2b>
 80069bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80069be:	2800      	cmp	r0, #0
 80069c0:	d100      	bne.n	80069c4 <_strtod_l+0x650>
 80069c2:	e709      	b.n	80067d8 <_strtod_l+0x464>
 80069c4:	9b07      	ldr	r3, [sp, #28]
 80069c6:	9a07      	ldr	r2, [sp, #28]
 80069c8:	17db      	asrs	r3, r3, #31
 80069ca:	4252      	negs	r2, r2
 80069cc:	4013      	ands	r3, r2
 80069ce:	9315      	str	r3, [sp, #84]	; 0x54
 80069d0:	9b07      	ldr	r3, [sp, #28]
 80069d2:	2400      	movs	r4, #0
 80069d4:	43db      	mvns	r3, r3
 80069d6:	9a07      	ldr	r2, [sp, #28]
 80069d8:	17db      	asrs	r3, r3, #31
 80069da:	401a      	ands	r2, r3
 80069dc:	921c      	str	r2, [sp, #112]	; 0x70
 80069de:	9405      	str	r4, [sp, #20]
 80069e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e2:	9804      	ldr	r0, [sp, #16]
 80069e4:	6859      	ldr	r1, [r3, #4]
 80069e6:	f001 fd65 	bl	80084b4 <_Balloc>
 80069ea:	900a      	str	r0, [sp, #40]	; 0x28
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d100      	bne.n	80069f2 <_strtod_l+0x67e>
 80069f0:	e6f6      	b.n	80067e0 <_strtod_l+0x46c>
 80069f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	310c      	adds	r1, #12
 80069fa:	1c9a      	adds	r2, r3, #2
 80069fc:	0092      	lsls	r2, r2, #2
 80069fe:	300c      	adds	r0, #12
 8006a00:	9308      	str	r3, [sp, #32]
 8006a02:	f001 fd4e 	bl	80084a2 <memcpy>
 8006a06:	ab24      	add	r3, sp, #144	; 0x90
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	ab23      	add	r3, sp, #140	; 0x8c
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	0032      	movs	r2, r6
 8006a10:	003b      	movs	r3, r7
 8006a12:	9804      	ldr	r0, [sp, #16]
 8006a14:	960e      	str	r6, [sp, #56]	; 0x38
 8006a16:	970f      	str	r7, [sp, #60]	; 0x3c
 8006a18:	f002 f88e 	bl	8008b38 <__d2b>
 8006a1c:	9022      	str	r0, [sp, #136]	; 0x88
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d100      	bne.n	8006a24 <_strtod_l+0x6b0>
 8006a22:	e6dd      	b.n	80067e0 <_strtod_l+0x46c>
 8006a24:	2101      	movs	r1, #1
 8006a26:	9804      	ldr	r0, [sp, #16]
 8006a28:	f001 fe5a 	bl	80086e0 <__i2b>
 8006a2c:	9005      	str	r0, [sp, #20]
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d100      	bne.n	8006a34 <_strtod_l+0x6c0>
 8006a32:	e6d5      	b.n	80067e0 <_strtod_l+0x46c>
 8006a34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	da00      	bge.n	8006a3c <_strtod_l+0x6c8>
 8006a3a:	e0c1      	b.n	8006bc0 <_strtod_l+0x84c>
 8006a3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a3e:	189d      	adds	r5, r3, r2
 8006a40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006a42:	4694      	mov	ip, r2
 8006a44:	9906      	ldr	r1, [sp, #24]
 8006a46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a48:	1a5b      	subs	r3, r3, r1
 8006a4a:	2136      	movs	r1, #54	; 0x36
 8006a4c:	189b      	adds	r3, r3, r2
 8006a4e:	1a8a      	subs	r2, r1, r2
 8006a50:	49b2      	ldr	r1, [pc, #712]	; (8006d1c <_strtod_l+0x9a8>)
 8006a52:	3b01      	subs	r3, #1
 8006a54:	2001      	movs	r0, #1
 8006a56:	428b      	cmp	r3, r1
 8006a58:	db00      	blt.n	8006a5c <_strtod_l+0x6e8>
 8006a5a:	e0bd      	b.n	8006bd8 <_strtod_l+0x864>
 8006a5c:	1ac9      	subs	r1, r1, r3
 8006a5e:	1a52      	subs	r2, r2, r1
 8006a60:	291f      	cmp	r1, #31
 8006a62:	dd00      	ble.n	8006a66 <_strtod_l+0x6f2>
 8006a64:	e0b1      	b.n	8006bca <_strtod_l+0x856>
 8006a66:	4088      	lsls	r0, r1
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9014      	str	r0, [sp, #80]	; 0x50
 8006a6c:	9310      	str	r3, [sp, #64]	; 0x40
 8006a6e:	18ab      	adds	r3, r5, r2
 8006a70:	9308      	str	r3, [sp, #32]
 8006a72:	0013      	movs	r3, r2
 8006a74:	9a06      	ldr	r2, [sp, #24]
 8006a76:	4463      	add	r3, ip
 8006a78:	18d3      	adds	r3, r2, r3
 8006a7a:	9a08      	ldr	r2, [sp, #32]
 8006a7c:	930c      	str	r3, [sp, #48]	; 0x30
 8006a7e:	002b      	movs	r3, r5
 8006a80:	4295      	cmp	r5, r2
 8006a82:	dd00      	ble.n	8006a86 <_strtod_l+0x712>
 8006a84:	0013      	movs	r3, r2
 8006a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	dd00      	ble.n	8006a8e <_strtod_l+0x71a>
 8006a8c:	0013      	movs	r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	dd06      	ble.n	8006aa0 <_strtod_l+0x72c>
 8006a92:	9a08      	ldr	r2, [sp, #32]
 8006a94:	1aed      	subs	r5, r5, r3
 8006a96:	1ad2      	subs	r2, r2, r3
 8006a98:	9208      	str	r2, [sp, #32]
 8006a9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a9c:	1ad2      	subs	r2, r2, r3
 8006a9e:	920c      	str	r2, [sp, #48]	; 0x30
 8006aa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d017      	beq.n	8006ad6 <_strtod_l+0x762>
 8006aa6:	001a      	movs	r2, r3
 8006aa8:	9905      	ldr	r1, [sp, #20]
 8006aaa:	9804      	ldr	r0, [sp, #16]
 8006aac:	f001 feb0 	bl	8008810 <__pow5mult>
 8006ab0:	9005      	str	r0, [sp, #20]
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d100      	bne.n	8006ab8 <_strtod_l+0x744>
 8006ab6:	e693      	b.n	80067e0 <_strtod_l+0x46c>
 8006ab8:	0001      	movs	r1, r0
 8006aba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006abc:	9804      	ldr	r0, [sp, #16]
 8006abe:	f001 fe18 	bl	80086f2 <__multiply>
 8006ac2:	9012      	str	r0, [sp, #72]	; 0x48
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d100      	bne.n	8006aca <_strtod_l+0x756>
 8006ac8:	e68a      	b.n	80067e0 <_strtod_l+0x46c>
 8006aca:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006acc:	9804      	ldr	r0, [sp, #16]
 8006ace:	f001 fd29 	bl	8008524 <_Bfree>
 8006ad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ad4:	9322      	str	r3, [sp, #136]	; 0x88
 8006ad6:	9b08      	ldr	r3, [sp, #32]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dd00      	ble.n	8006ade <_strtod_l+0x76a>
 8006adc:	e07f      	b.n	8006bde <_strtod_l+0x86a>
 8006ade:	9b07      	ldr	r3, [sp, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dd08      	ble.n	8006af6 <_strtod_l+0x782>
 8006ae4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006ae6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ae8:	9804      	ldr	r0, [sp, #16]
 8006aea:	f001 fe91 	bl	8008810 <__pow5mult>
 8006aee:	900a      	str	r0, [sp, #40]	; 0x28
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d100      	bne.n	8006af6 <_strtod_l+0x782>
 8006af4:	e674      	b.n	80067e0 <_strtod_l+0x46c>
 8006af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dd08      	ble.n	8006b0e <_strtod_l+0x79a>
 8006afc:	001a      	movs	r2, r3
 8006afe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b00:	9804      	ldr	r0, [sp, #16]
 8006b02:	f001 fed7 	bl	80088b4 <__lshift>
 8006b06:	900a      	str	r0, [sp, #40]	; 0x28
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d100      	bne.n	8006b0e <_strtod_l+0x79a>
 8006b0c:	e668      	b.n	80067e0 <_strtod_l+0x46c>
 8006b0e:	2d00      	cmp	r5, #0
 8006b10:	dd08      	ble.n	8006b24 <_strtod_l+0x7b0>
 8006b12:	002a      	movs	r2, r5
 8006b14:	9905      	ldr	r1, [sp, #20]
 8006b16:	9804      	ldr	r0, [sp, #16]
 8006b18:	f001 fecc 	bl	80088b4 <__lshift>
 8006b1c:	9005      	str	r0, [sp, #20]
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d100      	bne.n	8006b24 <_strtod_l+0x7b0>
 8006b22:	e65d      	b.n	80067e0 <_strtod_l+0x46c>
 8006b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b26:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006b28:	9804      	ldr	r0, [sp, #16]
 8006b2a:	f001 ff2f 	bl	800898c <__mdiff>
 8006b2e:	1e04      	subs	r4, r0, #0
 8006b30:	d100      	bne.n	8006b34 <_strtod_l+0x7c0>
 8006b32:	e655      	b.n	80067e0 <_strtod_l+0x46c>
 8006b34:	2500      	movs	r5, #0
 8006b36:	68c3      	ldr	r3, [r0, #12]
 8006b38:	9905      	ldr	r1, [sp, #20]
 8006b3a:	60c5      	str	r5, [r0, #12]
 8006b3c:	9312      	str	r3, [sp, #72]	; 0x48
 8006b3e:	f001 ff0b 	bl	8008958 <__mcmp>
 8006b42:	42a8      	cmp	r0, r5
 8006b44:	da55      	bge.n	8006bf2 <_strtod_l+0x87e>
 8006b46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b48:	42ab      	cmp	r3, r5
 8006b4a:	d11b      	bne.n	8006b84 <_strtod_l+0x810>
 8006b4c:	42ae      	cmp	r6, r5
 8006b4e:	d119      	bne.n	8006b84 <_strtod_l+0x810>
 8006b50:	033b      	lsls	r3, r7, #12
 8006b52:	42ab      	cmp	r3, r5
 8006b54:	d116      	bne.n	8006b84 <_strtod_l+0x810>
 8006b56:	22d6      	movs	r2, #214	; 0xd6
 8006b58:	4b71      	ldr	r3, [pc, #452]	; (8006d20 <_strtod_l+0x9ac>)
 8006b5a:	04d2      	lsls	r2, r2, #19
 8006b5c:	403b      	ands	r3, r7
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d910      	bls.n	8006b84 <_strtod_l+0x810>
 8006b62:	6963      	ldr	r3, [r4, #20]
 8006b64:	42ab      	cmp	r3, r5
 8006b66:	d102      	bne.n	8006b6e <_strtod_l+0x7fa>
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	dd0a      	ble.n	8006b84 <_strtod_l+0x810>
 8006b6e:	0021      	movs	r1, r4
 8006b70:	2201      	movs	r2, #1
 8006b72:	9804      	ldr	r0, [sp, #16]
 8006b74:	f001 fe9e 	bl	80088b4 <__lshift>
 8006b78:	9905      	ldr	r1, [sp, #20]
 8006b7a:	0004      	movs	r4, r0
 8006b7c:	f001 feec 	bl	8008958 <__mcmp>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	dc6b      	bgt.n	8006c5c <_strtod_l+0x8e8>
 8006b84:	9b06      	ldr	r3, [sp, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d178      	bne.n	8006c7c <_strtod_l+0x908>
 8006b8a:	e632      	b.n	80067f2 <_strtod_l+0x47e>
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	4214      	tst	r4, r2
 8006b90:	d007      	beq.n	8006ba2 <_strtod_l+0x82e>
 8006b92:	4a64      	ldr	r2, [pc, #400]	; (8006d24 <_strtod_l+0x9b0>)
 8006b94:	00eb      	lsls	r3, r5, #3
 8006b96:	18d3      	adds	r3, r2, r3
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f7fa fda0 	bl	80016e0 <__aeabi_dmul>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	3501      	adds	r5, #1
 8006ba4:	1064      	asrs	r4, r4, #1
 8006ba6:	e6df      	b.n	8006968 <_strtod_l+0x5f4>
 8006ba8:	2101      	movs	r1, #1
 8006baa:	3b20      	subs	r3, #32
 8006bac:	4249      	negs	r1, r1
 8006bae:	4099      	lsls	r1, r3
 8006bb0:	400a      	ands	r2, r1
 8006bb2:	0017      	movs	r7, r2
 8006bb4:	e6f2      	b.n	800699c <_strtod_l+0x628>
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	4252      	negs	r2, r2
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	4016      	ands	r6, r2
 8006bbe:	e6ed      	b.n	800699c <_strtod_l+0x628>
 8006bc0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006bc2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006bc4:	1ad2      	subs	r2, r2, r3
 8006bc6:	4694      	mov	ip, r2
 8006bc8:	e73c      	b.n	8006a44 <_strtod_l+0x6d0>
 8006bca:	4957      	ldr	r1, [pc, #348]	; (8006d28 <_strtod_l+0x9b4>)
 8006bcc:	1acb      	subs	r3, r1, r3
 8006bce:	0001      	movs	r1, r0
 8006bd0:	4099      	lsls	r1, r3
 8006bd2:	9110      	str	r1, [sp, #64]	; 0x40
 8006bd4:	9014      	str	r0, [sp, #80]	; 0x50
 8006bd6:	e74a      	b.n	8006a6e <_strtod_l+0x6fa>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9310      	str	r3, [sp, #64]	; 0x40
 8006bdc:	e7fa      	b.n	8006bd4 <_strtod_l+0x860>
 8006bde:	9a08      	ldr	r2, [sp, #32]
 8006be0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006be2:	9804      	ldr	r0, [sp, #16]
 8006be4:	f001 fe66 	bl	80088b4 <__lshift>
 8006be8:	9022      	str	r0, [sp, #136]	; 0x88
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d000      	beq.n	8006bf0 <_strtod_l+0x87c>
 8006bee:	e776      	b.n	8006ade <_strtod_l+0x76a>
 8006bf0:	e5f6      	b.n	80067e0 <_strtod_l+0x46c>
 8006bf2:	970c      	str	r7, [sp, #48]	; 0x30
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d000      	beq.n	8006bfa <_strtod_l+0x886>
 8006bf8:	e0a0      	b.n	8006d3c <_strtod_l+0x9c8>
 8006bfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bfc:	033b      	lsls	r3, r7, #12
 8006bfe:	0b1b      	lsrs	r3, r3, #12
 8006c00:	2a00      	cmp	r2, #0
 8006c02:	d027      	beq.n	8006c54 <_strtod_l+0x8e0>
 8006c04:	4a49      	ldr	r2, [pc, #292]	; (8006d2c <_strtod_l+0x9b8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d157      	bne.n	8006cba <_strtod_l+0x946>
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	9b06      	ldr	r3, [sp, #24]
 8006c0e:	4252      	negs	r2, r2
 8006c10:	0031      	movs	r1, r6
 8006c12:	0010      	movs	r0, r2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <_strtod_l+0x8bc>
 8006c18:	25d4      	movs	r5, #212	; 0xd4
 8006c1a:	4b41      	ldr	r3, [pc, #260]	; (8006d20 <_strtod_l+0x9ac>)
 8006c1c:	04ed      	lsls	r5, r5, #19
 8006c1e:	403b      	ands	r3, r7
 8006c20:	0010      	movs	r0, r2
 8006c22:	42ab      	cmp	r3, r5
 8006c24:	d804      	bhi.n	8006c30 <_strtod_l+0x8bc>
 8006c26:	306c      	adds	r0, #108	; 0x6c
 8006c28:	0d1b      	lsrs	r3, r3, #20
 8006c2a:	1ac3      	subs	r3, r0, r3
 8006c2c:	409a      	lsls	r2, r3
 8006c2e:	0010      	movs	r0, r2
 8006c30:	4281      	cmp	r1, r0
 8006c32:	d142      	bne.n	8006cba <_strtod_l+0x946>
 8006c34:	4b3e      	ldr	r3, [pc, #248]	; (8006d30 <_strtod_l+0x9bc>)
 8006c36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d102      	bne.n	8006c42 <_strtod_l+0x8ce>
 8006c3c:	1c4b      	adds	r3, r1, #1
 8006c3e:	d100      	bne.n	8006c42 <_strtod_l+0x8ce>
 8006c40:	e5ce      	b.n	80067e0 <_strtod_l+0x46c>
 8006c42:	4b37      	ldr	r3, [pc, #220]	; (8006d20 <_strtod_l+0x9ac>)
 8006c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c46:	2600      	movs	r6, #0
 8006c48:	401a      	ands	r2, r3
 8006c4a:	0013      	movs	r3, r2
 8006c4c:	2280      	movs	r2, #128	; 0x80
 8006c4e:	0352      	lsls	r2, r2, #13
 8006c50:	189f      	adds	r7, r3, r2
 8006c52:	e797      	b.n	8006b84 <_strtod_l+0x810>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d130      	bne.n	8006cba <_strtod_l+0x946>
 8006c58:	2e00      	cmp	r6, #0
 8006c5a:	d12e      	bne.n	8006cba <_strtod_l+0x946>
 8006c5c:	9906      	ldr	r1, [sp, #24]
 8006c5e:	003b      	movs	r3, r7
 8006c60:	4a2f      	ldr	r2, [pc, #188]	; (8006d20 <_strtod_l+0x9ac>)
 8006c62:	2900      	cmp	r1, #0
 8006c64:	d020      	beq.n	8006ca8 <_strtod_l+0x934>
 8006c66:	0011      	movs	r1, r2
 8006c68:	20d6      	movs	r0, #214	; 0xd6
 8006c6a:	4039      	ands	r1, r7
 8006c6c:	04c0      	lsls	r0, r0, #19
 8006c6e:	4281      	cmp	r1, r0
 8006c70:	dc1a      	bgt.n	8006ca8 <_strtod_l+0x934>
 8006c72:	23dc      	movs	r3, #220	; 0xdc
 8006c74:	049b      	lsls	r3, r3, #18
 8006c76:	4299      	cmp	r1, r3
 8006c78:	dc00      	bgt.n	8006c7c <_strtod_l+0x908>
 8006c7a:	e646      	b.n	800690a <_strtod_l+0x596>
 8006c7c:	4b2d      	ldr	r3, [pc, #180]	; (8006d34 <_strtod_l+0x9c0>)
 8006c7e:	0030      	movs	r0, r6
 8006c80:	931b      	str	r3, [sp, #108]	; 0x6c
 8006c82:	2300      	movs	r3, #0
 8006c84:	931a      	str	r3, [sp, #104]	; 0x68
 8006c86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c8a:	0039      	movs	r1, r7
 8006c8c:	f7fa fd28 	bl	80016e0 <__aeabi_dmul>
 8006c90:	0006      	movs	r6, r0
 8006c92:	000f      	movs	r7, r1
 8006c94:	1e0b      	subs	r3, r1, #0
 8006c96:	d000      	beq.n	8006c9a <_strtod_l+0x926>
 8006c98:	e5ab      	b.n	80067f2 <_strtod_l+0x47e>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d000      	beq.n	8006ca0 <_strtod_l+0x92c>
 8006c9e:	e5a8      	b.n	80067f2 <_strtod_l+0x47e>
 8006ca0:	9a04      	ldr	r2, [sp, #16]
 8006ca2:	3322      	adds	r3, #34	; 0x22
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	e5a4      	b.n	80067f2 <_strtod_l+0x47e>
 8006ca8:	2601      	movs	r6, #1
 8006caa:	4013      	ands	r3, r2
 8006cac:	4a22      	ldr	r2, [pc, #136]	; (8006d38 <_strtod_l+0x9c4>)
 8006cae:	4276      	negs	r6, r6
 8006cb0:	189b      	adds	r3, r3, r2
 8006cb2:	4a1e      	ldr	r2, [pc, #120]	; (8006d2c <_strtod_l+0x9b8>)
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	0017      	movs	r7, r2
 8006cb8:	e764      	b.n	8006b84 <_strtod_l+0x810>
 8006cba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d015      	beq.n	8006cec <_strtod_l+0x978>
 8006cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cc4:	4213      	tst	r3, r2
 8006cc6:	d100      	bne.n	8006cca <_strtod_l+0x956>
 8006cc8:	e75c      	b.n	8006b84 <_strtod_l+0x810>
 8006cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ccc:	9a06      	ldr	r2, [sp, #24]
 8006cce:	0030      	movs	r0, r6
 8006cd0:	0039      	movs	r1, r7
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00f      	beq.n	8006cf6 <_strtod_l+0x982>
 8006cd6:	f7ff fb35 	bl	8006344 <sulp>
 8006cda:	0002      	movs	r2, r0
 8006cdc:	000b      	movs	r3, r1
 8006cde:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006ce0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ce2:	f7f9 fdd7 	bl	8000894 <__aeabi_dadd>
 8006ce6:	0006      	movs	r6, r0
 8006ce8:	000f      	movs	r7, r1
 8006cea:	e74b      	b.n	8006b84 <_strtod_l+0x810>
 8006cec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006cee:	4233      	tst	r3, r6
 8006cf0:	d100      	bne.n	8006cf4 <_strtod_l+0x980>
 8006cf2:	e747      	b.n	8006b84 <_strtod_l+0x810>
 8006cf4:	e7e9      	b.n	8006cca <_strtod_l+0x956>
 8006cf6:	f7ff fb25 	bl	8006344 <sulp>
 8006cfa:	0002      	movs	r2, r0
 8006cfc:	000b      	movs	r3, r1
 8006cfe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006d00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006d02:	f7fa ff5f 	bl	8001bc4 <__aeabi_dsub>
 8006d06:	2200      	movs	r2, #0
 8006d08:	2300      	movs	r3, #0
 8006d0a:	0006      	movs	r6, r0
 8006d0c:	000f      	movs	r7, r1
 8006d0e:	f7f9 fb93 	bl	8000438 <__aeabi_dcmpeq>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d000      	beq.n	8006d18 <_strtod_l+0x9a4>
 8006d16:	e5f8      	b.n	800690a <_strtod_l+0x596>
 8006d18:	e734      	b.n	8006b84 <_strtod_l+0x810>
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	fffffc02 	.word	0xfffffc02
 8006d20:	7ff00000 	.word	0x7ff00000
 8006d24:	08009330 	.word	0x08009330
 8006d28:	fffffbe2 	.word	0xfffffbe2
 8006d2c:	000fffff 	.word	0x000fffff
 8006d30:	7fefffff 	.word	0x7fefffff
 8006d34:	39500000 	.word	0x39500000
 8006d38:	fff00000 	.word	0xfff00000
 8006d3c:	9905      	ldr	r1, [sp, #20]
 8006d3e:	0020      	movs	r0, r4
 8006d40:	f001 ff4e 	bl	8008be0 <__ratio>
 8006d44:	2380      	movs	r3, #128	; 0x80
 8006d46:	2200      	movs	r2, #0
 8006d48:	05db      	lsls	r3, r3, #23
 8006d4a:	9008      	str	r0, [sp, #32]
 8006d4c:	9109      	str	r1, [sp, #36]	; 0x24
 8006d4e:	f7f9 fb83 	bl	8000458 <__aeabi_dcmple>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d100      	bne.n	8006d58 <_strtod_l+0x9e4>
 8006d56:	e07f      	b.n	8006e58 <_strtod_l+0xae4>
 8006d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d04b      	beq.n	8006df6 <_strtod_l+0xa82>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4b8a      	ldr	r3, [pc, #552]	; (8006f8c <_strtod_l+0xc18>)
 8006d62:	9210      	str	r2, [sp, #64]	; 0x40
 8006d64:	9311      	str	r3, [sp, #68]	; 0x44
 8006d66:	4b89      	ldr	r3, [pc, #548]	; (8006f8c <_strtod_l+0xc18>)
 8006d68:	9308      	str	r3, [sp, #32]
 8006d6a:	4a89      	ldr	r2, [pc, #548]	; (8006f90 <_strtod_l+0xc1c>)
 8006d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d6e:	4013      	ands	r3, r2
 8006d70:	9314      	str	r3, [sp, #80]	; 0x50
 8006d72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d74:	4b87      	ldr	r3, [pc, #540]	; (8006f94 <_strtod_l+0xc20>)
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d000      	beq.n	8006d7c <_strtod_l+0xa08>
 8006d7a:	e0ba      	b.n	8006ef2 <_strtod_l+0xb7e>
 8006d7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d80:	921a      	str	r2, [sp, #104]	; 0x68
 8006d82:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d84:	4a84      	ldr	r2, [pc, #528]	; (8006f98 <_strtod_l+0xc24>)
 8006d86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d88:	4694      	mov	ip, r2
 8006d8a:	4463      	add	r3, ip
 8006d8c:	001f      	movs	r7, r3
 8006d8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d92:	0030      	movs	r0, r6
 8006d94:	0039      	movs	r1, r7
 8006d96:	920c      	str	r2, [sp, #48]	; 0x30
 8006d98:	930d      	str	r3, [sp, #52]	; 0x34
 8006d9a:	f001 fe5b 	bl	8008a54 <__ulp>
 8006d9e:	0002      	movs	r2, r0
 8006da0:	000b      	movs	r3, r1
 8006da2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006da4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006da6:	f7fa fc9b 	bl	80016e0 <__aeabi_dmul>
 8006daa:	0032      	movs	r2, r6
 8006dac:	003b      	movs	r3, r7
 8006dae:	f7f9 fd71 	bl	8000894 <__aeabi_dadd>
 8006db2:	4a77      	ldr	r2, [pc, #476]	; (8006f90 <_strtod_l+0xc1c>)
 8006db4:	4b79      	ldr	r3, [pc, #484]	; (8006f9c <_strtod_l+0xc28>)
 8006db6:	0006      	movs	r6, r0
 8006db8:	400a      	ands	r2, r1
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d964      	bls.n	8006e88 <_strtod_l+0xb14>
 8006dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dc0:	4a77      	ldr	r2, [pc, #476]	; (8006fa0 <_strtod_l+0xc2c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d103      	bne.n	8006dce <_strtod_l+0xa5a>
 8006dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dc8:	3301      	adds	r3, #1
 8006dca:	d100      	bne.n	8006dce <_strtod_l+0xa5a>
 8006dcc:	e508      	b.n	80067e0 <_strtod_l+0x46c>
 8006dce:	2601      	movs	r6, #1
 8006dd0:	4f73      	ldr	r7, [pc, #460]	; (8006fa0 <_strtod_l+0xc2c>)
 8006dd2:	4276      	negs	r6, r6
 8006dd4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006dd6:	9804      	ldr	r0, [sp, #16]
 8006dd8:	f001 fba4 	bl	8008524 <_Bfree>
 8006ddc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006dde:	9804      	ldr	r0, [sp, #16]
 8006de0:	f001 fba0 	bl	8008524 <_Bfree>
 8006de4:	9905      	ldr	r1, [sp, #20]
 8006de6:	9804      	ldr	r0, [sp, #16]
 8006de8:	f001 fb9c 	bl	8008524 <_Bfree>
 8006dec:	0021      	movs	r1, r4
 8006dee:	9804      	ldr	r0, [sp, #16]
 8006df0:	f001 fb98 	bl	8008524 <_Bfree>
 8006df4:	e5f4      	b.n	80069e0 <_strtod_l+0x66c>
 8006df6:	2e00      	cmp	r6, #0
 8006df8:	d11e      	bne.n	8006e38 <_strtod_l+0xac4>
 8006dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dfc:	031b      	lsls	r3, r3, #12
 8006dfe:	d121      	bne.n	8006e44 <_strtod_l+0xad0>
 8006e00:	9808      	ldr	r0, [sp, #32]
 8006e02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e04:	2200      	movs	r2, #0
 8006e06:	4b61      	ldr	r3, [pc, #388]	; (8006f8c <_strtod_l+0xc18>)
 8006e08:	f7f9 fb1c 	bl	8000444 <__aeabi_dcmplt>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d11f      	bne.n	8006e50 <_strtod_l+0xadc>
 8006e10:	9808      	ldr	r0, [sp, #32]
 8006e12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e14:	2200      	movs	r2, #0
 8006e16:	4b63      	ldr	r3, [pc, #396]	; (8006fa4 <_strtod_l+0xc30>)
 8006e18:	f7fa fc62 	bl	80016e0 <__aeabi_dmul>
 8006e1c:	0005      	movs	r5, r0
 8006e1e:	9108      	str	r1, [sp, #32]
 8006e20:	2280      	movs	r2, #128	; 0x80
 8006e22:	0612      	lsls	r2, r2, #24
 8006e24:	4694      	mov	ip, r2
 8006e26:	9b08      	ldr	r3, [sp, #32]
 8006e28:	951e      	str	r5, [sp, #120]	; 0x78
 8006e2a:	4463      	add	r3, ip
 8006e2c:	931f      	str	r3, [sp, #124]	; 0x7c
 8006e2e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e32:	9210      	str	r2, [sp, #64]	; 0x40
 8006e34:	9311      	str	r3, [sp, #68]	; 0x44
 8006e36:	e798      	b.n	8006d6a <_strtod_l+0x9f6>
 8006e38:	2e01      	cmp	r6, #1
 8006e3a:	d103      	bne.n	8006e44 <_strtod_l+0xad0>
 8006e3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d100      	bne.n	8006e44 <_strtod_l+0xad0>
 8006e42:	e562      	b.n	800690a <_strtod_l+0x596>
 8006e44:	2200      	movs	r2, #0
 8006e46:	4b58      	ldr	r3, [pc, #352]	; (8006fa8 <_strtod_l+0xc34>)
 8006e48:	2500      	movs	r5, #0
 8006e4a:	9210      	str	r2, [sp, #64]	; 0x40
 8006e4c:	9311      	str	r3, [sp, #68]	; 0x44
 8006e4e:	e78a      	b.n	8006d66 <_strtod_l+0x9f2>
 8006e50:	4b54      	ldr	r3, [pc, #336]	; (8006fa4 <_strtod_l+0xc30>)
 8006e52:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006e54:	9308      	str	r3, [sp, #32]
 8006e56:	e7e3      	b.n	8006e20 <_strtod_l+0xaac>
 8006e58:	4b52      	ldr	r3, [pc, #328]	; (8006fa4 <_strtod_l+0xc30>)
 8006e5a:	9808      	ldr	r0, [sp, #32]
 8006e5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f7fa fc3e 	bl	80016e0 <__aeabi_dmul>
 8006e64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e66:	0005      	movs	r5, r0
 8006e68:	9108      	str	r1, [sp, #32]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d107      	bne.n	8006e7e <_strtod_l+0xb0a>
 8006e6e:	2380      	movs	r3, #128	; 0x80
 8006e70:	061b      	lsls	r3, r3, #24
 8006e72:	18cb      	adds	r3, r1, r3
 8006e74:	9016      	str	r0, [sp, #88]	; 0x58
 8006e76:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e78:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e7c:	e7d9      	b.n	8006e32 <_strtod_l+0xabe>
 8006e7e:	0002      	movs	r2, r0
 8006e80:	9b08      	ldr	r3, [sp, #32]
 8006e82:	9216      	str	r2, [sp, #88]	; 0x58
 8006e84:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e86:	e7f7      	b.n	8006e78 <_strtod_l+0xb04>
 8006e88:	23d4      	movs	r3, #212	; 0xd4
 8006e8a:	049b      	lsls	r3, r3, #18
 8006e8c:	18cf      	adds	r7, r1, r3
 8006e8e:	9b06      	ldr	r3, [sp, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d19f      	bne.n	8006dd4 <_strtod_l+0xa60>
 8006e94:	4b3e      	ldr	r3, [pc, #248]	; (8006f90 <_strtod_l+0xc1c>)
 8006e96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e98:	970c      	str	r7, [sp, #48]	; 0x30
 8006e9a:	403b      	ands	r3, r7
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d199      	bne.n	8006dd4 <_strtod_l+0xa60>
 8006ea0:	9908      	ldr	r1, [sp, #32]
 8006ea2:	0028      	movs	r0, r5
 8006ea4:	f7fb f9f2 	bl	800228c <__aeabi_d2iz>
 8006ea8:	f7fb fa26 	bl	80022f8 <__aeabi_i2d>
 8006eac:	000b      	movs	r3, r1
 8006eae:	0002      	movs	r2, r0
 8006eb0:	9908      	ldr	r1, [sp, #32]
 8006eb2:	0028      	movs	r0, r5
 8006eb4:	f7fa fe86 	bl	8001bc4 <__aeabi_dsub>
 8006eb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006eba:	9008      	str	r0, [sp, #32]
 8006ebc:	9109      	str	r1, [sp, #36]	; 0x24
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d104      	bne.n	8006ecc <_strtod_l+0xb58>
 8006ec2:	2e00      	cmp	r6, #0
 8006ec4:	d102      	bne.n	8006ecc <_strtod_l+0xb58>
 8006ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ec8:	031b      	lsls	r3, r3, #12
 8006eca:	d058      	beq.n	8006f7e <_strtod_l+0xc0a>
 8006ecc:	9808      	ldr	r0, [sp, #32]
 8006ece:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ed0:	4a36      	ldr	r2, [pc, #216]	; (8006fac <_strtod_l+0xc38>)
 8006ed2:	4b37      	ldr	r3, [pc, #220]	; (8006fb0 <_strtod_l+0xc3c>)
 8006ed4:	f7f9 fab6 	bl	8000444 <__aeabi_dcmplt>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d000      	beq.n	8006ede <_strtod_l+0xb6a>
 8006edc:	e489      	b.n	80067f2 <_strtod_l+0x47e>
 8006ede:	9808      	ldr	r0, [sp, #32]
 8006ee0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ee2:	4a34      	ldr	r2, [pc, #208]	; (8006fb4 <_strtod_l+0xc40>)
 8006ee4:	4b2f      	ldr	r3, [pc, #188]	; (8006fa4 <_strtod_l+0xc30>)
 8006ee6:	f7f9 fac1 	bl	800046c <__aeabi_dcmpgt>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d100      	bne.n	8006ef0 <_strtod_l+0xb7c>
 8006eee:	e771      	b.n	8006dd4 <_strtod_l+0xa60>
 8006ef0:	e47f      	b.n	80067f2 <_strtod_l+0x47e>
 8006ef2:	9b06      	ldr	r3, [sp, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d02a      	beq.n	8006f4e <_strtod_l+0xbda>
 8006ef8:	23d4      	movs	r3, #212	; 0xd4
 8006efa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006efc:	04db      	lsls	r3, r3, #19
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d825      	bhi.n	8006f4e <_strtod_l+0xbda>
 8006f02:	4a2d      	ldr	r2, [pc, #180]	; (8006fb8 <_strtod_l+0xc44>)
 8006f04:	4b2d      	ldr	r3, [pc, #180]	; (8006fbc <_strtod_l+0xc48>)
 8006f06:	0028      	movs	r0, r5
 8006f08:	9908      	ldr	r1, [sp, #32]
 8006f0a:	f7f9 faa5 	bl	8000458 <__aeabi_dcmple>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d016      	beq.n	8006f40 <_strtod_l+0xbcc>
 8006f12:	0028      	movs	r0, r5
 8006f14:	9908      	ldr	r1, [sp, #32]
 8006f16:	f7f9 fb17 	bl	8000548 <__aeabi_d2uiz>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d100      	bne.n	8006f20 <_strtod_l+0xbac>
 8006f1e:	3001      	adds	r0, #1
 8006f20:	f7fb fa24 	bl	800236c <__aeabi_ui2d>
 8006f24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f26:	0005      	movs	r5, r0
 8006f28:	9108      	str	r1, [sp, #32]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d122      	bne.n	8006f74 <_strtod_l+0xc00>
 8006f2e:	2380      	movs	r3, #128	; 0x80
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	18cb      	adds	r3, r1, r3
 8006f34:	9018      	str	r0, [sp, #96]	; 0x60
 8006f36:	9319      	str	r3, [sp, #100]	; 0x64
 8006f38:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f3c:	9210      	str	r2, [sp, #64]	; 0x40
 8006f3e:	9311      	str	r3, [sp, #68]	; 0x44
 8006f40:	22d6      	movs	r2, #214	; 0xd6
 8006f42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f44:	04d2      	lsls	r2, r2, #19
 8006f46:	189b      	adds	r3, r3, r2
 8006f48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	9311      	str	r3, [sp, #68]	; 0x44
 8006f4e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006f50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f52:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006f54:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8006f56:	f001 fd7d 	bl	8008a54 <__ulp>
 8006f5a:	0002      	movs	r2, r0
 8006f5c:	000b      	movs	r3, r1
 8006f5e:	0030      	movs	r0, r6
 8006f60:	0039      	movs	r1, r7
 8006f62:	f7fa fbbd 	bl	80016e0 <__aeabi_dmul>
 8006f66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f6a:	f7f9 fc93 	bl	8000894 <__aeabi_dadd>
 8006f6e:	0006      	movs	r6, r0
 8006f70:	000f      	movs	r7, r1
 8006f72:	e78c      	b.n	8006e8e <_strtod_l+0xb1a>
 8006f74:	0002      	movs	r2, r0
 8006f76:	9b08      	ldr	r3, [sp, #32]
 8006f78:	9218      	str	r2, [sp, #96]	; 0x60
 8006f7a:	9319      	str	r3, [sp, #100]	; 0x64
 8006f7c:	e7dc      	b.n	8006f38 <_strtod_l+0xbc4>
 8006f7e:	4a0b      	ldr	r2, [pc, #44]	; (8006fac <_strtod_l+0xc38>)
 8006f80:	4b0f      	ldr	r3, [pc, #60]	; (8006fc0 <_strtod_l+0xc4c>)
 8006f82:	9808      	ldr	r0, [sp, #32]
 8006f84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f86:	f7f9 fa5d 	bl	8000444 <__aeabi_dcmplt>
 8006f8a:	e7ae      	b.n	8006eea <_strtod_l+0xb76>
 8006f8c:	3ff00000 	.word	0x3ff00000
 8006f90:	7ff00000 	.word	0x7ff00000
 8006f94:	7fe00000 	.word	0x7fe00000
 8006f98:	fcb00000 	.word	0xfcb00000
 8006f9c:	7c9fffff 	.word	0x7c9fffff
 8006fa0:	7fefffff 	.word	0x7fefffff
 8006fa4:	3fe00000 	.word	0x3fe00000
 8006fa8:	bff00000 	.word	0xbff00000
 8006fac:	94a03595 	.word	0x94a03595
 8006fb0:	3fdfffff 	.word	0x3fdfffff
 8006fb4:	35afe535 	.word	0x35afe535
 8006fb8:	ffc00000 	.word	0xffc00000
 8006fbc:	41dfffff 	.word	0x41dfffff
 8006fc0:	3fcfffff 	.word	0x3fcfffff

08006fc4 <_strtod_r>:
 8006fc4:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <_strtod_r+0x14>)
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d100      	bne.n	8006fd2 <_strtod_r+0xe>
 8006fd0:	4b02      	ldr	r3, [pc, #8]	; (8006fdc <_strtod_r+0x18>)
 8006fd2:	f7ff f9cf 	bl	8006374 <_strtod_l>
 8006fd6:	bd10      	pop	{r4, pc}
 8006fd8:	2000000c 	.word	0x2000000c
 8006fdc:	20000070 	.word	0x20000070

08006fe0 <_strtol_l.isra.0>:
 8006fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe2:	001f      	movs	r7, r3
 8006fe4:	000e      	movs	r6, r1
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	9005      	str	r0, [sp, #20]
 8006fea:	9101      	str	r1, [sp, #4]
 8006fec:	9202      	str	r2, [sp, #8]
 8006fee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ff0:	7834      	ldrb	r4, [r6, #0]
 8006ff2:	f001 fa1e 	bl	8008432 <__locale_ctype_ptr_l>
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	1900      	adds	r0, r0, r4
 8006ffa:	7843      	ldrb	r3, [r0, #1]
 8006ffc:	1c75      	adds	r5, r6, #1
 8006ffe:	4013      	ands	r3, r2
 8007000:	d136      	bne.n	8007070 <_strtol_l.isra.0+0x90>
 8007002:	2c2d      	cmp	r4, #45	; 0x2d
 8007004:	d136      	bne.n	8007074 <_strtol_l.isra.0+0x94>
 8007006:	1cb5      	adds	r5, r6, #2
 8007008:	7874      	ldrb	r4, [r6, #1]
 800700a:	2601      	movs	r6, #1
 800700c:	2f00      	cmp	r7, #0
 800700e:	d062      	beq.n	80070d6 <_strtol_l.isra.0+0xf6>
 8007010:	2f10      	cmp	r7, #16
 8007012:	d109      	bne.n	8007028 <_strtol_l.isra.0+0x48>
 8007014:	2c30      	cmp	r4, #48	; 0x30
 8007016:	d107      	bne.n	8007028 <_strtol_l.isra.0+0x48>
 8007018:	2220      	movs	r2, #32
 800701a:	782b      	ldrb	r3, [r5, #0]
 800701c:	4393      	bics	r3, r2
 800701e:	2b58      	cmp	r3, #88	; 0x58
 8007020:	d154      	bne.n	80070cc <_strtol_l.isra.0+0xec>
 8007022:	2710      	movs	r7, #16
 8007024:	786c      	ldrb	r4, [r5, #1]
 8007026:	3502      	adds	r5, #2
 8007028:	4b2d      	ldr	r3, [pc, #180]	; (80070e0 <_strtol_l.isra.0+0x100>)
 800702a:	0039      	movs	r1, r7
 800702c:	18f3      	adds	r3, r6, r3
 800702e:	0018      	movs	r0, r3
 8007030:	9303      	str	r3, [sp, #12]
 8007032:	f7f9 f901 	bl	8000238 <__aeabi_uidivmod>
 8007036:	9104      	str	r1, [sp, #16]
 8007038:	2101      	movs	r1, #1
 800703a:	2300      	movs	r3, #0
 800703c:	4249      	negs	r1, r1
 800703e:	0002      	movs	r2, r0
 8007040:	468c      	mov	ip, r1
 8007042:	0018      	movs	r0, r3
 8007044:	0021      	movs	r1, r4
 8007046:	3930      	subs	r1, #48	; 0x30
 8007048:	2909      	cmp	r1, #9
 800704a:	d81a      	bhi.n	8007082 <_strtol_l.isra.0+0xa2>
 800704c:	000c      	movs	r4, r1
 800704e:	42a7      	cmp	r7, r4
 8007050:	dd23      	ble.n	800709a <_strtol_l.isra.0+0xba>
 8007052:	1c59      	adds	r1, r3, #1
 8007054:	d009      	beq.n	800706a <_strtol_l.isra.0+0x8a>
 8007056:	4663      	mov	r3, ip
 8007058:	4282      	cmp	r2, r0
 800705a:	d306      	bcc.n	800706a <_strtol_l.isra.0+0x8a>
 800705c:	d102      	bne.n	8007064 <_strtol_l.isra.0+0x84>
 800705e:	9904      	ldr	r1, [sp, #16]
 8007060:	42a1      	cmp	r1, r4
 8007062:	db02      	blt.n	800706a <_strtol_l.isra.0+0x8a>
 8007064:	2301      	movs	r3, #1
 8007066:	4378      	muls	r0, r7
 8007068:	1820      	adds	r0, r4, r0
 800706a:	782c      	ldrb	r4, [r5, #0]
 800706c:	3501      	adds	r5, #1
 800706e:	e7e9      	b.n	8007044 <_strtol_l.isra.0+0x64>
 8007070:	002e      	movs	r6, r5
 8007072:	e7bc      	b.n	8006fee <_strtol_l.isra.0+0xe>
 8007074:	2c2b      	cmp	r4, #43	; 0x2b
 8007076:	d001      	beq.n	800707c <_strtol_l.isra.0+0x9c>
 8007078:	001e      	movs	r6, r3
 800707a:	e7c7      	b.n	800700c <_strtol_l.isra.0+0x2c>
 800707c:	1cb5      	adds	r5, r6, #2
 800707e:	7874      	ldrb	r4, [r6, #1]
 8007080:	e7fa      	b.n	8007078 <_strtol_l.isra.0+0x98>
 8007082:	0021      	movs	r1, r4
 8007084:	3941      	subs	r1, #65	; 0x41
 8007086:	2919      	cmp	r1, #25
 8007088:	d801      	bhi.n	800708e <_strtol_l.isra.0+0xae>
 800708a:	3c37      	subs	r4, #55	; 0x37
 800708c:	e7df      	b.n	800704e <_strtol_l.isra.0+0x6e>
 800708e:	0021      	movs	r1, r4
 8007090:	3961      	subs	r1, #97	; 0x61
 8007092:	2919      	cmp	r1, #25
 8007094:	d801      	bhi.n	800709a <_strtol_l.isra.0+0xba>
 8007096:	3c57      	subs	r4, #87	; 0x57
 8007098:	e7d9      	b.n	800704e <_strtol_l.isra.0+0x6e>
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	d108      	bne.n	80070b0 <_strtol_l.isra.0+0xd0>
 800709e:	9a05      	ldr	r2, [sp, #20]
 80070a0:	3323      	adds	r3, #35	; 0x23
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	9b02      	ldr	r3, [sp, #8]
 80070a6:	9803      	ldr	r0, [sp, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d109      	bne.n	80070c0 <_strtol_l.isra.0+0xe0>
 80070ac:	b007      	add	sp, #28
 80070ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b0:	2e00      	cmp	r6, #0
 80070b2:	d000      	beq.n	80070b6 <_strtol_l.isra.0+0xd6>
 80070b4:	4240      	negs	r0, r0
 80070b6:	9a02      	ldr	r2, [sp, #8]
 80070b8:	2a00      	cmp	r2, #0
 80070ba:	d0f7      	beq.n	80070ac <_strtol_l.isra.0+0xcc>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <_strtol_l.isra.0+0xe4>
 80070c0:	1e6b      	subs	r3, r5, #1
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	9b02      	ldr	r3, [sp, #8]
 80070c6:	9a01      	ldr	r2, [sp, #4]
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e7ef      	b.n	80070ac <_strtol_l.isra.0+0xcc>
 80070cc:	2430      	movs	r4, #48	; 0x30
 80070ce:	2f00      	cmp	r7, #0
 80070d0:	d1aa      	bne.n	8007028 <_strtol_l.isra.0+0x48>
 80070d2:	2708      	movs	r7, #8
 80070d4:	e7a8      	b.n	8007028 <_strtol_l.isra.0+0x48>
 80070d6:	2c30      	cmp	r4, #48	; 0x30
 80070d8:	d09e      	beq.n	8007018 <_strtol_l.isra.0+0x38>
 80070da:	270a      	movs	r7, #10
 80070dc:	e7a4      	b.n	8007028 <_strtol_l.isra.0+0x48>
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	7fffffff 	.word	0x7fffffff

080070e4 <_strtol_r>:
 80070e4:	b513      	push	{r0, r1, r4, lr}
 80070e6:	4c05      	ldr	r4, [pc, #20]	; (80070fc <_strtol_r+0x18>)
 80070e8:	6824      	ldr	r4, [r4, #0]
 80070ea:	6a24      	ldr	r4, [r4, #32]
 80070ec:	2c00      	cmp	r4, #0
 80070ee:	d100      	bne.n	80070f2 <_strtol_r+0xe>
 80070f0:	4c03      	ldr	r4, [pc, #12]	; (8007100 <_strtol_r+0x1c>)
 80070f2:	9400      	str	r4, [sp, #0]
 80070f4:	f7ff ff74 	bl	8006fe0 <_strtol_l.isra.0>
 80070f8:	bd16      	pop	{r1, r2, r4, pc}
 80070fa:	46c0      	nop			; (mov r8, r8)
 80070fc:	2000000c 	.word	0x2000000c
 8007100:	20000070 	.word	0x20000070

08007104 <quorem>:
 8007104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007106:	6903      	ldr	r3, [r0, #16]
 8007108:	690c      	ldr	r4, [r1, #16]
 800710a:	b089      	sub	sp, #36	; 0x24
 800710c:	0007      	movs	r7, r0
 800710e:	9105      	str	r1, [sp, #20]
 8007110:	2600      	movs	r6, #0
 8007112:	42a3      	cmp	r3, r4
 8007114:	db65      	blt.n	80071e2 <quorem+0xde>
 8007116:	000b      	movs	r3, r1
 8007118:	3c01      	subs	r4, #1
 800711a:	3314      	adds	r3, #20
 800711c:	00a5      	lsls	r5, r4, #2
 800711e:	9303      	str	r3, [sp, #12]
 8007120:	195b      	adds	r3, r3, r5
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	0003      	movs	r3, r0
 8007126:	3314      	adds	r3, #20
 8007128:	9302      	str	r3, [sp, #8]
 800712a:	195d      	adds	r5, r3, r5
 800712c:	9b04      	ldr	r3, [sp, #16]
 800712e:	6828      	ldr	r0, [r5, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	1c59      	adds	r1, r3, #1
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	f7f8 fff9 	bl	800012c <__udivsi3>
 800713a:	9001      	str	r0, [sp, #4]
 800713c:	42b0      	cmp	r0, r6
 800713e:	d029      	beq.n	8007194 <quorem+0x90>
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	9802      	ldr	r0, [sp, #8]
 8007144:	469c      	mov	ip, r3
 8007146:	9606      	str	r6, [sp, #24]
 8007148:	4662      	mov	r2, ip
 800714a:	ca08      	ldmia	r2!, {r3}
 800714c:	4694      	mov	ip, r2
 800714e:	9a01      	ldr	r2, [sp, #4]
 8007150:	b299      	uxth	r1, r3
 8007152:	4351      	muls	r1, r2
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	4353      	muls	r3, r2
 8007158:	1989      	adds	r1, r1, r6
 800715a:	0c0a      	lsrs	r2, r1, #16
 800715c:	189b      	adds	r3, r3, r2
 800715e:	9307      	str	r3, [sp, #28]
 8007160:	0c1e      	lsrs	r6, r3, #16
 8007162:	6803      	ldr	r3, [r0, #0]
 8007164:	b289      	uxth	r1, r1
 8007166:	b29a      	uxth	r2, r3
 8007168:	9b06      	ldr	r3, [sp, #24]
 800716a:	18d2      	adds	r2, r2, r3
 800716c:	6803      	ldr	r3, [r0, #0]
 800716e:	1a52      	subs	r2, r2, r1
 8007170:	0c19      	lsrs	r1, r3, #16
 8007172:	466b      	mov	r3, sp
 8007174:	8b9b      	ldrh	r3, [r3, #28]
 8007176:	1acb      	subs	r3, r1, r3
 8007178:	1411      	asrs	r1, r2, #16
 800717a:	185b      	adds	r3, r3, r1
 800717c:	1419      	asrs	r1, r3, #16
 800717e:	b292      	uxth	r2, r2
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	431a      	orrs	r2, r3
 8007184:	9b04      	ldr	r3, [sp, #16]
 8007186:	9106      	str	r1, [sp, #24]
 8007188:	c004      	stmia	r0!, {r2}
 800718a:	4563      	cmp	r3, ip
 800718c:	d2dc      	bcs.n	8007148 <quorem+0x44>
 800718e:	682b      	ldr	r3, [r5, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d02d      	beq.n	80071f0 <quorem+0xec>
 8007194:	9905      	ldr	r1, [sp, #20]
 8007196:	0038      	movs	r0, r7
 8007198:	f001 fbde 	bl	8008958 <__mcmp>
 800719c:	2800      	cmp	r0, #0
 800719e:	db1f      	blt.n	80071e0 <quorem+0xdc>
 80071a0:	2500      	movs	r5, #0
 80071a2:	9b01      	ldr	r3, [sp, #4]
 80071a4:	9802      	ldr	r0, [sp, #8]
 80071a6:	3301      	adds	r3, #1
 80071a8:	9903      	ldr	r1, [sp, #12]
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	6802      	ldr	r2, [r0, #0]
 80071ae:	c908      	ldmia	r1!, {r3}
 80071b0:	b292      	uxth	r2, r2
 80071b2:	1955      	adds	r5, r2, r5
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	1aaa      	subs	r2, r5, r2
 80071b8:	6805      	ldr	r5, [r0, #0]
 80071ba:	0c1b      	lsrs	r3, r3, #16
 80071bc:	0c2d      	lsrs	r5, r5, #16
 80071be:	1aeb      	subs	r3, r5, r3
 80071c0:	1415      	asrs	r5, r2, #16
 80071c2:	195b      	adds	r3, r3, r5
 80071c4:	141d      	asrs	r5, r3, #16
 80071c6:	b292      	uxth	r2, r2
 80071c8:	041b      	lsls	r3, r3, #16
 80071ca:	4313      	orrs	r3, r2
 80071cc:	c008      	stmia	r0!, {r3}
 80071ce:	9b04      	ldr	r3, [sp, #16]
 80071d0:	428b      	cmp	r3, r1
 80071d2:	d2eb      	bcs.n	80071ac <quorem+0xa8>
 80071d4:	9a02      	ldr	r2, [sp, #8]
 80071d6:	00a3      	lsls	r3, r4, #2
 80071d8:	18d3      	adds	r3, r2, r3
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	2a00      	cmp	r2, #0
 80071de:	d011      	beq.n	8007204 <quorem+0x100>
 80071e0:	9e01      	ldr	r6, [sp, #4]
 80071e2:	0030      	movs	r0, r6
 80071e4:	b009      	add	sp, #36	; 0x24
 80071e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d104      	bne.n	80071f8 <quorem+0xf4>
 80071ee:	3c01      	subs	r4, #1
 80071f0:	9b02      	ldr	r3, [sp, #8]
 80071f2:	3d04      	subs	r5, #4
 80071f4:	42ab      	cmp	r3, r5
 80071f6:	d3f7      	bcc.n	80071e8 <quorem+0xe4>
 80071f8:	613c      	str	r4, [r7, #16]
 80071fa:	e7cb      	b.n	8007194 <quorem+0x90>
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	2a00      	cmp	r2, #0
 8007200:	d104      	bne.n	800720c <quorem+0x108>
 8007202:	3c01      	subs	r4, #1
 8007204:	9a02      	ldr	r2, [sp, #8]
 8007206:	3b04      	subs	r3, #4
 8007208:	429a      	cmp	r2, r3
 800720a:	d3f7      	bcc.n	80071fc <quorem+0xf8>
 800720c:	613c      	str	r4, [r7, #16]
 800720e:	e7e7      	b.n	80071e0 <quorem+0xdc>

08007210 <_dtoa_r>:
 8007210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007212:	0016      	movs	r6, r2
 8007214:	001f      	movs	r7, r3
 8007216:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007218:	b09b      	sub	sp, #108	; 0x6c
 800721a:	9002      	str	r0, [sp, #8]
 800721c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800721e:	9606      	str	r6, [sp, #24]
 8007220:	9707      	str	r7, [sp, #28]
 8007222:	2c00      	cmp	r4, #0
 8007224:	d108      	bne.n	8007238 <_dtoa_r+0x28>
 8007226:	2010      	movs	r0, #16
 8007228:	f001 f914 	bl	8008454 <malloc>
 800722c:	9b02      	ldr	r3, [sp, #8]
 800722e:	6258      	str	r0, [r3, #36]	; 0x24
 8007230:	6044      	str	r4, [r0, #4]
 8007232:	6084      	str	r4, [r0, #8]
 8007234:	6004      	str	r4, [r0, #0]
 8007236:	60c4      	str	r4, [r0, #12]
 8007238:	9b02      	ldr	r3, [sp, #8]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	6819      	ldr	r1, [r3, #0]
 800723e:	2900      	cmp	r1, #0
 8007240:	d00b      	beq.n	800725a <_dtoa_r+0x4a>
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	2301      	movs	r3, #1
 8007246:	4093      	lsls	r3, r2
 8007248:	604a      	str	r2, [r1, #4]
 800724a:	608b      	str	r3, [r1, #8]
 800724c:	9802      	ldr	r0, [sp, #8]
 800724e:	f001 f969 	bl	8008524 <_Bfree>
 8007252:	2200      	movs	r2, #0
 8007254:	9b02      	ldr	r3, [sp, #8]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	2f00      	cmp	r7, #0
 800725c:	da20      	bge.n	80072a0 <_dtoa_r+0x90>
 800725e:	2301      	movs	r3, #1
 8007260:	602b      	str	r3, [r5, #0]
 8007262:	007b      	lsls	r3, r7, #1
 8007264:	085b      	lsrs	r3, r3, #1
 8007266:	9307      	str	r3, [sp, #28]
 8007268:	9c07      	ldr	r4, [sp, #28]
 800726a:	4bb2      	ldr	r3, [pc, #712]	; (8007534 <_dtoa_r+0x324>)
 800726c:	0022      	movs	r2, r4
 800726e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007270:	401a      	ands	r2, r3
 8007272:	429a      	cmp	r2, r3
 8007274:	d117      	bne.n	80072a6 <_dtoa_r+0x96>
 8007276:	4bb0      	ldr	r3, [pc, #704]	; (8007538 <_dtoa_r+0x328>)
 8007278:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	9b06      	ldr	r3, [sp, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d103      	bne.n	800728a <_dtoa_r+0x7a>
 8007282:	0324      	lsls	r4, r4, #12
 8007284:	d101      	bne.n	800728a <_dtoa_r+0x7a>
 8007286:	f000 fd87 	bl	8007d98 <_dtoa_r+0xb88>
 800728a:	4bac      	ldr	r3, [pc, #688]	; (800753c <_dtoa_r+0x32c>)
 800728c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800728e:	9308      	str	r3, [sp, #32]
 8007290:	2a00      	cmp	r2, #0
 8007292:	d002      	beq.n	800729a <_dtoa_r+0x8a>
 8007294:	4baa      	ldr	r3, [pc, #680]	; (8007540 <_dtoa_r+0x330>)
 8007296:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	9808      	ldr	r0, [sp, #32]
 800729c:	b01b      	add	sp, #108	; 0x6c
 800729e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072a0:	2300      	movs	r3, #0
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	e7e0      	b.n	8007268 <_dtoa_r+0x58>
 80072a6:	9e06      	ldr	r6, [sp, #24]
 80072a8:	9f07      	ldr	r7, [sp, #28]
 80072aa:	2200      	movs	r2, #0
 80072ac:	2300      	movs	r3, #0
 80072ae:	0030      	movs	r0, r6
 80072b0:	0039      	movs	r1, r7
 80072b2:	f7f9 f8c1 	bl	8000438 <__aeabi_dcmpeq>
 80072b6:	1e05      	subs	r5, r0, #0
 80072b8:	d00b      	beq.n	80072d2 <_dtoa_r+0xc2>
 80072ba:	2301      	movs	r3, #1
 80072bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	4ba0      	ldr	r3, [pc, #640]	; (8007544 <_dtoa_r+0x334>)
 80072c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80072c4:	9308      	str	r3, [sp, #32]
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	d0e7      	beq.n	800729a <_dtoa_r+0x8a>
 80072ca:	4a9f      	ldr	r2, [pc, #636]	; (8007548 <_dtoa_r+0x338>)
 80072cc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80072ce:	600a      	str	r2, [r1, #0]
 80072d0:	e7e3      	b.n	800729a <_dtoa_r+0x8a>
 80072d2:	ab18      	add	r3, sp, #96	; 0x60
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	ab19      	add	r3, sp, #100	; 0x64
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	0032      	movs	r2, r6
 80072dc:	003b      	movs	r3, r7
 80072de:	9802      	ldr	r0, [sp, #8]
 80072e0:	f001 fc2a 	bl	8008b38 <__d2b>
 80072e4:	0063      	lsls	r3, r4, #1
 80072e6:	9003      	str	r0, [sp, #12]
 80072e8:	0d5b      	lsrs	r3, r3, #21
 80072ea:	d074      	beq.n	80073d6 <_dtoa_r+0x1c6>
 80072ec:	033a      	lsls	r2, r7, #12
 80072ee:	4c97      	ldr	r4, [pc, #604]	; (800754c <_dtoa_r+0x33c>)
 80072f0:	0b12      	lsrs	r2, r2, #12
 80072f2:	4314      	orrs	r4, r2
 80072f4:	0021      	movs	r1, r4
 80072f6:	4a96      	ldr	r2, [pc, #600]	; (8007550 <_dtoa_r+0x340>)
 80072f8:	0030      	movs	r0, r6
 80072fa:	9516      	str	r5, [sp, #88]	; 0x58
 80072fc:	189e      	adds	r6, r3, r2
 80072fe:	2200      	movs	r2, #0
 8007300:	4b94      	ldr	r3, [pc, #592]	; (8007554 <_dtoa_r+0x344>)
 8007302:	f7fa fc5f 	bl	8001bc4 <__aeabi_dsub>
 8007306:	4a94      	ldr	r2, [pc, #592]	; (8007558 <_dtoa_r+0x348>)
 8007308:	4b94      	ldr	r3, [pc, #592]	; (800755c <_dtoa_r+0x34c>)
 800730a:	f7fa f9e9 	bl	80016e0 <__aeabi_dmul>
 800730e:	4a94      	ldr	r2, [pc, #592]	; (8007560 <_dtoa_r+0x350>)
 8007310:	4b94      	ldr	r3, [pc, #592]	; (8007564 <_dtoa_r+0x354>)
 8007312:	f7f9 fabf 	bl	8000894 <__aeabi_dadd>
 8007316:	0004      	movs	r4, r0
 8007318:	0030      	movs	r0, r6
 800731a:	000d      	movs	r5, r1
 800731c:	f7fa ffec 	bl	80022f8 <__aeabi_i2d>
 8007320:	4a91      	ldr	r2, [pc, #580]	; (8007568 <_dtoa_r+0x358>)
 8007322:	4b92      	ldr	r3, [pc, #584]	; (800756c <_dtoa_r+0x35c>)
 8007324:	f7fa f9dc 	bl	80016e0 <__aeabi_dmul>
 8007328:	0002      	movs	r2, r0
 800732a:	000b      	movs	r3, r1
 800732c:	0020      	movs	r0, r4
 800732e:	0029      	movs	r1, r5
 8007330:	f7f9 fab0 	bl	8000894 <__aeabi_dadd>
 8007334:	0004      	movs	r4, r0
 8007336:	000d      	movs	r5, r1
 8007338:	f7fa ffa8 	bl	800228c <__aeabi_d2iz>
 800733c:	2200      	movs	r2, #0
 800733e:	0007      	movs	r7, r0
 8007340:	2300      	movs	r3, #0
 8007342:	0020      	movs	r0, r4
 8007344:	0029      	movs	r1, r5
 8007346:	f7f9 f87d 	bl	8000444 <__aeabi_dcmplt>
 800734a:	2800      	cmp	r0, #0
 800734c:	d009      	beq.n	8007362 <_dtoa_r+0x152>
 800734e:	0038      	movs	r0, r7
 8007350:	f7fa ffd2 	bl	80022f8 <__aeabi_i2d>
 8007354:	002b      	movs	r3, r5
 8007356:	0022      	movs	r2, r4
 8007358:	f7f9 f86e 	bl	8000438 <__aeabi_dcmpeq>
 800735c:	4243      	negs	r3, r0
 800735e:	4158      	adcs	r0, r3
 8007360:	1a3f      	subs	r7, r7, r0
 8007362:	2301      	movs	r3, #1
 8007364:	9314      	str	r3, [sp, #80]	; 0x50
 8007366:	2f16      	cmp	r7, #22
 8007368:	d80d      	bhi.n	8007386 <_dtoa_r+0x176>
 800736a:	4981      	ldr	r1, [pc, #516]	; (8007570 <_dtoa_r+0x360>)
 800736c:	00fb      	lsls	r3, r7, #3
 800736e:	18c9      	adds	r1, r1, r3
 8007370:	6808      	ldr	r0, [r1, #0]
 8007372:	6849      	ldr	r1, [r1, #4]
 8007374:	9a06      	ldr	r2, [sp, #24]
 8007376:	9b07      	ldr	r3, [sp, #28]
 8007378:	f7f9 f878 	bl	800046c <__aeabi_dcmpgt>
 800737c:	2800      	cmp	r0, #0
 800737e:	d046      	beq.n	800740e <_dtoa_r+0x1fe>
 8007380:	2300      	movs	r3, #0
 8007382:	3f01      	subs	r7, #1
 8007384:	9314      	str	r3, [sp, #80]	; 0x50
 8007386:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007388:	1b9e      	subs	r6, r3, r6
 800738a:	2300      	movs	r3, #0
 800738c:	930a      	str	r3, [sp, #40]	; 0x28
 800738e:	0033      	movs	r3, r6
 8007390:	3b01      	subs	r3, #1
 8007392:	930b      	str	r3, [sp, #44]	; 0x2c
 8007394:	d504      	bpl.n	80073a0 <_dtoa_r+0x190>
 8007396:	2301      	movs	r3, #1
 8007398:	1b9b      	subs	r3, r3, r6
 800739a:	930a      	str	r3, [sp, #40]	; 0x28
 800739c:	2300      	movs	r3, #0
 800739e:	930b      	str	r3, [sp, #44]	; 0x2c
 80073a0:	2f00      	cmp	r7, #0
 80073a2:	db36      	blt.n	8007412 <_dtoa_r+0x202>
 80073a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a6:	9711      	str	r7, [sp, #68]	; 0x44
 80073a8:	19db      	adds	r3, r3, r7
 80073aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ac:	2300      	movs	r3, #0
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073b2:	2401      	movs	r4, #1
 80073b4:	2b09      	cmp	r3, #9
 80073b6:	d900      	bls.n	80073ba <_dtoa_r+0x1aa>
 80073b8:	e084      	b.n	80074c4 <_dtoa_r+0x2b4>
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	dd02      	ble.n	80073c4 <_dtoa_r+0x1b4>
 80073be:	2400      	movs	r4, #0
 80073c0:	3b04      	subs	r3, #4
 80073c2:	9320      	str	r3, [sp, #128]	; 0x80
 80073c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073c6:	1e98      	subs	r0, r3, #2
 80073c8:	2803      	cmp	r0, #3
 80073ca:	d900      	bls.n	80073ce <_dtoa_r+0x1be>
 80073cc:	e084      	b.n	80074d8 <_dtoa_r+0x2c8>
 80073ce:	f7f8 fea3 	bl	8000118 <__gnu_thumb1_case_uqi>
 80073d2:	7775      	.short	0x7775
 80073d4:	6a28      	.short	0x6a28
 80073d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80073d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073da:	189e      	adds	r6, r3, r2
 80073dc:	4b65      	ldr	r3, [pc, #404]	; (8007574 <_dtoa_r+0x364>)
 80073de:	18f2      	adds	r2, r6, r3
 80073e0:	2a20      	cmp	r2, #32
 80073e2:	dd0f      	ble.n	8007404 <_dtoa_r+0x1f4>
 80073e4:	2340      	movs	r3, #64	; 0x40
 80073e6:	1a9b      	subs	r3, r3, r2
 80073e8:	409c      	lsls	r4, r3
 80073ea:	4b63      	ldr	r3, [pc, #396]	; (8007578 <_dtoa_r+0x368>)
 80073ec:	9806      	ldr	r0, [sp, #24]
 80073ee:	18f3      	adds	r3, r6, r3
 80073f0:	40d8      	lsrs	r0, r3
 80073f2:	4320      	orrs	r0, r4
 80073f4:	f7fa ffba 	bl	800236c <__aeabi_ui2d>
 80073f8:	2301      	movs	r3, #1
 80073fa:	4c60      	ldr	r4, [pc, #384]	; (800757c <_dtoa_r+0x36c>)
 80073fc:	3e01      	subs	r6, #1
 80073fe:	1909      	adds	r1, r1, r4
 8007400:	9316      	str	r3, [sp, #88]	; 0x58
 8007402:	e77c      	b.n	80072fe <_dtoa_r+0xee>
 8007404:	2320      	movs	r3, #32
 8007406:	9806      	ldr	r0, [sp, #24]
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	4098      	lsls	r0, r3
 800740c:	e7f2      	b.n	80073f4 <_dtoa_r+0x1e4>
 800740e:	9014      	str	r0, [sp, #80]	; 0x50
 8007410:	e7b9      	b.n	8007386 <_dtoa_r+0x176>
 8007412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007414:	1bdb      	subs	r3, r3, r7
 8007416:	930a      	str	r3, [sp, #40]	; 0x28
 8007418:	427b      	negs	r3, r7
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	2300      	movs	r3, #0
 800741e:	9311      	str	r3, [sp, #68]	; 0x44
 8007420:	e7c6      	b.n	80073b0 <_dtoa_r+0x1a0>
 8007422:	2301      	movs	r3, #1
 8007424:	930d      	str	r3, [sp, #52]	; 0x34
 8007426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007428:	2b00      	cmp	r3, #0
 800742a:	dd59      	ble.n	80074e0 <_dtoa_r+0x2d0>
 800742c:	930c      	str	r3, [sp, #48]	; 0x30
 800742e:	9309      	str	r3, [sp, #36]	; 0x24
 8007430:	9a02      	ldr	r2, [sp, #8]
 8007432:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007434:	2200      	movs	r2, #0
 8007436:	606a      	str	r2, [r5, #4]
 8007438:	3204      	adds	r2, #4
 800743a:	0010      	movs	r0, r2
 800743c:	3014      	adds	r0, #20
 800743e:	6869      	ldr	r1, [r5, #4]
 8007440:	4298      	cmp	r0, r3
 8007442:	d952      	bls.n	80074ea <_dtoa_r+0x2da>
 8007444:	9802      	ldr	r0, [sp, #8]
 8007446:	f001 f835 	bl	80084b4 <_Balloc>
 800744a:	9b02      	ldr	r3, [sp, #8]
 800744c:	6028      	str	r0, [r5, #0]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	9308      	str	r3, [sp, #32]
 8007454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007456:	2b0e      	cmp	r3, #14
 8007458:	d900      	bls.n	800745c <_dtoa_r+0x24c>
 800745a:	e10a      	b.n	8007672 <_dtoa_r+0x462>
 800745c:	2c00      	cmp	r4, #0
 800745e:	d100      	bne.n	8007462 <_dtoa_r+0x252>
 8007460:	e107      	b.n	8007672 <_dtoa_r+0x462>
 8007462:	9b06      	ldr	r3, [sp, #24]
 8007464:	9c07      	ldr	r4, [sp, #28]
 8007466:	9312      	str	r3, [sp, #72]	; 0x48
 8007468:	9413      	str	r4, [sp, #76]	; 0x4c
 800746a:	2f00      	cmp	r7, #0
 800746c:	dc00      	bgt.n	8007470 <_dtoa_r+0x260>
 800746e:	e089      	b.n	8007584 <_dtoa_r+0x374>
 8007470:	210f      	movs	r1, #15
 8007472:	003a      	movs	r2, r7
 8007474:	4b3e      	ldr	r3, [pc, #248]	; (8007570 <_dtoa_r+0x360>)
 8007476:	400a      	ands	r2, r1
 8007478:	00d2      	lsls	r2, r2, #3
 800747a:	189b      	adds	r3, r3, r2
 800747c:	681d      	ldr	r5, [r3, #0]
 800747e:	685e      	ldr	r6, [r3, #4]
 8007480:	2302      	movs	r3, #2
 8007482:	113c      	asrs	r4, r7, #4
 8007484:	930e      	str	r3, [sp, #56]	; 0x38
 8007486:	06e3      	lsls	r3, r4, #27
 8007488:	d50b      	bpl.n	80074a2 <_dtoa_r+0x292>
 800748a:	4b3d      	ldr	r3, [pc, #244]	; (8007580 <_dtoa_r+0x370>)
 800748c:	400c      	ands	r4, r1
 800748e:	6a1a      	ldr	r2, [r3, #32]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007494:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007496:	f7f9 fd19 	bl	8000ecc <__aeabi_ddiv>
 800749a:	2303      	movs	r3, #3
 800749c:	9006      	str	r0, [sp, #24]
 800749e:	9107      	str	r1, [sp, #28]
 80074a0:	930e      	str	r3, [sp, #56]	; 0x38
 80074a2:	2300      	movs	r3, #0
 80074a4:	e03a      	b.n	800751c <_dtoa_r+0x30c>
 80074a6:	2301      	movs	r3, #1
 80074a8:	930d      	str	r3, [sp, #52]	; 0x34
 80074aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074ac:	18fb      	adds	r3, r7, r3
 80074ae:	930c      	str	r3, [sp, #48]	; 0x30
 80074b0:	3301      	adds	r3, #1
 80074b2:	9309      	str	r3, [sp, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dcbb      	bgt.n	8007430 <_dtoa_r+0x220>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e7b9      	b.n	8007430 <_dtoa_r+0x220>
 80074bc:	2300      	movs	r3, #0
 80074be:	e7b1      	b.n	8007424 <_dtoa_r+0x214>
 80074c0:	2300      	movs	r3, #0
 80074c2:	e7f1      	b.n	80074a8 <_dtoa_r+0x298>
 80074c4:	2300      	movs	r3, #0
 80074c6:	940d      	str	r4, [sp, #52]	; 0x34
 80074c8:	9320      	str	r3, [sp, #128]	; 0x80
 80074ca:	3b01      	subs	r3, #1
 80074cc:	2200      	movs	r2, #0
 80074ce:	930c      	str	r3, [sp, #48]	; 0x30
 80074d0:	9309      	str	r3, [sp, #36]	; 0x24
 80074d2:	3313      	adds	r3, #19
 80074d4:	9221      	str	r2, [sp, #132]	; 0x84
 80074d6:	e7ab      	b.n	8007430 <_dtoa_r+0x220>
 80074d8:	2301      	movs	r3, #1
 80074da:	930d      	str	r3, [sp, #52]	; 0x34
 80074dc:	3b02      	subs	r3, #2
 80074de:	e7f5      	b.n	80074cc <_dtoa_r+0x2bc>
 80074e0:	2301      	movs	r3, #1
 80074e2:	930c      	str	r3, [sp, #48]	; 0x30
 80074e4:	9309      	str	r3, [sp, #36]	; 0x24
 80074e6:	001a      	movs	r2, r3
 80074e8:	e7f4      	b.n	80074d4 <_dtoa_r+0x2c4>
 80074ea:	3101      	adds	r1, #1
 80074ec:	6069      	str	r1, [r5, #4]
 80074ee:	0052      	lsls	r2, r2, #1
 80074f0:	e7a3      	b.n	800743a <_dtoa_r+0x22a>
 80074f2:	2301      	movs	r3, #1
 80074f4:	421c      	tst	r4, r3
 80074f6:	d00e      	beq.n	8007516 <_dtoa_r+0x306>
 80074f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074fa:	4a21      	ldr	r2, [pc, #132]	; (8007580 <_dtoa_r+0x370>)
 80074fc:	3301      	adds	r3, #1
 80074fe:	930e      	str	r3, [sp, #56]	; 0x38
 8007500:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007502:	0028      	movs	r0, r5
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	189b      	adds	r3, r3, r2
 8007508:	0031      	movs	r1, r6
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f7fa f8e7 	bl	80016e0 <__aeabi_dmul>
 8007512:	0005      	movs	r5, r0
 8007514:	000e      	movs	r6, r1
 8007516:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007518:	1064      	asrs	r4, r4, #1
 800751a:	3301      	adds	r3, #1
 800751c:	9310      	str	r3, [sp, #64]	; 0x40
 800751e:	2c00      	cmp	r4, #0
 8007520:	d1e7      	bne.n	80074f2 <_dtoa_r+0x2e2>
 8007522:	9806      	ldr	r0, [sp, #24]
 8007524:	9907      	ldr	r1, [sp, #28]
 8007526:	002a      	movs	r2, r5
 8007528:	0033      	movs	r3, r6
 800752a:	f7f9 fccf 	bl	8000ecc <__aeabi_ddiv>
 800752e:	9006      	str	r0, [sp, #24]
 8007530:	9107      	str	r1, [sp, #28]
 8007532:	e042      	b.n	80075ba <_dtoa_r+0x3aa>
 8007534:	7ff00000 	.word	0x7ff00000
 8007538:	0000270f 	.word	0x0000270f
 800753c:	08009361 	.word	0x08009361
 8007540:	08009364 	.word	0x08009364
 8007544:	080092d8 	.word	0x080092d8
 8007548:	080092d9 	.word	0x080092d9
 800754c:	3ff00000 	.word	0x3ff00000
 8007550:	fffffc01 	.word	0xfffffc01
 8007554:	3ff80000 	.word	0x3ff80000
 8007558:	636f4361 	.word	0x636f4361
 800755c:	3fd287a7 	.word	0x3fd287a7
 8007560:	8b60c8b3 	.word	0x8b60c8b3
 8007564:	3fc68a28 	.word	0x3fc68a28
 8007568:	509f79fb 	.word	0x509f79fb
 800756c:	3fd34413 	.word	0x3fd34413
 8007570:	08009398 	.word	0x08009398
 8007574:	00000432 	.word	0x00000432
 8007578:	00000412 	.word	0x00000412
 800757c:	fe100000 	.word	0xfe100000
 8007580:	08009370 	.word	0x08009370
 8007584:	2302      	movs	r3, #2
 8007586:	930e      	str	r3, [sp, #56]	; 0x38
 8007588:	2f00      	cmp	r7, #0
 800758a:	d016      	beq.n	80075ba <_dtoa_r+0x3aa>
 800758c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800758e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007590:	427c      	negs	r4, r7
 8007592:	330d      	adds	r3, #13
 8007594:	4023      	ands	r3, r4
 8007596:	4ace      	ldr	r2, [pc, #824]	; (80078d0 <_dtoa_r+0x6c0>)
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	18d3      	adds	r3, r2, r3
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f7fa f89e 	bl	80016e0 <__aeabi_dmul>
 80075a4:	2300      	movs	r3, #0
 80075a6:	2601      	movs	r6, #1
 80075a8:	001d      	movs	r5, r3
 80075aa:	9006      	str	r0, [sp, #24]
 80075ac:	9107      	str	r1, [sp, #28]
 80075ae:	1124      	asrs	r4, r4, #4
 80075b0:	2c00      	cmp	r4, #0
 80075b2:	d000      	beq.n	80075b6 <_dtoa_r+0x3a6>
 80075b4:	e08c      	b.n	80076d0 <_dtoa_r+0x4c0>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1b9      	bne.n	800752e <_dtoa_r+0x31e>
 80075ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d100      	bne.n	80075c2 <_dtoa_r+0x3b2>
 80075c0:	e096      	b.n	80076f0 <_dtoa_r+0x4e0>
 80075c2:	9c06      	ldr	r4, [sp, #24]
 80075c4:	9d07      	ldr	r5, [sp, #28]
 80075c6:	2200      	movs	r2, #0
 80075c8:	4bc2      	ldr	r3, [pc, #776]	; (80078d4 <_dtoa_r+0x6c4>)
 80075ca:	0020      	movs	r0, r4
 80075cc:	0029      	movs	r1, r5
 80075ce:	f7f8 ff39 	bl	8000444 <__aeabi_dcmplt>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d100      	bne.n	80075d8 <_dtoa_r+0x3c8>
 80075d6:	e08b      	b.n	80076f0 <_dtoa_r+0x4e0>
 80075d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d100      	bne.n	80075e0 <_dtoa_r+0x3d0>
 80075de:	e087      	b.n	80076f0 <_dtoa_r+0x4e0>
 80075e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dd41      	ble.n	800766a <_dtoa_r+0x45a>
 80075e6:	4bbc      	ldr	r3, [pc, #752]	; (80078d8 <_dtoa_r+0x6c8>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	0020      	movs	r0, r4
 80075ec:	0029      	movs	r1, r5
 80075ee:	f7fa f877 	bl	80016e0 <__aeabi_dmul>
 80075f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f4:	9006      	str	r0, [sp, #24]
 80075f6:	9107      	str	r1, [sp, #28]
 80075f8:	3301      	adds	r3, #1
 80075fa:	930e      	str	r3, [sp, #56]	; 0x38
 80075fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075fe:	1e7e      	subs	r6, r7, #1
 8007600:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007602:	9310      	str	r3, [sp, #64]	; 0x40
 8007604:	f7fa fe78 	bl	80022f8 <__aeabi_i2d>
 8007608:	9a06      	ldr	r2, [sp, #24]
 800760a:	9b07      	ldr	r3, [sp, #28]
 800760c:	f7fa f868 	bl	80016e0 <__aeabi_dmul>
 8007610:	2200      	movs	r2, #0
 8007612:	4bb2      	ldr	r3, [pc, #712]	; (80078dc <_dtoa_r+0x6cc>)
 8007614:	f7f9 f93e 	bl	8000894 <__aeabi_dadd>
 8007618:	4ab1      	ldr	r2, [pc, #708]	; (80078e0 <_dtoa_r+0x6d0>)
 800761a:	900e      	str	r0, [sp, #56]	; 0x38
 800761c:	910f      	str	r1, [sp, #60]	; 0x3c
 800761e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007620:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007622:	4694      	mov	ip, r2
 8007624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007626:	4463      	add	r3, ip
 8007628:	9315      	str	r3, [sp, #84]	; 0x54
 800762a:	001d      	movs	r5, r3
 800762c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800762e:	2b00      	cmp	r3, #0
 8007630:	d161      	bne.n	80076f6 <_dtoa_r+0x4e6>
 8007632:	9806      	ldr	r0, [sp, #24]
 8007634:	9907      	ldr	r1, [sp, #28]
 8007636:	2200      	movs	r2, #0
 8007638:	4baa      	ldr	r3, [pc, #680]	; (80078e4 <_dtoa_r+0x6d4>)
 800763a:	f7fa fac3 	bl	8001bc4 <__aeabi_dsub>
 800763e:	0022      	movs	r2, r4
 8007640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007642:	9006      	str	r0, [sp, #24]
 8007644:	9107      	str	r1, [sp, #28]
 8007646:	f7f8 ff11 	bl	800046c <__aeabi_dcmpgt>
 800764a:	2800      	cmp	r0, #0
 800764c:	d000      	beq.n	8007650 <_dtoa_r+0x440>
 800764e:	e2a8      	b.n	8007ba2 <_dtoa_r+0x992>
 8007650:	48a5      	ldr	r0, [pc, #660]	; (80078e8 <_dtoa_r+0x6d8>)
 8007652:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007654:	4684      	mov	ip, r0
 8007656:	4461      	add	r1, ip
 8007658:	000b      	movs	r3, r1
 800765a:	9806      	ldr	r0, [sp, #24]
 800765c:	9907      	ldr	r1, [sp, #28]
 800765e:	0022      	movs	r2, r4
 8007660:	f7f8 fef0 	bl	8000444 <__aeabi_dcmplt>
 8007664:	2800      	cmp	r0, #0
 8007666:	d000      	beq.n	800766a <_dtoa_r+0x45a>
 8007668:	e295      	b.n	8007b96 <_dtoa_r+0x986>
 800766a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800766c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800766e:	9306      	str	r3, [sp, #24]
 8007670:	9407      	str	r4, [sp, #28]
 8007672:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007674:	2b00      	cmp	r3, #0
 8007676:	da00      	bge.n	800767a <_dtoa_r+0x46a>
 8007678:	e15c      	b.n	8007934 <_dtoa_r+0x724>
 800767a:	2f0e      	cmp	r7, #14
 800767c:	dd00      	ble.n	8007680 <_dtoa_r+0x470>
 800767e:	e159      	b.n	8007934 <_dtoa_r+0x724>
 8007680:	4b93      	ldr	r3, [pc, #588]	; (80078d0 <_dtoa_r+0x6c0>)
 8007682:	00fa      	lsls	r2, r7, #3
 8007684:	189b      	adds	r3, r3, r2
 8007686:	685c      	ldr	r4, [r3, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	9304      	str	r3, [sp, #16]
 800768c:	9405      	str	r4, [sp, #20]
 800768e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007690:	2b00      	cmp	r3, #0
 8007692:	db00      	blt.n	8007696 <_dtoa_r+0x486>
 8007694:	e0d8      	b.n	8007848 <_dtoa_r+0x638>
 8007696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007698:	2b00      	cmp	r3, #0
 800769a:	dd00      	ble.n	800769e <_dtoa_r+0x48e>
 800769c:	e0d4      	b.n	8007848 <_dtoa_r+0x638>
 800769e:	d000      	beq.n	80076a2 <_dtoa_r+0x492>
 80076a0:	e27d      	b.n	8007b9e <_dtoa_r+0x98e>
 80076a2:	9804      	ldr	r0, [sp, #16]
 80076a4:	9905      	ldr	r1, [sp, #20]
 80076a6:	2200      	movs	r2, #0
 80076a8:	4b8e      	ldr	r3, [pc, #568]	; (80078e4 <_dtoa_r+0x6d4>)
 80076aa:	f7fa f819 	bl	80016e0 <__aeabi_dmul>
 80076ae:	9a06      	ldr	r2, [sp, #24]
 80076b0:	9b07      	ldr	r3, [sp, #28]
 80076b2:	f7f8 fee5 	bl	8000480 <__aeabi_dcmpge>
 80076b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b8:	9304      	str	r3, [sp, #16]
 80076ba:	001e      	movs	r6, r3
 80076bc:	2800      	cmp	r0, #0
 80076be:	d000      	beq.n	80076c2 <_dtoa_r+0x4b2>
 80076c0:	e24f      	b.n	8007b62 <_dtoa_r+0x952>
 80076c2:	9b08      	ldr	r3, [sp, #32]
 80076c4:	9a08      	ldr	r2, [sp, #32]
 80076c6:	1c5d      	adds	r5, r3, #1
 80076c8:	2331      	movs	r3, #49	; 0x31
 80076ca:	3701      	adds	r7, #1
 80076cc:	7013      	strb	r3, [r2, #0]
 80076ce:	e24b      	b.n	8007b68 <_dtoa_r+0x958>
 80076d0:	4234      	tst	r4, r6
 80076d2:	d00a      	beq.n	80076ea <_dtoa_r+0x4da>
 80076d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d6:	4a85      	ldr	r2, [pc, #532]	; (80078ec <_dtoa_r+0x6dc>)
 80076d8:	3301      	adds	r3, #1
 80076da:	930e      	str	r3, [sp, #56]	; 0x38
 80076dc:	00eb      	lsls	r3, r5, #3
 80076de:	189b      	adds	r3, r3, r2
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f7f9 fffc 	bl	80016e0 <__aeabi_dmul>
 80076e8:	0033      	movs	r3, r6
 80076ea:	1064      	asrs	r4, r4, #1
 80076ec:	3501      	adds	r5, #1
 80076ee:	e75f      	b.n	80075b0 <_dtoa_r+0x3a0>
 80076f0:	003e      	movs	r6, r7
 80076f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f4:	e784      	b.n	8007600 <_dtoa_r+0x3f0>
 80076f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80076fa:	1e5a      	subs	r2, r3, #1
 80076fc:	4b74      	ldr	r3, [pc, #464]	; (80078d0 <_dtoa_r+0x6c0>)
 80076fe:	00d2      	lsls	r2, r2, #3
 8007700:	189b      	adds	r3, r3, r2
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2900      	cmp	r1, #0
 8007708:	d049      	beq.n	800779e <_dtoa_r+0x58e>
 800770a:	2000      	movs	r0, #0
 800770c:	4978      	ldr	r1, [pc, #480]	; (80078f0 <_dtoa_r+0x6e0>)
 800770e:	f7f9 fbdd 	bl	8000ecc <__aeabi_ddiv>
 8007712:	002b      	movs	r3, r5
 8007714:	0022      	movs	r2, r4
 8007716:	f7fa fa55 	bl	8001bc4 <__aeabi_dsub>
 800771a:	9b08      	ldr	r3, [sp, #32]
 800771c:	900e      	str	r0, [sp, #56]	; 0x38
 800771e:	910f      	str	r1, [sp, #60]	; 0x3c
 8007720:	9315      	str	r3, [sp, #84]	; 0x54
 8007722:	9806      	ldr	r0, [sp, #24]
 8007724:	9907      	ldr	r1, [sp, #28]
 8007726:	f7fa fdb1 	bl	800228c <__aeabi_d2iz>
 800772a:	0004      	movs	r4, r0
 800772c:	f7fa fde4 	bl	80022f8 <__aeabi_i2d>
 8007730:	0002      	movs	r2, r0
 8007732:	000b      	movs	r3, r1
 8007734:	9806      	ldr	r0, [sp, #24]
 8007736:	9907      	ldr	r1, [sp, #28]
 8007738:	f7fa fa44 	bl	8001bc4 <__aeabi_dsub>
 800773c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800773e:	3430      	adds	r4, #48	; 0x30
 8007740:	1c5d      	adds	r5, r3, #1
 8007742:	701c      	strb	r4, [r3, #0]
 8007744:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007748:	9006      	str	r0, [sp, #24]
 800774a:	9107      	str	r1, [sp, #28]
 800774c:	f7f8 fe7a 	bl	8000444 <__aeabi_dcmplt>
 8007750:	2800      	cmp	r0, #0
 8007752:	d16c      	bne.n	800782e <_dtoa_r+0x61e>
 8007754:	9a06      	ldr	r2, [sp, #24]
 8007756:	9b07      	ldr	r3, [sp, #28]
 8007758:	2000      	movs	r0, #0
 800775a:	495e      	ldr	r1, [pc, #376]	; (80078d4 <_dtoa_r+0x6c4>)
 800775c:	f7fa fa32 	bl	8001bc4 <__aeabi_dsub>
 8007760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007764:	f7f8 fe6e 	bl	8000444 <__aeabi_dcmplt>
 8007768:	2800      	cmp	r0, #0
 800776a:	d000      	beq.n	800776e <_dtoa_r+0x55e>
 800776c:	e0c3      	b.n	80078f6 <_dtoa_r+0x6e6>
 800776e:	9b08      	ldr	r3, [sp, #32]
 8007770:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007772:	1aeb      	subs	r3, r5, r3
 8007774:	429a      	cmp	r2, r3
 8007776:	dc00      	bgt.n	800777a <_dtoa_r+0x56a>
 8007778:	e777      	b.n	800766a <_dtoa_r+0x45a>
 800777a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800777c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800777e:	2200      	movs	r2, #0
 8007780:	4b55      	ldr	r3, [pc, #340]	; (80078d8 <_dtoa_r+0x6c8>)
 8007782:	f7f9 ffad 	bl	80016e0 <__aeabi_dmul>
 8007786:	2200      	movs	r2, #0
 8007788:	900e      	str	r0, [sp, #56]	; 0x38
 800778a:	910f      	str	r1, [sp, #60]	; 0x3c
 800778c:	9806      	ldr	r0, [sp, #24]
 800778e:	9907      	ldr	r1, [sp, #28]
 8007790:	4b51      	ldr	r3, [pc, #324]	; (80078d8 <_dtoa_r+0x6c8>)
 8007792:	f7f9 ffa5 	bl	80016e0 <__aeabi_dmul>
 8007796:	9515      	str	r5, [sp, #84]	; 0x54
 8007798:	9006      	str	r0, [sp, #24]
 800779a:	9107      	str	r1, [sp, #28]
 800779c:	e7c1      	b.n	8007722 <_dtoa_r+0x512>
 800779e:	0020      	movs	r0, r4
 80077a0:	0029      	movs	r1, r5
 80077a2:	f7f9 ff9d 	bl	80016e0 <__aeabi_dmul>
 80077a6:	9c08      	ldr	r4, [sp, #32]
 80077a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077aa:	0023      	movs	r3, r4
 80077ac:	4694      	mov	ip, r2
 80077ae:	900e      	str	r0, [sp, #56]	; 0x38
 80077b0:	910f      	str	r1, [sp, #60]	; 0x3c
 80077b2:	4463      	add	r3, ip
 80077b4:	9315      	str	r3, [sp, #84]	; 0x54
 80077b6:	9806      	ldr	r0, [sp, #24]
 80077b8:	9907      	ldr	r1, [sp, #28]
 80077ba:	f7fa fd67 	bl	800228c <__aeabi_d2iz>
 80077be:	0005      	movs	r5, r0
 80077c0:	f7fa fd9a 	bl	80022f8 <__aeabi_i2d>
 80077c4:	000b      	movs	r3, r1
 80077c6:	0002      	movs	r2, r0
 80077c8:	9806      	ldr	r0, [sp, #24]
 80077ca:	9907      	ldr	r1, [sp, #28]
 80077cc:	f7fa f9fa 	bl	8001bc4 <__aeabi_dsub>
 80077d0:	3530      	adds	r5, #48	; 0x30
 80077d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077d4:	7025      	strb	r5, [r4, #0]
 80077d6:	3401      	adds	r4, #1
 80077d8:	9006      	str	r0, [sp, #24]
 80077da:	9107      	str	r1, [sp, #28]
 80077dc:	42a3      	cmp	r3, r4
 80077de:	d12a      	bne.n	8007836 <_dtoa_r+0x626>
 80077e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80077e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80077e4:	9a08      	ldr	r2, [sp, #32]
 80077e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077e8:	4694      	mov	ip, r2
 80077ea:	4463      	add	r3, ip
 80077ec:	2200      	movs	r2, #0
 80077ee:	001d      	movs	r5, r3
 80077f0:	4b3f      	ldr	r3, [pc, #252]	; (80078f0 <_dtoa_r+0x6e0>)
 80077f2:	f7f9 f84f 	bl	8000894 <__aeabi_dadd>
 80077f6:	0002      	movs	r2, r0
 80077f8:	000b      	movs	r3, r1
 80077fa:	9806      	ldr	r0, [sp, #24]
 80077fc:	9907      	ldr	r1, [sp, #28]
 80077fe:	f7f8 fe35 	bl	800046c <__aeabi_dcmpgt>
 8007802:	2800      	cmp	r0, #0
 8007804:	d000      	beq.n	8007808 <_dtoa_r+0x5f8>
 8007806:	e076      	b.n	80078f6 <_dtoa_r+0x6e6>
 8007808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800780a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800780c:	2000      	movs	r0, #0
 800780e:	4938      	ldr	r1, [pc, #224]	; (80078f0 <_dtoa_r+0x6e0>)
 8007810:	f7fa f9d8 	bl	8001bc4 <__aeabi_dsub>
 8007814:	0002      	movs	r2, r0
 8007816:	000b      	movs	r3, r1
 8007818:	9806      	ldr	r0, [sp, #24]
 800781a:	9907      	ldr	r1, [sp, #28]
 800781c:	f7f8 fe12 	bl	8000444 <__aeabi_dcmplt>
 8007820:	2800      	cmp	r0, #0
 8007822:	d100      	bne.n	8007826 <_dtoa_r+0x616>
 8007824:	e721      	b.n	800766a <_dtoa_r+0x45a>
 8007826:	1e6b      	subs	r3, r5, #1
 8007828:	781a      	ldrb	r2, [r3, #0]
 800782a:	2a30      	cmp	r2, #48	; 0x30
 800782c:	d001      	beq.n	8007832 <_dtoa_r+0x622>
 800782e:	0037      	movs	r7, r6
 8007830:	e03f      	b.n	80078b2 <_dtoa_r+0x6a2>
 8007832:	001d      	movs	r5, r3
 8007834:	e7f7      	b.n	8007826 <_dtoa_r+0x616>
 8007836:	9806      	ldr	r0, [sp, #24]
 8007838:	9907      	ldr	r1, [sp, #28]
 800783a:	2200      	movs	r2, #0
 800783c:	4b26      	ldr	r3, [pc, #152]	; (80078d8 <_dtoa_r+0x6c8>)
 800783e:	f7f9 ff4f 	bl	80016e0 <__aeabi_dmul>
 8007842:	9006      	str	r0, [sp, #24]
 8007844:	9107      	str	r1, [sp, #28]
 8007846:	e7b6      	b.n	80077b6 <_dtoa_r+0x5a6>
 8007848:	9e08      	ldr	r6, [sp, #32]
 800784a:	9a04      	ldr	r2, [sp, #16]
 800784c:	9b05      	ldr	r3, [sp, #20]
 800784e:	9806      	ldr	r0, [sp, #24]
 8007850:	9907      	ldr	r1, [sp, #28]
 8007852:	f7f9 fb3b 	bl	8000ecc <__aeabi_ddiv>
 8007856:	f7fa fd19 	bl	800228c <__aeabi_d2iz>
 800785a:	0004      	movs	r4, r0
 800785c:	f7fa fd4c 	bl	80022f8 <__aeabi_i2d>
 8007860:	9a04      	ldr	r2, [sp, #16]
 8007862:	9b05      	ldr	r3, [sp, #20]
 8007864:	f7f9 ff3c 	bl	80016e0 <__aeabi_dmul>
 8007868:	0002      	movs	r2, r0
 800786a:	000b      	movs	r3, r1
 800786c:	9806      	ldr	r0, [sp, #24]
 800786e:	9907      	ldr	r1, [sp, #28]
 8007870:	f7fa f9a8 	bl	8001bc4 <__aeabi_dsub>
 8007874:	0023      	movs	r3, r4
 8007876:	3330      	adds	r3, #48	; 0x30
 8007878:	7033      	strb	r3, [r6, #0]
 800787a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800787c:	9b08      	ldr	r3, [sp, #32]
 800787e:	1c75      	adds	r5, r6, #1
 8007880:	1aeb      	subs	r3, r5, r3
 8007882:	429a      	cmp	r2, r3
 8007884:	d148      	bne.n	8007918 <_dtoa_r+0x708>
 8007886:	0002      	movs	r2, r0
 8007888:	000b      	movs	r3, r1
 800788a:	f7f9 f803 	bl	8000894 <__aeabi_dadd>
 800788e:	9a04      	ldr	r2, [sp, #16]
 8007890:	9b05      	ldr	r3, [sp, #20]
 8007892:	9006      	str	r0, [sp, #24]
 8007894:	9107      	str	r1, [sp, #28]
 8007896:	f7f8 fde9 	bl	800046c <__aeabi_dcmpgt>
 800789a:	2800      	cmp	r0, #0
 800789c:	d12a      	bne.n	80078f4 <_dtoa_r+0x6e4>
 800789e:	9a04      	ldr	r2, [sp, #16]
 80078a0:	9b05      	ldr	r3, [sp, #20]
 80078a2:	9806      	ldr	r0, [sp, #24]
 80078a4:	9907      	ldr	r1, [sp, #28]
 80078a6:	f7f8 fdc7 	bl	8000438 <__aeabi_dcmpeq>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d001      	beq.n	80078b2 <_dtoa_r+0x6a2>
 80078ae:	07e3      	lsls	r3, r4, #31
 80078b0:	d420      	bmi.n	80078f4 <_dtoa_r+0x6e4>
 80078b2:	9903      	ldr	r1, [sp, #12]
 80078b4:	9802      	ldr	r0, [sp, #8]
 80078b6:	f000 fe35 	bl	8008524 <_Bfree>
 80078ba:	2300      	movs	r3, #0
 80078bc:	702b      	strb	r3, [r5, #0]
 80078be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078c0:	3701      	adds	r7, #1
 80078c2:	601f      	str	r7, [r3, #0]
 80078c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d100      	bne.n	80078cc <_dtoa_r+0x6bc>
 80078ca:	e4e6      	b.n	800729a <_dtoa_r+0x8a>
 80078cc:	601d      	str	r5, [r3, #0]
 80078ce:	e4e4      	b.n	800729a <_dtoa_r+0x8a>
 80078d0:	08009398 	.word	0x08009398
 80078d4:	3ff00000 	.word	0x3ff00000
 80078d8:	40240000 	.word	0x40240000
 80078dc:	401c0000 	.word	0x401c0000
 80078e0:	fcc00000 	.word	0xfcc00000
 80078e4:	40140000 	.word	0x40140000
 80078e8:	7cc00000 	.word	0x7cc00000
 80078ec:	08009370 	.word	0x08009370
 80078f0:	3fe00000 	.word	0x3fe00000
 80078f4:	003e      	movs	r6, r7
 80078f6:	1e6b      	subs	r3, r5, #1
 80078f8:	781a      	ldrb	r2, [r3, #0]
 80078fa:	2a39      	cmp	r2, #57	; 0x39
 80078fc:	d106      	bne.n	800790c <_dtoa_r+0x6fc>
 80078fe:	9a08      	ldr	r2, [sp, #32]
 8007900:	429a      	cmp	r2, r3
 8007902:	d107      	bne.n	8007914 <_dtoa_r+0x704>
 8007904:	2330      	movs	r3, #48	; 0x30
 8007906:	7013      	strb	r3, [r2, #0]
 8007908:	0013      	movs	r3, r2
 800790a:	3601      	adds	r6, #1
 800790c:	781a      	ldrb	r2, [r3, #0]
 800790e:	3201      	adds	r2, #1
 8007910:	701a      	strb	r2, [r3, #0]
 8007912:	e78c      	b.n	800782e <_dtoa_r+0x61e>
 8007914:	001d      	movs	r5, r3
 8007916:	e7ee      	b.n	80078f6 <_dtoa_r+0x6e6>
 8007918:	2200      	movs	r2, #0
 800791a:	4ba4      	ldr	r3, [pc, #656]	; (8007bac <_dtoa_r+0x99c>)
 800791c:	f7f9 fee0 	bl	80016e0 <__aeabi_dmul>
 8007920:	2200      	movs	r2, #0
 8007922:	2300      	movs	r3, #0
 8007924:	9006      	str	r0, [sp, #24]
 8007926:	9107      	str	r1, [sp, #28]
 8007928:	002e      	movs	r6, r5
 800792a:	f7f8 fd85 	bl	8000438 <__aeabi_dcmpeq>
 800792e:	2800      	cmp	r0, #0
 8007930:	d08b      	beq.n	800784a <_dtoa_r+0x63a>
 8007932:	e7be      	b.n	80078b2 <_dtoa_r+0x6a2>
 8007934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007936:	2a00      	cmp	r2, #0
 8007938:	d100      	bne.n	800793c <_dtoa_r+0x72c>
 800793a:	e0da      	b.n	8007af2 <_dtoa_r+0x8e2>
 800793c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800793e:	2a01      	cmp	r2, #1
 8007940:	dd00      	ble.n	8007944 <_dtoa_r+0x734>
 8007942:	e0bd      	b.n	8007ac0 <_dtoa_r+0x8b0>
 8007944:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007946:	2a00      	cmp	r2, #0
 8007948:	d100      	bne.n	800794c <_dtoa_r+0x73c>
 800794a:	e0b5      	b.n	8007ab8 <_dtoa_r+0x8a8>
 800794c:	4a98      	ldr	r2, [pc, #608]	; (8007bb0 <_dtoa_r+0x9a0>)
 800794e:	189b      	adds	r3, r3, r2
 8007950:	9d04      	ldr	r5, [sp, #16]
 8007952:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007956:	2101      	movs	r1, #1
 8007958:	18d2      	adds	r2, r2, r3
 800795a:	920a      	str	r2, [sp, #40]	; 0x28
 800795c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800795e:	9802      	ldr	r0, [sp, #8]
 8007960:	18d3      	adds	r3, r2, r3
 8007962:	930b      	str	r3, [sp, #44]	; 0x2c
 8007964:	f000 febc 	bl	80086e0 <__i2b>
 8007968:	0006      	movs	r6, r0
 800796a:	2c00      	cmp	r4, #0
 800796c:	dd0e      	ble.n	800798c <_dtoa_r+0x77c>
 800796e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007970:	2b00      	cmp	r3, #0
 8007972:	dd0b      	ble.n	800798c <_dtoa_r+0x77c>
 8007974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007976:	0023      	movs	r3, r4
 8007978:	4294      	cmp	r4, r2
 800797a:	dd00      	ble.n	800797e <_dtoa_r+0x76e>
 800797c:	0013      	movs	r3, r2
 800797e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007980:	1ae4      	subs	r4, r4, r3
 8007982:	1ad2      	subs	r2, r2, r3
 8007984:	920a      	str	r2, [sp, #40]	; 0x28
 8007986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	930b      	str	r3, [sp, #44]	; 0x2c
 800798c:	9b04      	ldr	r3, [sp, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01f      	beq.n	80079d2 <_dtoa_r+0x7c2>
 8007992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007994:	2b00      	cmp	r3, #0
 8007996:	d100      	bne.n	800799a <_dtoa_r+0x78a>
 8007998:	e0af      	b.n	8007afa <_dtoa_r+0x8ea>
 800799a:	2d00      	cmp	r5, #0
 800799c:	d011      	beq.n	80079c2 <_dtoa_r+0x7b2>
 800799e:	0031      	movs	r1, r6
 80079a0:	002a      	movs	r2, r5
 80079a2:	9802      	ldr	r0, [sp, #8]
 80079a4:	f000 ff34 	bl	8008810 <__pow5mult>
 80079a8:	9a03      	ldr	r2, [sp, #12]
 80079aa:	0001      	movs	r1, r0
 80079ac:	0006      	movs	r6, r0
 80079ae:	9802      	ldr	r0, [sp, #8]
 80079b0:	f000 fe9f 	bl	80086f2 <__multiply>
 80079b4:	9903      	ldr	r1, [sp, #12]
 80079b6:	9010      	str	r0, [sp, #64]	; 0x40
 80079b8:	9802      	ldr	r0, [sp, #8]
 80079ba:	f000 fdb3 	bl	8008524 <_Bfree>
 80079be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079c0:	9303      	str	r3, [sp, #12]
 80079c2:	9b04      	ldr	r3, [sp, #16]
 80079c4:	1b5a      	subs	r2, r3, r5
 80079c6:	d004      	beq.n	80079d2 <_dtoa_r+0x7c2>
 80079c8:	9903      	ldr	r1, [sp, #12]
 80079ca:	9802      	ldr	r0, [sp, #8]
 80079cc:	f000 ff20 	bl	8008810 <__pow5mult>
 80079d0:	9003      	str	r0, [sp, #12]
 80079d2:	2101      	movs	r1, #1
 80079d4:	9802      	ldr	r0, [sp, #8]
 80079d6:	f000 fe83 	bl	80086e0 <__i2b>
 80079da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079dc:	9004      	str	r0, [sp, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d100      	bne.n	80079e4 <_dtoa_r+0x7d4>
 80079e2:	e1e3      	b.n	8007dac <_dtoa_r+0xb9c>
 80079e4:	001a      	movs	r2, r3
 80079e6:	0001      	movs	r1, r0
 80079e8:	9802      	ldr	r0, [sp, #8]
 80079ea:	f000 ff11 	bl	8008810 <__pow5mult>
 80079ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079f0:	9004      	str	r0, [sp, #16]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	dd00      	ble.n	80079f8 <_dtoa_r+0x7e8>
 80079f6:	e082      	b.n	8007afe <_dtoa_r+0x8ee>
 80079f8:	2500      	movs	r5, #0
 80079fa:	9b06      	ldr	r3, [sp, #24]
 80079fc:	42ab      	cmp	r3, r5
 80079fe:	d10e      	bne.n	8007a1e <_dtoa_r+0x80e>
 8007a00:	9b07      	ldr	r3, [sp, #28]
 8007a02:	031b      	lsls	r3, r3, #12
 8007a04:	42ab      	cmp	r3, r5
 8007a06:	d10a      	bne.n	8007a1e <_dtoa_r+0x80e>
 8007a08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a0a:	9a07      	ldr	r2, [sp, #28]
 8007a0c:	4213      	tst	r3, r2
 8007a0e:	d006      	beq.n	8007a1e <_dtoa_r+0x80e>
 8007a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a12:	3501      	adds	r5, #1
 8007a14:	3301      	adds	r3, #1
 8007a16:	930a      	str	r3, [sp, #40]	; 0x28
 8007a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a20:	2001      	movs	r0, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d16c      	bne.n	8007b00 <_dtoa_r+0x8f0>
 8007a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a28:	1818      	adds	r0, r3, r0
 8007a2a:	231f      	movs	r3, #31
 8007a2c:	4018      	ands	r0, r3
 8007a2e:	d07e      	beq.n	8007b2e <_dtoa_r+0x91e>
 8007a30:	3301      	adds	r3, #1
 8007a32:	1a1b      	subs	r3, r3, r0
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	dd70      	ble.n	8007b1a <_dtoa_r+0x90a>
 8007a38:	231c      	movs	r3, #28
 8007a3a:	1a18      	subs	r0, r3, r0
 8007a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a3e:	1824      	adds	r4, r4, r0
 8007a40:	181b      	adds	r3, r3, r0
 8007a42:	930a      	str	r3, [sp, #40]	; 0x28
 8007a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a46:	181b      	adds	r3, r3, r0
 8007a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	dd05      	ble.n	8007a5c <_dtoa_r+0x84c>
 8007a50:	001a      	movs	r2, r3
 8007a52:	9903      	ldr	r1, [sp, #12]
 8007a54:	9802      	ldr	r0, [sp, #8]
 8007a56:	f000 ff2d 	bl	80088b4 <__lshift>
 8007a5a:	9003      	str	r0, [sp, #12]
 8007a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	dd05      	ble.n	8007a6e <_dtoa_r+0x85e>
 8007a62:	001a      	movs	r2, r3
 8007a64:	9904      	ldr	r1, [sp, #16]
 8007a66:	9802      	ldr	r0, [sp, #8]
 8007a68:	f000 ff24 	bl	80088b4 <__lshift>
 8007a6c:	9004      	str	r0, [sp, #16]
 8007a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d05e      	beq.n	8007b32 <_dtoa_r+0x922>
 8007a74:	9904      	ldr	r1, [sp, #16]
 8007a76:	9803      	ldr	r0, [sp, #12]
 8007a78:	f000 ff6e 	bl	8008958 <__mcmp>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	da58      	bge.n	8007b32 <_dtoa_r+0x922>
 8007a80:	2300      	movs	r3, #0
 8007a82:	220a      	movs	r2, #10
 8007a84:	9903      	ldr	r1, [sp, #12]
 8007a86:	9802      	ldr	r0, [sp, #8]
 8007a88:	f000 fd65 	bl	8008556 <__multadd>
 8007a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a8e:	3f01      	subs	r7, #1
 8007a90:	9003      	str	r0, [sp, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d100      	bne.n	8007a98 <_dtoa_r+0x888>
 8007a96:	e190      	b.n	8007dba <_dtoa_r+0xbaa>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	0031      	movs	r1, r6
 8007a9c:	220a      	movs	r2, #10
 8007a9e:	9802      	ldr	r0, [sp, #8]
 8007aa0:	f000 fd59 	bl	8008556 <__multadd>
 8007aa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aa6:	0006      	movs	r6, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	dd00      	ble.n	8007aae <_dtoa_r+0x89e>
 8007aac:	e088      	b.n	8007bc0 <_dtoa_r+0x9b0>
 8007aae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	dc00      	bgt.n	8007ab6 <_dtoa_r+0x8a6>
 8007ab4:	e084      	b.n	8007bc0 <_dtoa_r+0x9b0>
 8007ab6:	e044      	b.n	8007b42 <_dtoa_r+0x932>
 8007ab8:	2336      	movs	r3, #54	; 0x36
 8007aba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	e747      	b.n	8007950 <_dtoa_r+0x740>
 8007ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac2:	1e5d      	subs	r5, r3, #1
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	42ab      	cmp	r3, r5
 8007ac8:	db08      	blt.n	8007adc <_dtoa_r+0x8cc>
 8007aca:	1b5d      	subs	r5, r3, r5
 8007acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da0c      	bge.n	8007aec <_dtoa_r+0x8dc>
 8007ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad6:	1a9c      	subs	r4, r3, r2
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e73b      	b.n	8007954 <_dtoa_r+0x744>
 8007adc:	9b04      	ldr	r3, [sp, #16]
 8007ade:	9504      	str	r5, [sp, #16]
 8007ae0:	1aea      	subs	r2, r5, r3
 8007ae2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ae4:	2500      	movs	r5, #0
 8007ae6:	189b      	adds	r3, r3, r2
 8007ae8:	9311      	str	r3, [sp, #68]	; 0x44
 8007aea:	e7ef      	b.n	8007acc <_dtoa_r+0x8bc>
 8007aec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af0:	e730      	b.n	8007954 <_dtoa_r+0x744>
 8007af2:	9d04      	ldr	r5, [sp, #16]
 8007af4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007af6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007af8:	e737      	b.n	800796a <_dtoa_r+0x75a>
 8007afa:	9a04      	ldr	r2, [sp, #16]
 8007afc:	e764      	b.n	80079c8 <_dtoa_r+0x7b8>
 8007afe:	2500      	movs	r5, #0
 8007b00:	9b04      	ldr	r3, [sp, #16]
 8007b02:	9a04      	ldr	r2, [sp, #16]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	9310      	str	r3, [sp, #64]	; 0x40
 8007b08:	3303      	adds	r3, #3
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	18d3      	adds	r3, r2, r3
 8007b0e:	6858      	ldr	r0, [r3, #4]
 8007b10:	f000 fd9d 	bl	800864e <__hi0bits>
 8007b14:	2320      	movs	r3, #32
 8007b16:	1a18      	subs	r0, r3, r0
 8007b18:	e785      	b.n	8007a26 <_dtoa_r+0x816>
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d095      	beq.n	8007a4a <_dtoa_r+0x83a>
 8007b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b20:	331c      	adds	r3, #28
 8007b22:	18d2      	adds	r2, r2, r3
 8007b24:	920a      	str	r2, [sp, #40]	; 0x28
 8007b26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b28:	18e4      	adds	r4, r4, r3
 8007b2a:	18d3      	adds	r3, r2, r3
 8007b2c:	e78c      	b.n	8007a48 <_dtoa_r+0x838>
 8007b2e:	0003      	movs	r3, r0
 8007b30:	e7f5      	b.n	8007b1e <_dtoa_r+0x90e>
 8007b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dc3d      	bgt.n	8007bb4 <_dtoa_r+0x9a4>
 8007b38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	dd3a      	ble.n	8007bb4 <_dtoa_r+0x9a4>
 8007b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b40:	930c      	str	r3, [sp, #48]	; 0x30
 8007b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10c      	bne.n	8007b62 <_dtoa_r+0x952>
 8007b48:	9904      	ldr	r1, [sp, #16]
 8007b4a:	2205      	movs	r2, #5
 8007b4c:	9802      	ldr	r0, [sp, #8]
 8007b4e:	f000 fd02 	bl	8008556 <__multadd>
 8007b52:	9004      	str	r0, [sp, #16]
 8007b54:	0001      	movs	r1, r0
 8007b56:	9803      	ldr	r0, [sp, #12]
 8007b58:	f000 fefe 	bl	8008958 <__mcmp>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	dd00      	ble.n	8007b62 <_dtoa_r+0x952>
 8007b60:	e5af      	b.n	80076c2 <_dtoa_r+0x4b2>
 8007b62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b64:	9d08      	ldr	r5, [sp, #32]
 8007b66:	43df      	mvns	r7, r3
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6c:	9904      	ldr	r1, [sp, #16]
 8007b6e:	9802      	ldr	r0, [sp, #8]
 8007b70:	f000 fcd8 	bl	8008524 <_Bfree>
 8007b74:	2e00      	cmp	r6, #0
 8007b76:	d100      	bne.n	8007b7a <_dtoa_r+0x96a>
 8007b78:	e69b      	b.n	80078b2 <_dtoa_r+0x6a2>
 8007b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <_dtoa_r+0x97c>
 8007b80:	42b3      	cmp	r3, r6
 8007b82:	d003      	beq.n	8007b8c <_dtoa_r+0x97c>
 8007b84:	0019      	movs	r1, r3
 8007b86:	9802      	ldr	r0, [sp, #8]
 8007b88:	f000 fccc 	bl	8008524 <_Bfree>
 8007b8c:	0031      	movs	r1, r6
 8007b8e:	9802      	ldr	r0, [sp, #8]
 8007b90:	f000 fcc8 	bl	8008524 <_Bfree>
 8007b94:	e68d      	b.n	80078b2 <_dtoa_r+0x6a2>
 8007b96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b98:	9304      	str	r3, [sp, #16]
 8007b9a:	001e      	movs	r6, r3
 8007b9c:	e7e1      	b.n	8007b62 <_dtoa_r+0x952>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e7fa      	b.n	8007b98 <_dtoa_r+0x988>
 8007ba2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ba4:	0037      	movs	r7, r6
 8007ba6:	9304      	str	r3, [sp, #16]
 8007ba8:	001e      	movs	r6, r3
 8007baa:	e58a      	b.n	80076c2 <_dtoa_r+0x4b2>
 8007bac:	40240000 	.word	0x40240000
 8007bb0:	00000433 	.word	0x00000433
 8007bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d100      	bne.n	8007bbc <_dtoa_r+0x9ac>
 8007bba:	e0b2      	b.n	8007d22 <_dtoa_r+0xb12>
 8007bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bbe:	930c      	str	r3, [sp, #48]	; 0x30
 8007bc0:	2c00      	cmp	r4, #0
 8007bc2:	dd05      	ble.n	8007bd0 <_dtoa_r+0x9c0>
 8007bc4:	0031      	movs	r1, r6
 8007bc6:	0022      	movs	r2, r4
 8007bc8:	9802      	ldr	r0, [sp, #8]
 8007bca:	f000 fe73 	bl	80088b4 <__lshift>
 8007bce:	0006      	movs	r6, r0
 8007bd0:	0030      	movs	r0, r6
 8007bd2:	2d00      	cmp	r5, #0
 8007bd4:	d011      	beq.n	8007bfa <_dtoa_r+0x9ea>
 8007bd6:	6871      	ldr	r1, [r6, #4]
 8007bd8:	9802      	ldr	r0, [sp, #8]
 8007bda:	f000 fc6b 	bl	80084b4 <_Balloc>
 8007bde:	0031      	movs	r1, r6
 8007be0:	0004      	movs	r4, r0
 8007be2:	6933      	ldr	r3, [r6, #16]
 8007be4:	310c      	adds	r1, #12
 8007be6:	1c9a      	adds	r2, r3, #2
 8007be8:	0092      	lsls	r2, r2, #2
 8007bea:	300c      	adds	r0, #12
 8007bec:	f000 fc59 	bl	80084a2 <memcpy>
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	0021      	movs	r1, r4
 8007bf4:	9802      	ldr	r0, [sp, #8]
 8007bf6:	f000 fe5d 	bl	80088b4 <__lshift>
 8007bfa:	9609      	str	r6, [sp, #36]	; 0x24
 8007bfc:	0006      	movs	r6, r0
 8007bfe:	9b08      	ldr	r3, [sp, #32]
 8007c00:	930a      	str	r3, [sp, #40]	; 0x28
 8007c02:	9904      	ldr	r1, [sp, #16]
 8007c04:	9803      	ldr	r0, [sp, #12]
 8007c06:	f7ff fa7d 	bl	8007104 <quorem>
 8007c0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c0c:	900d      	str	r0, [sp, #52]	; 0x34
 8007c0e:	0004      	movs	r4, r0
 8007c10:	9803      	ldr	r0, [sp, #12]
 8007c12:	f000 fea1 	bl	8008958 <__mcmp>
 8007c16:	0032      	movs	r2, r6
 8007c18:	9010      	str	r0, [sp, #64]	; 0x40
 8007c1a:	9904      	ldr	r1, [sp, #16]
 8007c1c:	9802      	ldr	r0, [sp, #8]
 8007c1e:	f000 feb5 	bl	800898c <__mdiff>
 8007c22:	2301      	movs	r3, #1
 8007c24:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c26:	68c3      	ldr	r3, [r0, #12]
 8007c28:	3430      	adds	r4, #48	; 0x30
 8007c2a:	0005      	movs	r5, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <_dtoa_r+0xa2a>
 8007c30:	0001      	movs	r1, r0
 8007c32:	9803      	ldr	r0, [sp, #12]
 8007c34:	f000 fe90 	bl	8008958 <__mcmp>
 8007c38:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c3a:	0029      	movs	r1, r5
 8007c3c:	9802      	ldr	r0, [sp, #8]
 8007c3e:	f000 fc71 	bl	8008524 <_Bfree>
 8007c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c46:	4313      	orrs	r3, r2
 8007c48:	d10e      	bne.n	8007c68 <_dtoa_r+0xa58>
 8007c4a:	9a06      	ldr	r2, [sp, #24]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	4213      	tst	r3, r2
 8007c50:	d10a      	bne.n	8007c68 <_dtoa_r+0xa58>
 8007c52:	2c39      	cmp	r4, #57	; 0x39
 8007c54:	d026      	beq.n	8007ca4 <_dtoa_r+0xa94>
 8007c56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	dd01      	ble.n	8007c60 <_dtoa_r+0xa50>
 8007c5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007c5e:	3431      	adds	r4, #49	; 0x31
 8007c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c62:	1c5d      	adds	r5, r3, #1
 8007c64:	701c      	strb	r4, [r3, #0]
 8007c66:	e781      	b.n	8007b6c <_dtoa_r+0x95c>
 8007c68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	db07      	blt.n	8007c7e <_dtoa_r+0xa6e>
 8007c6e:	001d      	movs	r5, r3
 8007c70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c72:	431d      	orrs	r5, r3
 8007c74:	d122      	bne.n	8007cbc <_dtoa_r+0xaac>
 8007c76:	2301      	movs	r3, #1
 8007c78:	9a06      	ldr	r2, [sp, #24]
 8007c7a:	4213      	tst	r3, r2
 8007c7c:	d11e      	bne.n	8007cbc <_dtoa_r+0xaac>
 8007c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	dded      	ble.n	8007c60 <_dtoa_r+0xa50>
 8007c84:	9903      	ldr	r1, [sp, #12]
 8007c86:	2201      	movs	r2, #1
 8007c88:	9802      	ldr	r0, [sp, #8]
 8007c8a:	f000 fe13 	bl	80088b4 <__lshift>
 8007c8e:	9904      	ldr	r1, [sp, #16]
 8007c90:	9003      	str	r0, [sp, #12]
 8007c92:	f000 fe61 	bl	8008958 <__mcmp>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	dc02      	bgt.n	8007ca0 <_dtoa_r+0xa90>
 8007c9a:	d1e1      	bne.n	8007c60 <_dtoa_r+0xa50>
 8007c9c:	07e3      	lsls	r3, r4, #31
 8007c9e:	d5df      	bpl.n	8007c60 <_dtoa_r+0xa50>
 8007ca0:	2c39      	cmp	r4, #57	; 0x39
 8007ca2:	d1db      	bne.n	8007c5c <_dtoa_r+0xa4c>
 8007ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ca8:	1c5d      	adds	r5, r3, #1
 8007caa:	2339      	movs	r3, #57	; 0x39
 8007cac:	7013      	strb	r3, [r2, #0]
 8007cae:	1e6b      	subs	r3, r5, #1
 8007cb0:	781a      	ldrb	r2, [r3, #0]
 8007cb2:	2a39      	cmp	r2, #57	; 0x39
 8007cb4:	d067      	beq.n	8007d86 <_dtoa_r+0xb76>
 8007cb6:	3201      	adds	r2, #1
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	e757      	b.n	8007b6c <_dtoa_r+0x95c>
 8007cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cbe:	1c5d      	adds	r5, r3, #1
 8007cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dd04      	ble.n	8007cd0 <_dtoa_r+0xac0>
 8007cc6:	2c39      	cmp	r4, #57	; 0x39
 8007cc8:	d0ec      	beq.n	8007ca4 <_dtoa_r+0xa94>
 8007cca:	3401      	adds	r4, #1
 8007ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cce:	e7c9      	b.n	8007c64 <_dtoa_r+0xa54>
 8007cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cd4:	701c      	strb	r4, [r3, #0]
 8007cd6:	9b08      	ldr	r3, [sp, #32]
 8007cd8:	1aeb      	subs	r3, r5, r3
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d03e      	beq.n	8007d5c <_dtoa_r+0xb4c>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	220a      	movs	r2, #10
 8007ce2:	9903      	ldr	r1, [sp, #12]
 8007ce4:	9802      	ldr	r0, [sp, #8]
 8007ce6:	f000 fc36 	bl	8008556 <__multadd>
 8007cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cec:	9003      	str	r0, [sp, #12]
 8007cee:	42b3      	cmp	r3, r6
 8007cf0:	d109      	bne.n	8007d06 <_dtoa_r+0xaf6>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	220a      	movs	r2, #10
 8007cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cf8:	9802      	ldr	r0, [sp, #8]
 8007cfa:	f000 fc2c 	bl	8008556 <__multadd>
 8007cfe:	9009      	str	r0, [sp, #36]	; 0x24
 8007d00:	0006      	movs	r6, r0
 8007d02:	950a      	str	r5, [sp, #40]	; 0x28
 8007d04:	e77d      	b.n	8007c02 <_dtoa_r+0x9f2>
 8007d06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d08:	2300      	movs	r3, #0
 8007d0a:	220a      	movs	r2, #10
 8007d0c:	9802      	ldr	r0, [sp, #8]
 8007d0e:	f000 fc22 	bl	8008556 <__multadd>
 8007d12:	2300      	movs	r3, #0
 8007d14:	9009      	str	r0, [sp, #36]	; 0x24
 8007d16:	220a      	movs	r2, #10
 8007d18:	0031      	movs	r1, r6
 8007d1a:	9802      	ldr	r0, [sp, #8]
 8007d1c:	f000 fc1b 	bl	8008556 <__multadd>
 8007d20:	e7ee      	b.n	8007d00 <_dtoa_r+0xaf0>
 8007d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d24:	930c      	str	r3, [sp, #48]	; 0x30
 8007d26:	9b08      	ldr	r3, [sp, #32]
 8007d28:	9306      	str	r3, [sp, #24]
 8007d2a:	9904      	ldr	r1, [sp, #16]
 8007d2c:	9803      	ldr	r0, [sp, #12]
 8007d2e:	f7ff f9e9 	bl	8007104 <quorem>
 8007d32:	9b06      	ldr	r3, [sp, #24]
 8007d34:	3030      	adds	r0, #48	; 0x30
 8007d36:	1c5d      	adds	r5, r3, #1
 8007d38:	7018      	strb	r0, [r3, #0]
 8007d3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d3c:	9b08      	ldr	r3, [sp, #32]
 8007d3e:	0004      	movs	r4, r0
 8007d40:	1aeb      	subs	r3, r5, r3
 8007d42:	429a      	cmp	r2, r3
 8007d44:	dd08      	ble.n	8007d58 <_dtoa_r+0xb48>
 8007d46:	2300      	movs	r3, #0
 8007d48:	220a      	movs	r2, #10
 8007d4a:	9903      	ldr	r1, [sp, #12]
 8007d4c:	9802      	ldr	r0, [sp, #8]
 8007d4e:	f000 fc02 	bl	8008556 <__multadd>
 8007d52:	9506      	str	r5, [sp, #24]
 8007d54:	9003      	str	r0, [sp, #12]
 8007d56:	e7e8      	b.n	8007d2a <_dtoa_r+0xb1a>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5c:	9903      	ldr	r1, [sp, #12]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	9802      	ldr	r0, [sp, #8]
 8007d62:	f000 fda7 	bl	80088b4 <__lshift>
 8007d66:	9904      	ldr	r1, [sp, #16]
 8007d68:	9003      	str	r0, [sp, #12]
 8007d6a:	f000 fdf5 	bl	8008958 <__mcmp>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	dc9d      	bgt.n	8007cae <_dtoa_r+0xa9e>
 8007d72:	d101      	bne.n	8007d78 <_dtoa_r+0xb68>
 8007d74:	07e3      	lsls	r3, r4, #31
 8007d76:	d49a      	bmi.n	8007cae <_dtoa_r+0xa9e>
 8007d78:	1e6b      	subs	r3, r5, #1
 8007d7a:	781a      	ldrb	r2, [r3, #0]
 8007d7c:	2a30      	cmp	r2, #48	; 0x30
 8007d7e:	d000      	beq.n	8007d82 <_dtoa_r+0xb72>
 8007d80:	e6f4      	b.n	8007b6c <_dtoa_r+0x95c>
 8007d82:	001d      	movs	r5, r3
 8007d84:	e7f8      	b.n	8007d78 <_dtoa_r+0xb68>
 8007d86:	9a08      	ldr	r2, [sp, #32]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d103      	bne.n	8007d94 <_dtoa_r+0xb84>
 8007d8c:	2331      	movs	r3, #49	; 0x31
 8007d8e:	3701      	adds	r7, #1
 8007d90:	7013      	strb	r3, [r2, #0]
 8007d92:	e6eb      	b.n	8007b6c <_dtoa_r+0x95c>
 8007d94:	001d      	movs	r5, r3
 8007d96:	e78a      	b.n	8007cae <_dtoa_r+0xa9e>
 8007d98:	4b0b      	ldr	r3, [pc, #44]	; (8007dc8 <_dtoa_r+0xbb8>)
 8007d9a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d9c:	9308      	str	r3, [sp, #32]
 8007d9e:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <_dtoa_r+0xbbc>)
 8007da0:	2a00      	cmp	r2, #0
 8007da2:	d001      	beq.n	8007da8 <_dtoa_r+0xb98>
 8007da4:	f7ff fa77 	bl	8007296 <_dtoa_r+0x86>
 8007da8:	f7ff fa77 	bl	800729a <_dtoa_r+0x8a>
 8007dac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	dc00      	bgt.n	8007db4 <_dtoa_r+0xba4>
 8007db2:	e621      	b.n	80079f8 <_dtoa_r+0x7e8>
 8007db4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007db6:	2001      	movs	r0, #1
 8007db8:	e635      	b.n	8007a26 <_dtoa_r+0x816>
 8007dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dcb2      	bgt.n	8007d26 <_dtoa_r+0xb16>
 8007dc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	ddaf      	ble.n	8007d26 <_dtoa_r+0xb16>
 8007dc6:	e6bc      	b.n	8007b42 <_dtoa_r+0x932>
 8007dc8:	08009358 	.word	0x08009358
 8007dcc:	08009360 	.word	0x08009360

08007dd0 <rshift>:
 8007dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dd2:	0004      	movs	r4, r0
 8007dd4:	6905      	ldr	r5, [r0, #16]
 8007dd6:	3414      	adds	r4, #20
 8007dd8:	114b      	asrs	r3, r1, #5
 8007dda:	0026      	movs	r6, r4
 8007ddc:	429d      	cmp	r5, r3
 8007dde:	dd14      	ble.n	8007e0a <rshift+0x3a>
 8007de0:	221f      	movs	r2, #31
 8007de2:	00ad      	lsls	r5, r5, #2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4011      	ands	r1, r2
 8007de8:	1965      	adds	r5, r4, r5
 8007dea:	18e3      	adds	r3, r4, r3
 8007dec:	0022      	movs	r2, r4
 8007dee:	2900      	cmp	r1, #0
 8007df0:	d01e      	beq.n	8007e30 <rshift+0x60>
 8007df2:	cb04      	ldmia	r3!, {r2}
 8007df4:	2720      	movs	r7, #32
 8007df6:	40ca      	lsrs	r2, r1
 8007df8:	46a4      	mov	ip, r4
 8007dfa:	1a7f      	subs	r7, r7, r1
 8007dfc:	4666      	mov	r6, ip
 8007dfe:	429d      	cmp	r5, r3
 8007e00:	d80b      	bhi.n	8007e1a <rshift+0x4a>
 8007e02:	6032      	str	r2, [r6, #0]
 8007e04:	2a00      	cmp	r2, #0
 8007e06:	d000      	beq.n	8007e0a <rshift+0x3a>
 8007e08:	3604      	adds	r6, #4
 8007e0a:	1b33      	subs	r3, r6, r4
 8007e0c:	109b      	asrs	r3, r3, #2
 8007e0e:	6103      	str	r3, [r0, #16]
 8007e10:	42a6      	cmp	r6, r4
 8007e12:	d101      	bne.n	8007e18 <rshift+0x48>
 8007e14:	2300      	movs	r3, #0
 8007e16:	6143      	str	r3, [r0, #20]
 8007e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e1a:	681e      	ldr	r6, [r3, #0]
 8007e1c:	40be      	lsls	r6, r7
 8007e1e:	4332      	orrs	r2, r6
 8007e20:	4666      	mov	r6, ip
 8007e22:	c604      	stmia	r6!, {r2}
 8007e24:	cb04      	ldmia	r3!, {r2}
 8007e26:	46b4      	mov	ip, r6
 8007e28:	40ca      	lsrs	r2, r1
 8007e2a:	e7e7      	b.n	8007dfc <rshift+0x2c>
 8007e2c:	cb02      	ldmia	r3!, {r1}
 8007e2e:	c202      	stmia	r2!, {r1}
 8007e30:	0016      	movs	r6, r2
 8007e32:	429d      	cmp	r5, r3
 8007e34:	d8fa      	bhi.n	8007e2c <rshift+0x5c>
 8007e36:	e7e8      	b.n	8007e0a <rshift+0x3a>

08007e38 <__hexdig_fun>:
 8007e38:	0003      	movs	r3, r0
 8007e3a:	3b30      	subs	r3, #48	; 0x30
 8007e3c:	2b09      	cmp	r3, #9
 8007e3e:	d803      	bhi.n	8007e48 <__hexdig_fun+0x10>
 8007e40:	3820      	subs	r0, #32
 8007e42:	b2c3      	uxtb	r3, r0
 8007e44:	0018      	movs	r0, r3
 8007e46:	4770      	bx	lr
 8007e48:	0003      	movs	r3, r0
 8007e4a:	3b61      	subs	r3, #97	; 0x61
 8007e4c:	2b05      	cmp	r3, #5
 8007e4e:	d801      	bhi.n	8007e54 <__hexdig_fun+0x1c>
 8007e50:	3847      	subs	r0, #71	; 0x47
 8007e52:	e7f6      	b.n	8007e42 <__hexdig_fun+0xa>
 8007e54:	0002      	movs	r2, r0
 8007e56:	3a41      	subs	r2, #65	; 0x41
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2a05      	cmp	r2, #5
 8007e5c:	d8f2      	bhi.n	8007e44 <__hexdig_fun+0xc>
 8007e5e:	3827      	subs	r0, #39	; 0x27
 8007e60:	e7ef      	b.n	8007e42 <__hexdig_fun+0xa>

08007e62 <__gethex>:
 8007e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e64:	b08d      	sub	sp, #52	; 0x34
 8007e66:	9005      	str	r0, [sp, #20]
 8007e68:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007e6a:	9109      	str	r1, [sp, #36]	; 0x24
 8007e6c:	9202      	str	r2, [sp, #8]
 8007e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e70:	f000 fae2 	bl	8008438 <__localeconv_l>
 8007e74:	6803      	ldr	r3, [r0, #0]
 8007e76:	0018      	movs	r0, r3
 8007e78:	9307      	str	r3, [sp, #28]
 8007e7a:	f7f8 f945 	bl	8000108 <strlen>
 8007e7e:	2202      	movs	r2, #2
 8007e80:	9b07      	ldr	r3, [sp, #28]
 8007e82:	4252      	negs	r2, r2
 8007e84:	181b      	adds	r3, r3, r0
 8007e86:	3b01      	subs	r3, #1
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	9004      	str	r0, [sp, #16]
 8007e8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e90:	6819      	ldr	r1, [r3, #0]
 8007e92:	1c8b      	adds	r3, r1, #2
 8007e94:	1a52      	subs	r2, r2, r1
 8007e96:	18d1      	adds	r1, r2, r3
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	9108      	str	r1, [sp, #32]
 8007e9c:	9901      	ldr	r1, [sp, #4]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	7808      	ldrb	r0, [r1, #0]
 8007ea2:	2830      	cmp	r0, #48	; 0x30
 8007ea4:	d0f7      	beq.n	8007e96 <__gethex+0x34>
 8007ea6:	f7ff ffc7 	bl	8007e38 <__hexdig_fun>
 8007eaa:	1e07      	subs	r7, r0, #0
 8007eac:	d000      	beq.n	8007eb0 <__gethex+0x4e>
 8007eae:	e06f      	b.n	8007f90 <__gethex+0x12e>
 8007eb0:	9a04      	ldr	r2, [sp, #16]
 8007eb2:	9907      	ldr	r1, [sp, #28]
 8007eb4:	9801      	ldr	r0, [sp, #4]
 8007eb6:	f001 f91b 	bl	80090f0 <strncmp>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d000      	beq.n	8007ec0 <__gethex+0x5e>
 8007ebe:	e06d      	b.n	8007f9c <__gethex+0x13a>
 8007ec0:	9b01      	ldr	r3, [sp, #4]
 8007ec2:	9a04      	ldr	r2, [sp, #16]
 8007ec4:	189c      	adds	r4, r3, r2
 8007ec6:	7820      	ldrb	r0, [r4, #0]
 8007ec8:	f7ff ffb6 	bl	8007e38 <__hexdig_fun>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d069      	beq.n	8007fa4 <__gethex+0x142>
 8007ed0:	9401      	str	r4, [sp, #4]
 8007ed2:	9b01      	ldr	r3, [sp, #4]
 8007ed4:	7818      	ldrb	r0, [r3, #0]
 8007ed6:	2830      	cmp	r0, #48	; 0x30
 8007ed8:	d009      	beq.n	8007eee <__gethex+0x8c>
 8007eda:	f7ff ffad 	bl	8007e38 <__hexdig_fun>
 8007ede:	4243      	negs	r3, r0
 8007ee0:	4143      	adcs	r3, r0
 8007ee2:	9303      	str	r3, [sp, #12]
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	0026      	movs	r6, r4
 8007ee8:	9308      	str	r3, [sp, #32]
 8007eea:	9c01      	ldr	r4, [sp, #4]
 8007eec:	e004      	b.n	8007ef8 <__gethex+0x96>
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	9301      	str	r3, [sp, #4]
 8007ef4:	e7ed      	b.n	8007ed2 <__gethex+0x70>
 8007ef6:	3401      	adds	r4, #1
 8007ef8:	7820      	ldrb	r0, [r4, #0]
 8007efa:	f7ff ff9d 	bl	8007e38 <__hexdig_fun>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d1f9      	bne.n	8007ef6 <__gethex+0x94>
 8007f02:	9a04      	ldr	r2, [sp, #16]
 8007f04:	9907      	ldr	r1, [sp, #28]
 8007f06:	0020      	movs	r0, r4
 8007f08:	f001 f8f2 	bl	80090f0 <strncmp>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d109      	bne.n	8007f24 <__gethex+0xc2>
 8007f10:	2e00      	cmp	r6, #0
 8007f12:	d10a      	bne.n	8007f2a <__gethex+0xc8>
 8007f14:	9b04      	ldr	r3, [sp, #16]
 8007f16:	18e4      	adds	r4, r4, r3
 8007f18:	0026      	movs	r6, r4
 8007f1a:	7820      	ldrb	r0, [r4, #0]
 8007f1c:	f7ff ff8c 	bl	8007e38 <__hexdig_fun>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d139      	bne.n	8007f98 <__gethex+0x136>
 8007f24:	2700      	movs	r7, #0
 8007f26:	42be      	cmp	r6, r7
 8007f28:	d001      	beq.n	8007f2e <__gethex+0xcc>
 8007f2a:	1b37      	subs	r7, r6, r4
 8007f2c:	00bf      	lsls	r7, r7, #2
 8007f2e:	7823      	ldrb	r3, [r4, #0]
 8007f30:	2b50      	cmp	r3, #80	; 0x50
 8007f32:	d001      	beq.n	8007f38 <__gethex+0xd6>
 8007f34:	2b70      	cmp	r3, #112	; 0x70
 8007f36:	d142      	bne.n	8007fbe <__gethex+0x15c>
 8007f38:	7863      	ldrb	r3, [r4, #1]
 8007f3a:	2b2b      	cmp	r3, #43	; 0x2b
 8007f3c:	d034      	beq.n	8007fa8 <__gethex+0x146>
 8007f3e:	2b2d      	cmp	r3, #45	; 0x2d
 8007f40:	d036      	beq.n	8007fb0 <__gethex+0x14e>
 8007f42:	2300      	movs	r3, #0
 8007f44:	1c66      	adds	r6, r4, #1
 8007f46:	9306      	str	r3, [sp, #24]
 8007f48:	7830      	ldrb	r0, [r6, #0]
 8007f4a:	f7ff ff75 	bl	8007e38 <__hexdig_fun>
 8007f4e:	1e43      	subs	r3, r0, #1
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b18      	cmp	r3, #24
 8007f54:	d833      	bhi.n	8007fbe <__gethex+0x15c>
 8007f56:	3810      	subs	r0, #16
 8007f58:	0005      	movs	r5, r0
 8007f5a:	3601      	adds	r6, #1
 8007f5c:	7830      	ldrb	r0, [r6, #0]
 8007f5e:	f7ff ff6b 	bl	8007e38 <__hexdig_fun>
 8007f62:	1e43      	subs	r3, r0, #1
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b18      	cmp	r3, #24
 8007f68:	d924      	bls.n	8007fb4 <__gethex+0x152>
 8007f6a:	9b06      	ldr	r3, [sp, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d000      	beq.n	8007f72 <__gethex+0x110>
 8007f70:	426d      	negs	r5, r5
 8007f72:	197f      	adds	r7, r7, r5
 8007f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f76:	601e      	str	r6, [r3, #0]
 8007f78:	9b03      	ldr	r3, [sp, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d021      	beq.n	8007fc2 <__gethex+0x160>
 8007f7e:	9b08      	ldr	r3, [sp, #32]
 8007f80:	2606      	movs	r6, #6
 8007f82:	425a      	negs	r2, r3
 8007f84:	4153      	adcs	r3, r2
 8007f86:	425b      	negs	r3, r3
 8007f88:	401e      	ands	r6, r3
 8007f8a:	0030      	movs	r0, r6
 8007f8c:	b00d      	add	sp, #52	; 0x34
 8007f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f90:	2300      	movs	r3, #0
 8007f92:	9303      	str	r3, [sp, #12]
 8007f94:	001e      	movs	r6, r3
 8007f96:	e7a8      	b.n	8007eea <__gethex+0x88>
 8007f98:	3401      	adds	r4, #1
 8007f9a:	e7be      	b.n	8007f1a <__gethex+0xb8>
 8007f9c:	9c01      	ldr	r4, [sp, #4]
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	9303      	str	r3, [sp, #12]
 8007fa2:	e7c4      	b.n	8007f2e <__gethex+0xcc>
 8007fa4:	0007      	movs	r7, r0
 8007fa6:	e7fa      	b.n	8007f9e <__gethex+0x13c>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	9306      	str	r3, [sp, #24]
 8007fac:	1ca6      	adds	r6, r4, #2
 8007fae:	e7cb      	b.n	8007f48 <__gethex+0xe6>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e7fa      	b.n	8007faa <__gethex+0x148>
 8007fb4:	230a      	movs	r3, #10
 8007fb6:	435d      	muls	r5, r3
 8007fb8:	182d      	adds	r5, r5, r0
 8007fba:	3d10      	subs	r5, #16
 8007fbc:	e7cd      	b.n	8007f5a <__gethex+0xf8>
 8007fbe:	0026      	movs	r6, r4
 8007fc0:	e7d8      	b.n	8007f74 <__gethex+0x112>
 8007fc2:	9b01      	ldr	r3, [sp, #4]
 8007fc4:	9903      	ldr	r1, [sp, #12]
 8007fc6:	1ae3      	subs	r3, r4, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	2b07      	cmp	r3, #7
 8007fcc:	dc47      	bgt.n	800805e <__gethex+0x1fc>
 8007fce:	9805      	ldr	r0, [sp, #20]
 8007fd0:	f000 fa70 	bl	80084b4 <_Balloc>
 8007fd4:	0003      	movs	r3, r0
 8007fd6:	3314      	adds	r3, #20
 8007fd8:	9303      	str	r3, [sp, #12]
 8007fda:	9308      	str	r3, [sp, #32]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	0005      	movs	r5, r0
 8007fe0:	001e      	movs	r6, r3
 8007fe2:	9306      	str	r3, [sp, #24]
 8007fe4:	9b01      	ldr	r3, [sp, #4]
 8007fe6:	42a3      	cmp	r3, r4
 8007fe8:	d33c      	bcc.n	8008064 <__gethex+0x202>
 8007fea:	9c08      	ldr	r4, [sp, #32]
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	c440      	stmia	r4!, {r6}
 8007ff0:	1ae4      	subs	r4, r4, r3
 8007ff2:	10a4      	asrs	r4, r4, #2
 8007ff4:	612c      	str	r4, [r5, #16]
 8007ff6:	0030      	movs	r0, r6
 8007ff8:	f000 fb29 	bl	800864e <__hi0bits>
 8007ffc:	9b02      	ldr	r3, [sp, #8]
 8007ffe:	0164      	lsls	r4, r4, #5
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	1a26      	subs	r6, r4, r0
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	429e      	cmp	r6, r3
 8008008:	dd5f      	ble.n	80080ca <__gethex+0x268>
 800800a:	1af6      	subs	r6, r6, r3
 800800c:	0031      	movs	r1, r6
 800800e:	0028      	movs	r0, r5
 8008010:	f000 fe23 	bl	8008c5a <__any_on>
 8008014:	1e04      	subs	r4, r0, #0
 8008016:	d00f      	beq.n	8008038 <__gethex+0x1d6>
 8008018:	2401      	movs	r4, #1
 800801a:	211f      	movs	r1, #31
 800801c:	0020      	movs	r0, r4
 800801e:	1e73      	subs	r3, r6, #1
 8008020:	4019      	ands	r1, r3
 8008022:	4088      	lsls	r0, r1
 8008024:	0001      	movs	r1, r0
 8008026:	115a      	asrs	r2, r3, #5
 8008028:	9803      	ldr	r0, [sp, #12]
 800802a:	0092      	lsls	r2, r2, #2
 800802c:	5812      	ldr	r2, [r2, r0]
 800802e:	420a      	tst	r2, r1
 8008030:	d002      	beq.n	8008038 <__gethex+0x1d6>
 8008032:	42a3      	cmp	r3, r4
 8008034:	dc41      	bgt.n	80080ba <__gethex+0x258>
 8008036:	2402      	movs	r4, #2
 8008038:	0031      	movs	r1, r6
 800803a:	0028      	movs	r0, r5
 800803c:	f7ff fec8 	bl	8007dd0 <rshift>
 8008040:	19bf      	adds	r7, r7, r6
 8008042:	9b02      	ldr	r3, [sp, #8]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	9304      	str	r3, [sp, #16]
 8008048:	42bb      	cmp	r3, r7
 800804a:	da4e      	bge.n	80080ea <__gethex+0x288>
 800804c:	0029      	movs	r1, r5
 800804e:	9805      	ldr	r0, [sp, #20]
 8008050:	f000 fa68 	bl	8008524 <_Bfree>
 8008054:	2300      	movs	r3, #0
 8008056:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008058:	26a3      	movs	r6, #163	; 0xa3
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	e795      	b.n	8007f8a <__gethex+0x128>
 800805e:	3101      	adds	r1, #1
 8008060:	105b      	asrs	r3, r3, #1
 8008062:	e7b2      	b.n	8007fca <__gethex+0x168>
 8008064:	1e63      	subs	r3, r4, #1
 8008066:	9309      	str	r3, [sp, #36]	; 0x24
 8008068:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	4293      	cmp	r3, r2
 800806e:	d015      	beq.n	800809c <__gethex+0x23a>
 8008070:	9b06      	ldr	r3, [sp, #24]
 8008072:	2b20      	cmp	r3, #32
 8008074:	d105      	bne.n	8008082 <__gethex+0x220>
 8008076:	9b08      	ldr	r3, [sp, #32]
 8008078:	601e      	str	r6, [r3, #0]
 800807a:	2600      	movs	r6, #0
 800807c:	3304      	adds	r3, #4
 800807e:	9308      	str	r3, [sp, #32]
 8008080:	9606      	str	r6, [sp, #24]
 8008082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008084:	7818      	ldrb	r0, [r3, #0]
 8008086:	f7ff fed7 	bl	8007e38 <__hexdig_fun>
 800808a:	230f      	movs	r3, #15
 800808c:	4018      	ands	r0, r3
 800808e:	9b06      	ldr	r3, [sp, #24]
 8008090:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008092:	4098      	lsls	r0, r3
 8008094:	3304      	adds	r3, #4
 8008096:	4306      	orrs	r6, r0
 8008098:	9306      	str	r3, [sp, #24]
 800809a:	e7a3      	b.n	8007fe4 <__gethex+0x182>
 800809c:	2301      	movs	r3, #1
 800809e:	9a04      	ldr	r2, [sp, #16]
 80080a0:	1a9c      	subs	r4, r3, r2
 80080a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a4:	191c      	adds	r4, r3, r4
 80080a6:	9b01      	ldr	r3, [sp, #4]
 80080a8:	429c      	cmp	r4, r3
 80080aa:	d3e1      	bcc.n	8008070 <__gethex+0x20e>
 80080ac:	9907      	ldr	r1, [sp, #28]
 80080ae:	0020      	movs	r0, r4
 80080b0:	f001 f81e 	bl	80090f0 <strncmp>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d1db      	bne.n	8008070 <__gethex+0x20e>
 80080b8:	e794      	b.n	8007fe4 <__gethex+0x182>
 80080ba:	1eb1      	subs	r1, r6, #2
 80080bc:	0028      	movs	r0, r5
 80080be:	f000 fdcc 	bl	8008c5a <__any_on>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d0b7      	beq.n	8008036 <__gethex+0x1d4>
 80080c6:	2403      	movs	r4, #3
 80080c8:	e7b6      	b.n	8008038 <__gethex+0x1d6>
 80080ca:	9b01      	ldr	r3, [sp, #4]
 80080cc:	2400      	movs	r4, #0
 80080ce:	429e      	cmp	r6, r3
 80080d0:	dab7      	bge.n	8008042 <__gethex+0x1e0>
 80080d2:	1b9e      	subs	r6, r3, r6
 80080d4:	0029      	movs	r1, r5
 80080d6:	0032      	movs	r2, r6
 80080d8:	9805      	ldr	r0, [sp, #20]
 80080da:	f000 fbeb 	bl	80088b4 <__lshift>
 80080de:	0003      	movs	r3, r0
 80080e0:	3314      	adds	r3, #20
 80080e2:	0005      	movs	r5, r0
 80080e4:	1bbf      	subs	r7, r7, r6
 80080e6:	9303      	str	r3, [sp, #12]
 80080e8:	e7ab      	b.n	8008042 <__gethex+0x1e0>
 80080ea:	9b02      	ldr	r3, [sp, #8]
 80080ec:	685e      	ldr	r6, [r3, #4]
 80080ee:	42be      	cmp	r6, r7
 80080f0:	dd6b      	ble.n	80081ca <__gethex+0x368>
 80080f2:	9b01      	ldr	r3, [sp, #4]
 80080f4:	1bf6      	subs	r6, r6, r7
 80080f6:	42b3      	cmp	r3, r6
 80080f8:	dc32      	bgt.n	8008160 <__gethex+0x2fe>
 80080fa:	9b02      	ldr	r3, [sp, #8]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d026      	beq.n	8008150 <__gethex+0x2ee>
 8008102:	2b03      	cmp	r3, #3
 8008104:	d028      	beq.n	8008158 <__gethex+0x2f6>
 8008106:	2b01      	cmp	r3, #1
 8008108:	d119      	bne.n	800813e <__gethex+0x2dc>
 800810a:	9b01      	ldr	r3, [sp, #4]
 800810c:	42b3      	cmp	r3, r6
 800810e:	d116      	bne.n	800813e <__gethex+0x2dc>
 8008110:	2b01      	cmp	r3, #1
 8008112:	dc0d      	bgt.n	8008130 <__gethex+0x2ce>
 8008114:	9b02      	ldr	r3, [sp, #8]
 8008116:	2662      	movs	r6, #98	; 0x62
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	9a01      	ldr	r2, [sp, #4]
 800811e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	2301      	movs	r3, #1
 8008124:	9a03      	ldr	r2, [sp, #12]
 8008126:	612b      	str	r3, [r5, #16]
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800812c:	601d      	str	r5, [r3, #0]
 800812e:	e72c      	b.n	8007f8a <__gethex+0x128>
 8008130:	9901      	ldr	r1, [sp, #4]
 8008132:	0028      	movs	r0, r5
 8008134:	3901      	subs	r1, #1
 8008136:	f000 fd90 	bl	8008c5a <__any_on>
 800813a:	2800      	cmp	r0, #0
 800813c:	d1ea      	bne.n	8008114 <__gethex+0x2b2>
 800813e:	0029      	movs	r1, r5
 8008140:	9805      	ldr	r0, [sp, #20]
 8008142:	f000 f9ef 	bl	8008524 <_Bfree>
 8008146:	2300      	movs	r3, #0
 8008148:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800814a:	2650      	movs	r6, #80	; 0x50
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	e71c      	b.n	8007f8a <__gethex+0x128>
 8008150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0de      	beq.n	8008114 <__gethex+0x2b2>
 8008156:	e7f2      	b.n	800813e <__gethex+0x2dc>
 8008158:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1da      	bne.n	8008114 <__gethex+0x2b2>
 800815e:	e7ee      	b.n	800813e <__gethex+0x2dc>
 8008160:	1e77      	subs	r7, r6, #1
 8008162:	2c00      	cmp	r4, #0
 8008164:	d12f      	bne.n	80081c6 <__gethex+0x364>
 8008166:	2f00      	cmp	r7, #0
 8008168:	d004      	beq.n	8008174 <__gethex+0x312>
 800816a:	0039      	movs	r1, r7
 800816c:	0028      	movs	r0, r5
 800816e:	f000 fd74 	bl	8008c5a <__any_on>
 8008172:	0004      	movs	r4, r0
 8008174:	231f      	movs	r3, #31
 8008176:	117a      	asrs	r2, r7, #5
 8008178:	401f      	ands	r7, r3
 800817a:	3b1e      	subs	r3, #30
 800817c:	40bb      	lsls	r3, r7
 800817e:	9903      	ldr	r1, [sp, #12]
 8008180:	0092      	lsls	r2, r2, #2
 8008182:	5852      	ldr	r2, [r2, r1]
 8008184:	421a      	tst	r2, r3
 8008186:	d001      	beq.n	800818c <__gethex+0x32a>
 8008188:	2302      	movs	r3, #2
 800818a:	431c      	orrs	r4, r3
 800818c:	9b01      	ldr	r3, [sp, #4]
 800818e:	0031      	movs	r1, r6
 8008190:	1b9b      	subs	r3, r3, r6
 8008192:	2602      	movs	r6, #2
 8008194:	0028      	movs	r0, r5
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	f7ff fe1a 	bl	8007dd0 <rshift>
 800819c:	9b02      	ldr	r3, [sp, #8]
 800819e:	685f      	ldr	r7, [r3, #4]
 80081a0:	2c00      	cmp	r4, #0
 80081a2:	d040      	beq.n	8008226 <__gethex+0x3c4>
 80081a4:	9b02      	ldr	r3, [sp, #8]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d010      	beq.n	80081ce <__gethex+0x36c>
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d012      	beq.n	80081d6 <__gethex+0x374>
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d106      	bne.n	80081c2 <__gethex+0x360>
 80081b4:	07a2      	lsls	r2, r4, #30
 80081b6:	d504      	bpl.n	80081c2 <__gethex+0x360>
 80081b8:	9a03      	ldr	r2, [sp, #12]
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	4314      	orrs	r4, r2
 80081be:	421c      	tst	r4, r3
 80081c0:	d10c      	bne.n	80081dc <__gethex+0x37a>
 80081c2:	2310      	movs	r3, #16
 80081c4:	e02e      	b.n	8008224 <__gethex+0x3c2>
 80081c6:	2401      	movs	r4, #1
 80081c8:	e7d4      	b.n	8008174 <__gethex+0x312>
 80081ca:	2601      	movs	r6, #1
 80081cc:	e7e8      	b.n	80081a0 <__gethex+0x33e>
 80081ce:	2301      	movs	r3, #1
 80081d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081d2:	1a9b      	subs	r3, r3, r2
 80081d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80081d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0f2      	beq.n	80081c2 <__gethex+0x360>
 80081dc:	692c      	ldr	r4, [r5, #16]
 80081de:	00a3      	lsls	r3, r4, #2
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	002b      	movs	r3, r5
 80081e4:	00a2      	lsls	r2, r4, #2
 80081e6:	3314      	adds	r3, #20
 80081e8:	1899      	adds	r1, r3, r2
 80081ea:	2200      	movs	r2, #0
 80081ec:	4694      	mov	ip, r2
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	1c50      	adds	r0, r2, #1
 80081f2:	d01d      	beq.n	8008230 <__gethex+0x3ce>
 80081f4:	3201      	adds	r2, #1
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	002b      	movs	r3, r5
 80081fa:	3314      	adds	r3, #20
 80081fc:	2e02      	cmp	r6, #2
 80081fe:	d13a      	bne.n	8008276 <__gethex+0x414>
 8008200:	9a02      	ldr	r2, [sp, #8]
 8008202:	9901      	ldr	r1, [sp, #4]
 8008204:	6812      	ldr	r2, [r2, #0]
 8008206:	3a01      	subs	r2, #1
 8008208:	428a      	cmp	r2, r1
 800820a:	d10a      	bne.n	8008222 <__gethex+0x3c0>
 800820c:	114a      	asrs	r2, r1, #5
 800820e:	211f      	movs	r1, #31
 8008210:	9801      	ldr	r0, [sp, #4]
 8008212:	0092      	lsls	r2, r2, #2
 8008214:	4001      	ands	r1, r0
 8008216:	2001      	movs	r0, #1
 8008218:	0004      	movs	r4, r0
 800821a:	408c      	lsls	r4, r1
 800821c:	58d3      	ldr	r3, [r2, r3]
 800821e:	4223      	tst	r3, r4
 8008220:	d148      	bne.n	80082b4 <__gethex+0x452>
 8008222:	2320      	movs	r3, #32
 8008224:	431e      	orrs	r6, r3
 8008226:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008228:	601d      	str	r5, [r3, #0]
 800822a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822c:	601f      	str	r7, [r3, #0]
 800822e:	e6ac      	b.n	8007f8a <__gethex+0x128>
 8008230:	4662      	mov	r2, ip
 8008232:	c304      	stmia	r3!, {r2}
 8008234:	4299      	cmp	r1, r3
 8008236:	d8da      	bhi.n	80081ee <__gethex+0x38c>
 8008238:	68ab      	ldr	r3, [r5, #8]
 800823a:	429c      	cmp	r4, r3
 800823c:	db12      	blt.n	8008264 <__gethex+0x402>
 800823e:	686b      	ldr	r3, [r5, #4]
 8008240:	9805      	ldr	r0, [sp, #20]
 8008242:	1c59      	adds	r1, r3, #1
 8008244:	f000 f936 	bl	80084b4 <_Balloc>
 8008248:	0029      	movs	r1, r5
 800824a:	692b      	ldr	r3, [r5, #16]
 800824c:	9003      	str	r0, [sp, #12]
 800824e:	1c9a      	adds	r2, r3, #2
 8008250:	0092      	lsls	r2, r2, #2
 8008252:	310c      	adds	r1, #12
 8008254:	300c      	adds	r0, #12
 8008256:	f000 f924 	bl	80084a2 <memcpy>
 800825a:	0029      	movs	r1, r5
 800825c:	9805      	ldr	r0, [sp, #20]
 800825e:	f000 f961 	bl	8008524 <_Bfree>
 8008262:	9d03      	ldr	r5, [sp, #12]
 8008264:	692b      	ldr	r3, [r5, #16]
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	612a      	str	r2, [r5, #16]
 800826a:	2201      	movs	r2, #1
 800826c:	3304      	adds	r3, #4
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	18eb      	adds	r3, r5, r3
 8008272:	605a      	str	r2, [r3, #4]
 8008274:	e7c0      	b.n	80081f8 <__gethex+0x396>
 8008276:	692a      	ldr	r2, [r5, #16]
 8008278:	42a2      	cmp	r2, r4
 800827a:	dd0a      	ble.n	8008292 <__gethex+0x430>
 800827c:	2101      	movs	r1, #1
 800827e:	0028      	movs	r0, r5
 8008280:	f7ff fda6 	bl	8007dd0 <rshift>
 8008284:	9b02      	ldr	r3, [sp, #8]
 8008286:	3701      	adds	r7, #1
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	2601      	movs	r6, #1
 800828c:	42bb      	cmp	r3, r7
 800828e:	dac8      	bge.n	8008222 <__gethex+0x3c0>
 8008290:	e6dc      	b.n	800804c <__gethex+0x1ea>
 8008292:	241f      	movs	r4, #31
 8008294:	9a01      	ldr	r2, [sp, #4]
 8008296:	2601      	movs	r6, #1
 8008298:	4022      	ands	r2, r4
 800829a:	1e14      	subs	r4, r2, #0
 800829c:	d0c1      	beq.n	8008222 <__gethex+0x3c0>
 800829e:	9a04      	ldr	r2, [sp, #16]
 80082a0:	189b      	adds	r3, r3, r2
 80082a2:	3b04      	subs	r3, #4
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	f000 f9d2 	bl	800864e <__hi0bits>
 80082aa:	2120      	movs	r1, #32
 80082ac:	1b0c      	subs	r4, r1, r4
 80082ae:	42a0      	cmp	r0, r4
 80082b0:	dbe4      	blt.n	800827c <__gethex+0x41a>
 80082b2:	e7b6      	b.n	8008222 <__gethex+0x3c0>
 80082b4:	0006      	movs	r6, r0
 80082b6:	e7b4      	b.n	8008222 <__gethex+0x3c0>

080082b8 <L_shift>:
 80082b8:	2308      	movs	r3, #8
 80082ba:	b570      	push	{r4, r5, r6, lr}
 80082bc:	2520      	movs	r5, #32
 80082be:	1a9a      	subs	r2, r3, r2
 80082c0:	0092      	lsls	r2, r2, #2
 80082c2:	1aad      	subs	r5, r5, r2
 80082c4:	6843      	ldr	r3, [r0, #4]
 80082c6:	6806      	ldr	r6, [r0, #0]
 80082c8:	001c      	movs	r4, r3
 80082ca:	40ac      	lsls	r4, r5
 80082cc:	40d3      	lsrs	r3, r2
 80082ce:	4334      	orrs	r4, r6
 80082d0:	6004      	str	r4, [r0, #0]
 80082d2:	6043      	str	r3, [r0, #4]
 80082d4:	3004      	adds	r0, #4
 80082d6:	4288      	cmp	r0, r1
 80082d8:	d3f4      	bcc.n	80082c4 <L_shift+0xc>
 80082da:	bd70      	pop	{r4, r5, r6, pc}

080082dc <__match>:
 80082dc:	b530      	push	{r4, r5, lr}
 80082de:	6803      	ldr	r3, [r0, #0]
 80082e0:	780c      	ldrb	r4, [r1, #0]
 80082e2:	3301      	adds	r3, #1
 80082e4:	2c00      	cmp	r4, #0
 80082e6:	d102      	bne.n	80082ee <__match+0x12>
 80082e8:	6003      	str	r3, [r0, #0]
 80082ea:	2001      	movs	r0, #1
 80082ec:	bd30      	pop	{r4, r5, pc}
 80082ee:	781a      	ldrb	r2, [r3, #0]
 80082f0:	0015      	movs	r5, r2
 80082f2:	3d41      	subs	r5, #65	; 0x41
 80082f4:	2d19      	cmp	r5, #25
 80082f6:	d800      	bhi.n	80082fa <__match+0x1e>
 80082f8:	3220      	adds	r2, #32
 80082fa:	3101      	adds	r1, #1
 80082fc:	42a2      	cmp	r2, r4
 80082fe:	d0ef      	beq.n	80082e0 <__match+0x4>
 8008300:	2000      	movs	r0, #0
 8008302:	e7f3      	b.n	80082ec <__match+0x10>

08008304 <__hexnan>:
 8008304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008306:	b08b      	sub	sp, #44	; 0x2c
 8008308:	9201      	str	r2, [sp, #4]
 800830a:	680a      	ldr	r2, [r1, #0]
 800830c:	9901      	ldr	r1, [sp, #4]
 800830e:	1153      	asrs	r3, r2, #5
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	18cb      	adds	r3, r1, r3
 8008314:	9304      	str	r3, [sp, #16]
 8008316:	231f      	movs	r3, #31
 8008318:	401a      	ands	r2, r3
 800831a:	9008      	str	r0, [sp, #32]
 800831c:	9206      	str	r2, [sp, #24]
 800831e:	d002      	beq.n	8008326 <__hexnan+0x22>
 8008320:	9b04      	ldr	r3, [sp, #16]
 8008322:	3304      	adds	r3, #4
 8008324:	9304      	str	r3, [sp, #16]
 8008326:	9b04      	ldr	r3, [sp, #16]
 8008328:	2500      	movs	r5, #0
 800832a:	1f1e      	subs	r6, r3, #4
 800832c:	0037      	movs	r7, r6
 800832e:	0034      	movs	r4, r6
 8008330:	9b08      	ldr	r3, [sp, #32]
 8008332:	6035      	str	r5, [r6, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	9507      	str	r5, [sp, #28]
 8008338:	9305      	str	r3, [sp, #20]
 800833a:	9502      	str	r5, [sp, #8]
 800833c:	9b05      	ldr	r3, [sp, #20]
 800833e:	3301      	adds	r3, #1
 8008340:	9309      	str	r3, [sp, #36]	; 0x24
 8008342:	9b05      	ldr	r3, [sp, #20]
 8008344:	785b      	ldrb	r3, [r3, #1]
 8008346:	9303      	str	r3, [sp, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d028      	beq.n	800839e <__hexnan+0x9a>
 800834c:	9803      	ldr	r0, [sp, #12]
 800834e:	f7ff fd73 	bl	8007e38 <__hexdig_fun>
 8008352:	2800      	cmp	r0, #0
 8008354:	d145      	bne.n	80083e2 <__hexnan+0xde>
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	2b20      	cmp	r3, #32
 800835a:	d819      	bhi.n	8008390 <__hexnan+0x8c>
 800835c:	9b02      	ldr	r3, [sp, #8]
 800835e:	9a07      	ldr	r2, [sp, #28]
 8008360:	4293      	cmp	r3, r2
 8008362:	dd12      	ble.n	800838a <__hexnan+0x86>
 8008364:	42bc      	cmp	r4, r7
 8008366:	d206      	bcs.n	8008376 <__hexnan+0x72>
 8008368:	2d07      	cmp	r5, #7
 800836a:	dc04      	bgt.n	8008376 <__hexnan+0x72>
 800836c:	002a      	movs	r2, r5
 800836e:	0039      	movs	r1, r7
 8008370:	0020      	movs	r0, r4
 8008372:	f7ff ffa1 	bl	80082b8 <L_shift>
 8008376:	9b01      	ldr	r3, [sp, #4]
 8008378:	2508      	movs	r5, #8
 800837a:	429c      	cmp	r4, r3
 800837c:	d905      	bls.n	800838a <__hexnan+0x86>
 800837e:	1f27      	subs	r7, r4, #4
 8008380:	2500      	movs	r5, #0
 8008382:	003c      	movs	r4, r7
 8008384:	9b02      	ldr	r3, [sp, #8]
 8008386:	603d      	str	r5, [r7, #0]
 8008388:	9307      	str	r3, [sp, #28]
 800838a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800838c:	9305      	str	r3, [sp, #20]
 800838e:	e7d5      	b.n	800833c <__hexnan+0x38>
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	2b29      	cmp	r3, #41	; 0x29
 8008394:	d14a      	bne.n	800842c <__hexnan+0x128>
 8008396:	9b05      	ldr	r3, [sp, #20]
 8008398:	9a08      	ldr	r2, [sp, #32]
 800839a:	3302      	adds	r3, #2
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	9b02      	ldr	r3, [sp, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d043      	beq.n	800842c <__hexnan+0x128>
 80083a4:	42bc      	cmp	r4, r7
 80083a6:	d206      	bcs.n	80083b6 <__hexnan+0xb2>
 80083a8:	2d07      	cmp	r5, #7
 80083aa:	dc04      	bgt.n	80083b6 <__hexnan+0xb2>
 80083ac:	002a      	movs	r2, r5
 80083ae:	0039      	movs	r1, r7
 80083b0:	0020      	movs	r0, r4
 80083b2:	f7ff ff81 	bl	80082b8 <L_shift>
 80083b6:	9b01      	ldr	r3, [sp, #4]
 80083b8:	429c      	cmp	r4, r3
 80083ba:	d926      	bls.n	800840a <__hexnan+0x106>
 80083bc:	cc04      	ldmia	r4!, {r2}
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	3304      	adds	r3, #4
 80083c2:	42a6      	cmp	r6, r4
 80083c4:	d2fa      	bcs.n	80083bc <__hexnan+0xb8>
 80083c6:	2200      	movs	r2, #0
 80083c8:	c304      	stmia	r3!, {r2}
 80083ca:	429e      	cmp	r6, r3
 80083cc:	d2fc      	bcs.n	80083c8 <__hexnan+0xc4>
 80083ce:	6833      	ldr	r3, [r6, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d104      	bne.n	80083de <__hexnan+0xda>
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	429e      	cmp	r6, r3
 80083d8:	d126      	bne.n	8008428 <__hexnan+0x124>
 80083da:	2301      	movs	r3, #1
 80083dc:	6033      	str	r3, [r6, #0]
 80083de:	2005      	movs	r0, #5
 80083e0:	e025      	b.n	800842e <__hexnan+0x12a>
 80083e2:	9b02      	ldr	r3, [sp, #8]
 80083e4:	3501      	adds	r5, #1
 80083e6:	3301      	adds	r3, #1
 80083e8:	9302      	str	r3, [sp, #8]
 80083ea:	2d08      	cmp	r5, #8
 80083ec:	dd06      	ble.n	80083fc <__hexnan+0xf8>
 80083ee:	9b01      	ldr	r3, [sp, #4]
 80083f0:	429c      	cmp	r4, r3
 80083f2:	d9ca      	bls.n	800838a <__hexnan+0x86>
 80083f4:	2300      	movs	r3, #0
 80083f6:	2501      	movs	r5, #1
 80083f8:	3c04      	subs	r4, #4
 80083fa:	6023      	str	r3, [r4, #0]
 80083fc:	220f      	movs	r2, #15
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	4010      	ands	r0, r2
 8008402:	011b      	lsls	r3, r3, #4
 8008404:	4318      	orrs	r0, r3
 8008406:	6020      	str	r0, [r4, #0]
 8008408:	e7bf      	b.n	800838a <__hexnan+0x86>
 800840a:	9b06      	ldr	r3, [sp, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0de      	beq.n	80083ce <__hexnan+0xca>
 8008410:	2120      	movs	r1, #32
 8008412:	9a06      	ldr	r2, [sp, #24]
 8008414:	9b04      	ldr	r3, [sp, #16]
 8008416:	1a89      	subs	r1, r1, r2
 8008418:	2201      	movs	r2, #1
 800841a:	4252      	negs	r2, r2
 800841c:	40ca      	lsrs	r2, r1
 800841e:	3b04      	subs	r3, #4
 8008420:	6819      	ldr	r1, [r3, #0]
 8008422:	400a      	ands	r2, r1
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	e7d2      	b.n	80083ce <__hexnan+0xca>
 8008428:	3e04      	subs	r6, #4
 800842a:	e7d0      	b.n	80083ce <__hexnan+0xca>
 800842c:	2004      	movs	r0, #4
 800842e:	b00b      	add	sp, #44	; 0x2c
 8008430:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008432 <__locale_ctype_ptr_l>:
 8008432:	30ec      	adds	r0, #236	; 0xec
 8008434:	6800      	ldr	r0, [r0, #0]
 8008436:	4770      	bx	lr

08008438 <__localeconv_l>:
 8008438:	30f0      	adds	r0, #240	; 0xf0
 800843a:	4770      	bx	lr

0800843c <_localeconv_r>:
 800843c:	4b03      	ldr	r3, [pc, #12]	; (800844c <_localeconv_r+0x10>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6a18      	ldr	r0, [r3, #32]
 8008442:	2800      	cmp	r0, #0
 8008444:	d100      	bne.n	8008448 <_localeconv_r+0xc>
 8008446:	4802      	ldr	r0, [pc, #8]	; (8008450 <_localeconv_r+0x14>)
 8008448:	30f0      	adds	r0, #240	; 0xf0
 800844a:	4770      	bx	lr
 800844c:	2000000c 	.word	0x2000000c
 8008450:	20000070 	.word	0x20000070

08008454 <malloc>:
 8008454:	b510      	push	{r4, lr}
 8008456:	4b03      	ldr	r3, [pc, #12]	; (8008464 <malloc+0x10>)
 8008458:	0001      	movs	r1, r0
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	f000 fc78 	bl	8008d50 <_malloc_r>
 8008460:	bd10      	pop	{r4, pc}
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	2000000c 	.word	0x2000000c

08008468 <__ascii_mbtowc>:
 8008468:	b082      	sub	sp, #8
 800846a:	2900      	cmp	r1, #0
 800846c:	d100      	bne.n	8008470 <__ascii_mbtowc+0x8>
 800846e:	a901      	add	r1, sp, #4
 8008470:	1e10      	subs	r0, r2, #0
 8008472:	d006      	beq.n	8008482 <__ascii_mbtowc+0x1a>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d006      	beq.n	8008486 <__ascii_mbtowc+0x1e>
 8008478:	7813      	ldrb	r3, [r2, #0]
 800847a:	600b      	str	r3, [r1, #0]
 800847c:	7810      	ldrb	r0, [r2, #0]
 800847e:	1e43      	subs	r3, r0, #1
 8008480:	4198      	sbcs	r0, r3
 8008482:	b002      	add	sp, #8
 8008484:	4770      	bx	lr
 8008486:	2002      	movs	r0, #2
 8008488:	4240      	negs	r0, r0
 800848a:	e7fa      	b.n	8008482 <__ascii_mbtowc+0x1a>

0800848c <memchr>:
 800848c:	b2c9      	uxtb	r1, r1
 800848e:	1882      	adds	r2, r0, r2
 8008490:	4290      	cmp	r0, r2
 8008492:	d101      	bne.n	8008498 <memchr+0xc>
 8008494:	2000      	movs	r0, #0
 8008496:	4770      	bx	lr
 8008498:	7803      	ldrb	r3, [r0, #0]
 800849a:	428b      	cmp	r3, r1
 800849c:	d0fb      	beq.n	8008496 <memchr+0xa>
 800849e:	3001      	adds	r0, #1
 80084a0:	e7f6      	b.n	8008490 <memchr+0x4>

080084a2 <memcpy>:
 80084a2:	2300      	movs	r3, #0
 80084a4:	b510      	push	{r4, lr}
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d100      	bne.n	80084ac <memcpy+0xa>
 80084aa:	bd10      	pop	{r4, pc}
 80084ac:	5ccc      	ldrb	r4, [r1, r3]
 80084ae:	54c4      	strb	r4, [r0, r3]
 80084b0:	3301      	adds	r3, #1
 80084b2:	e7f8      	b.n	80084a6 <memcpy+0x4>

080084b4 <_Balloc>:
 80084b4:	b570      	push	{r4, r5, r6, lr}
 80084b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084b8:	0004      	movs	r4, r0
 80084ba:	000d      	movs	r5, r1
 80084bc:	2e00      	cmp	r6, #0
 80084be:	d107      	bne.n	80084d0 <_Balloc+0x1c>
 80084c0:	2010      	movs	r0, #16
 80084c2:	f7ff ffc7 	bl	8008454 <malloc>
 80084c6:	6260      	str	r0, [r4, #36]	; 0x24
 80084c8:	6046      	str	r6, [r0, #4]
 80084ca:	6086      	str	r6, [r0, #8]
 80084cc:	6006      	str	r6, [r0, #0]
 80084ce:	60c6      	str	r6, [r0, #12]
 80084d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084d2:	68f3      	ldr	r3, [r6, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d013      	beq.n	8008500 <_Balloc+0x4c>
 80084d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084da:	00aa      	lsls	r2, r5, #2
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	189b      	adds	r3, r3, r2
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d118      	bne.n	8008518 <_Balloc+0x64>
 80084e6:	2101      	movs	r1, #1
 80084e8:	000e      	movs	r6, r1
 80084ea:	40ae      	lsls	r6, r5
 80084ec:	1d72      	adds	r2, r6, #5
 80084ee:	0092      	lsls	r2, r2, #2
 80084f0:	0020      	movs	r0, r4
 80084f2:	f000 fbd4 	bl	8008c9e <_calloc_r>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d00c      	beq.n	8008514 <_Balloc+0x60>
 80084fa:	6045      	str	r5, [r0, #4]
 80084fc:	6086      	str	r6, [r0, #8]
 80084fe:	e00d      	b.n	800851c <_Balloc+0x68>
 8008500:	2221      	movs	r2, #33	; 0x21
 8008502:	2104      	movs	r1, #4
 8008504:	0020      	movs	r0, r4
 8008506:	f000 fbca 	bl	8008c9e <_calloc_r>
 800850a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800850c:	60f0      	str	r0, [r6, #12]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e1      	bne.n	80084d8 <_Balloc+0x24>
 8008514:	2000      	movs	r0, #0
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	6802      	ldr	r2, [r0, #0]
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	2300      	movs	r3, #0
 800851e:	6103      	str	r3, [r0, #16]
 8008520:	60c3      	str	r3, [r0, #12]
 8008522:	e7f8      	b.n	8008516 <_Balloc+0x62>

08008524 <_Bfree>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008528:	0006      	movs	r6, r0
 800852a:	000d      	movs	r5, r1
 800852c:	2c00      	cmp	r4, #0
 800852e:	d107      	bne.n	8008540 <_Bfree+0x1c>
 8008530:	2010      	movs	r0, #16
 8008532:	f7ff ff8f 	bl	8008454 <malloc>
 8008536:	6270      	str	r0, [r6, #36]	; 0x24
 8008538:	6044      	str	r4, [r0, #4]
 800853a:	6084      	str	r4, [r0, #8]
 800853c:	6004      	str	r4, [r0, #0]
 800853e:	60c4      	str	r4, [r0, #12]
 8008540:	2d00      	cmp	r5, #0
 8008542:	d007      	beq.n	8008554 <_Bfree+0x30>
 8008544:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008546:	686a      	ldr	r2, [r5, #4]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	0092      	lsls	r2, r2, #2
 800854c:	189b      	adds	r3, r3, r2
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	602a      	str	r2, [r5, #0]
 8008552:	601d      	str	r5, [r3, #0]
 8008554:	bd70      	pop	{r4, r5, r6, pc}

08008556 <__multadd>:
 8008556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008558:	001e      	movs	r6, r3
 800855a:	2314      	movs	r3, #20
 800855c:	469c      	mov	ip, r3
 800855e:	0007      	movs	r7, r0
 8008560:	000c      	movs	r4, r1
 8008562:	2000      	movs	r0, #0
 8008564:	690d      	ldr	r5, [r1, #16]
 8008566:	448c      	add	ip, r1
 8008568:	4663      	mov	r3, ip
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3001      	adds	r0, #1
 800856e:	b299      	uxth	r1, r3
 8008570:	4663      	mov	r3, ip
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4351      	muls	r1, r2
 8008576:	0c1b      	lsrs	r3, r3, #16
 8008578:	4353      	muls	r3, r2
 800857a:	1989      	adds	r1, r1, r6
 800857c:	0c0e      	lsrs	r6, r1, #16
 800857e:	199b      	adds	r3, r3, r6
 8008580:	b289      	uxth	r1, r1
 8008582:	0c1e      	lsrs	r6, r3, #16
 8008584:	041b      	lsls	r3, r3, #16
 8008586:	185b      	adds	r3, r3, r1
 8008588:	4661      	mov	r1, ip
 800858a:	c108      	stmia	r1!, {r3}
 800858c:	468c      	mov	ip, r1
 800858e:	4285      	cmp	r5, r0
 8008590:	dcea      	bgt.n	8008568 <__multadd+0x12>
 8008592:	2e00      	cmp	r6, #0
 8008594:	d01b      	beq.n	80085ce <__multadd+0x78>
 8008596:	68a3      	ldr	r3, [r4, #8]
 8008598:	42ab      	cmp	r3, r5
 800859a:	dc12      	bgt.n	80085c2 <__multadd+0x6c>
 800859c:	6863      	ldr	r3, [r4, #4]
 800859e:	0038      	movs	r0, r7
 80085a0:	1c59      	adds	r1, r3, #1
 80085a2:	f7ff ff87 	bl	80084b4 <_Balloc>
 80085a6:	0021      	movs	r1, r4
 80085a8:	6923      	ldr	r3, [r4, #16]
 80085aa:	9001      	str	r0, [sp, #4]
 80085ac:	1c9a      	adds	r2, r3, #2
 80085ae:	0092      	lsls	r2, r2, #2
 80085b0:	310c      	adds	r1, #12
 80085b2:	300c      	adds	r0, #12
 80085b4:	f7ff ff75 	bl	80084a2 <memcpy>
 80085b8:	0021      	movs	r1, r4
 80085ba:	0038      	movs	r0, r7
 80085bc:	f7ff ffb2 	bl	8008524 <_Bfree>
 80085c0:	9c01      	ldr	r4, [sp, #4]
 80085c2:	1d2b      	adds	r3, r5, #4
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	18e3      	adds	r3, r4, r3
 80085c8:	3501      	adds	r5, #1
 80085ca:	605e      	str	r6, [r3, #4]
 80085cc:	6125      	str	r5, [r4, #16]
 80085ce:	0020      	movs	r0, r4
 80085d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080085d2 <__s2b>:
 80085d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085d4:	0006      	movs	r6, r0
 80085d6:	0018      	movs	r0, r3
 80085d8:	000c      	movs	r4, r1
 80085da:	3008      	adds	r0, #8
 80085dc:	2109      	movs	r1, #9
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	0015      	movs	r5, r2
 80085e2:	f7f7 fe2d 	bl	8000240 <__divsi3>
 80085e6:	2301      	movs	r3, #1
 80085e8:	2100      	movs	r1, #0
 80085ea:	4283      	cmp	r3, r0
 80085ec:	db1f      	blt.n	800862e <__s2b+0x5c>
 80085ee:	0030      	movs	r0, r6
 80085f0:	f7ff ff60 	bl	80084b4 <_Balloc>
 80085f4:	9b08      	ldr	r3, [sp, #32]
 80085f6:	6143      	str	r3, [r0, #20]
 80085f8:	2301      	movs	r3, #1
 80085fa:	6103      	str	r3, [r0, #16]
 80085fc:	2d09      	cmp	r5, #9
 80085fe:	dd19      	ble.n	8008634 <__s2b+0x62>
 8008600:	0023      	movs	r3, r4
 8008602:	3309      	adds	r3, #9
 8008604:	001f      	movs	r7, r3
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	1964      	adds	r4, r4, r5
 800860a:	783b      	ldrb	r3, [r7, #0]
 800860c:	0001      	movs	r1, r0
 800860e:	3b30      	subs	r3, #48	; 0x30
 8008610:	220a      	movs	r2, #10
 8008612:	0030      	movs	r0, r6
 8008614:	3701      	adds	r7, #1
 8008616:	f7ff ff9e 	bl	8008556 <__multadd>
 800861a:	42a7      	cmp	r7, r4
 800861c:	d1f5      	bne.n	800860a <__s2b+0x38>
 800861e:	9b00      	ldr	r3, [sp, #0]
 8008620:	195c      	adds	r4, r3, r5
 8008622:	3c08      	subs	r4, #8
 8008624:	002f      	movs	r7, r5
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	429f      	cmp	r7, r3
 800862a:	db06      	blt.n	800863a <__s2b+0x68>
 800862c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	3101      	adds	r1, #1
 8008632:	e7da      	b.n	80085ea <__s2b+0x18>
 8008634:	340a      	adds	r4, #10
 8008636:	2509      	movs	r5, #9
 8008638:	e7f4      	b.n	8008624 <__s2b+0x52>
 800863a:	1b63      	subs	r3, r4, r5
 800863c:	5ddb      	ldrb	r3, [r3, r7]
 800863e:	0001      	movs	r1, r0
 8008640:	3b30      	subs	r3, #48	; 0x30
 8008642:	220a      	movs	r2, #10
 8008644:	0030      	movs	r0, r6
 8008646:	f7ff ff86 	bl	8008556 <__multadd>
 800864a:	3701      	adds	r7, #1
 800864c:	e7eb      	b.n	8008626 <__s2b+0x54>

0800864e <__hi0bits>:
 800864e:	0003      	movs	r3, r0
 8008650:	0c02      	lsrs	r2, r0, #16
 8008652:	2000      	movs	r0, #0
 8008654:	4282      	cmp	r2, r0
 8008656:	d101      	bne.n	800865c <__hi0bits+0xe>
 8008658:	041b      	lsls	r3, r3, #16
 800865a:	3010      	adds	r0, #16
 800865c:	0e1a      	lsrs	r2, r3, #24
 800865e:	d101      	bne.n	8008664 <__hi0bits+0x16>
 8008660:	3008      	adds	r0, #8
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	0f1a      	lsrs	r2, r3, #28
 8008666:	d101      	bne.n	800866c <__hi0bits+0x1e>
 8008668:	3004      	adds	r0, #4
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	0f9a      	lsrs	r2, r3, #30
 800866e:	d101      	bne.n	8008674 <__hi0bits+0x26>
 8008670:	3002      	adds	r0, #2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	2b00      	cmp	r3, #0
 8008676:	db03      	blt.n	8008680 <__hi0bits+0x32>
 8008678:	3001      	adds	r0, #1
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	d400      	bmi.n	8008680 <__hi0bits+0x32>
 800867e:	2020      	movs	r0, #32
 8008680:	4770      	bx	lr

08008682 <__lo0bits>:
 8008682:	2207      	movs	r2, #7
 8008684:	6803      	ldr	r3, [r0, #0]
 8008686:	b510      	push	{r4, lr}
 8008688:	0001      	movs	r1, r0
 800868a:	401a      	ands	r2, r3
 800868c:	d00d      	beq.n	80086aa <__lo0bits+0x28>
 800868e:	2401      	movs	r4, #1
 8008690:	2000      	movs	r0, #0
 8008692:	4223      	tst	r3, r4
 8008694:	d105      	bne.n	80086a2 <__lo0bits+0x20>
 8008696:	3002      	adds	r0, #2
 8008698:	4203      	tst	r3, r0
 800869a:	d003      	beq.n	80086a4 <__lo0bits+0x22>
 800869c:	40e3      	lsrs	r3, r4
 800869e:	0020      	movs	r0, r4
 80086a0:	600b      	str	r3, [r1, #0]
 80086a2:	bd10      	pop	{r4, pc}
 80086a4:	089b      	lsrs	r3, r3, #2
 80086a6:	600b      	str	r3, [r1, #0]
 80086a8:	e7fb      	b.n	80086a2 <__lo0bits+0x20>
 80086aa:	b29c      	uxth	r4, r3
 80086ac:	0010      	movs	r0, r2
 80086ae:	2c00      	cmp	r4, #0
 80086b0:	d101      	bne.n	80086b6 <__lo0bits+0x34>
 80086b2:	2010      	movs	r0, #16
 80086b4:	0c1b      	lsrs	r3, r3, #16
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	2a00      	cmp	r2, #0
 80086ba:	d101      	bne.n	80086c0 <__lo0bits+0x3e>
 80086bc:	3008      	adds	r0, #8
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	071a      	lsls	r2, r3, #28
 80086c2:	d101      	bne.n	80086c8 <__lo0bits+0x46>
 80086c4:	3004      	adds	r0, #4
 80086c6:	091b      	lsrs	r3, r3, #4
 80086c8:	079a      	lsls	r2, r3, #30
 80086ca:	d101      	bne.n	80086d0 <__lo0bits+0x4e>
 80086cc:	3002      	adds	r0, #2
 80086ce:	089b      	lsrs	r3, r3, #2
 80086d0:	07da      	lsls	r2, r3, #31
 80086d2:	d4e8      	bmi.n	80086a6 <__lo0bits+0x24>
 80086d4:	085b      	lsrs	r3, r3, #1
 80086d6:	d001      	beq.n	80086dc <__lo0bits+0x5a>
 80086d8:	3001      	adds	r0, #1
 80086da:	e7e4      	b.n	80086a6 <__lo0bits+0x24>
 80086dc:	2020      	movs	r0, #32
 80086de:	e7e0      	b.n	80086a2 <__lo0bits+0x20>

080086e0 <__i2b>:
 80086e0:	b510      	push	{r4, lr}
 80086e2:	000c      	movs	r4, r1
 80086e4:	2101      	movs	r1, #1
 80086e6:	f7ff fee5 	bl	80084b4 <_Balloc>
 80086ea:	2301      	movs	r3, #1
 80086ec:	6144      	str	r4, [r0, #20]
 80086ee:	6103      	str	r3, [r0, #16]
 80086f0:	bd10      	pop	{r4, pc}

080086f2 <__multiply>:
 80086f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086f4:	690b      	ldr	r3, [r1, #16]
 80086f6:	0014      	movs	r4, r2
 80086f8:	6912      	ldr	r2, [r2, #16]
 80086fa:	b089      	sub	sp, #36	; 0x24
 80086fc:	000d      	movs	r5, r1
 80086fe:	4293      	cmp	r3, r2
 8008700:	da01      	bge.n	8008706 <__multiply+0x14>
 8008702:	0025      	movs	r5, r4
 8008704:	000c      	movs	r4, r1
 8008706:	692f      	ldr	r7, [r5, #16]
 8008708:	6926      	ldr	r6, [r4, #16]
 800870a:	6869      	ldr	r1, [r5, #4]
 800870c:	19bb      	adds	r3, r7, r6
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	68ab      	ldr	r3, [r5, #8]
 8008712:	19ba      	adds	r2, r7, r6
 8008714:	4293      	cmp	r3, r2
 8008716:	da00      	bge.n	800871a <__multiply+0x28>
 8008718:	3101      	adds	r1, #1
 800871a:	f7ff fecb 	bl	80084b4 <_Balloc>
 800871e:	0002      	movs	r2, r0
 8008720:	19bb      	adds	r3, r7, r6
 8008722:	3214      	adds	r2, #20
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	18d3      	adds	r3, r2, r3
 8008728:	469c      	mov	ip, r3
 800872a:	2100      	movs	r1, #0
 800872c:	0013      	movs	r3, r2
 800872e:	9004      	str	r0, [sp, #16]
 8008730:	4563      	cmp	r3, ip
 8008732:	d31d      	bcc.n	8008770 <__multiply+0x7e>
 8008734:	3514      	adds	r5, #20
 8008736:	00bf      	lsls	r7, r7, #2
 8008738:	19eb      	adds	r3, r5, r7
 800873a:	3414      	adds	r4, #20
 800873c:	00b6      	lsls	r6, r6, #2
 800873e:	9305      	str	r3, [sp, #20]
 8008740:	19a3      	adds	r3, r4, r6
 8008742:	9503      	str	r5, [sp, #12]
 8008744:	9401      	str	r4, [sp, #4]
 8008746:	9307      	str	r3, [sp, #28]
 8008748:	9b07      	ldr	r3, [sp, #28]
 800874a:	9901      	ldr	r1, [sp, #4]
 800874c:	4299      	cmp	r1, r3
 800874e:	d311      	bcc.n	8008774 <__multiply+0x82>
 8008750:	9b02      	ldr	r3, [sp, #8]
 8008752:	2b00      	cmp	r3, #0
 8008754:	dd06      	ble.n	8008764 <__multiply+0x72>
 8008756:	2304      	movs	r3, #4
 8008758:	425b      	negs	r3, r3
 800875a:	449c      	add	ip, r3
 800875c:	4663      	mov	r3, ip
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d051      	beq.n	8008808 <__multiply+0x116>
 8008764:	9b04      	ldr	r3, [sp, #16]
 8008766:	9a02      	ldr	r2, [sp, #8]
 8008768:	0018      	movs	r0, r3
 800876a:	611a      	str	r2, [r3, #16]
 800876c:	b009      	add	sp, #36	; 0x24
 800876e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008770:	c302      	stmia	r3!, {r1}
 8008772:	e7dd      	b.n	8008730 <__multiply+0x3e>
 8008774:	9b01      	ldr	r3, [sp, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	b298      	uxth	r0, r3
 800877a:	2800      	cmp	r0, #0
 800877c:	d01c      	beq.n	80087b8 <__multiply+0xc6>
 800877e:	0015      	movs	r5, r2
 8008780:	2600      	movs	r6, #0
 8008782:	9f03      	ldr	r7, [sp, #12]
 8008784:	cf02      	ldmia	r7!, {r1}
 8008786:	682c      	ldr	r4, [r5, #0]
 8008788:	b28b      	uxth	r3, r1
 800878a:	4343      	muls	r3, r0
 800878c:	0c09      	lsrs	r1, r1, #16
 800878e:	4341      	muls	r1, r0
 8008790:	b2a4      	uxth	r4, r4
 8008792:	191b      	adds	r3, r3, r4
 8008794:	199b      	adds	r3, r3, r6
 8008796:	000e      	movs	r6, r1
 8008798:	6829      	ldr	r1, [r5, #0]
 800879a:	9506      	str	r5, [sp, #24]
 800879c:	0c09      	lsrs	r1, r1, #16
 800879e:	1871      	adds	r1, r6, r1
 80087a0:	0c1e      	lsrs	r6, r3, #16
 80087a2:	1989      	adds	r1, r1, r6
 80087a4:	0c0e      	lsrs	r6, r1, #16
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	0409      	lsls	r1, r1, #16
 80087aa:	430b      	orrs	r3, r1
 80087ac:	c508      	stmia	r5!, {r3}
 80087ae:	9b05      	ldr	r3, [sp, #20]
 80087b0:	42bb      	cmp	r3, r7
 80087b2:	d8e7      	bhi.n	8008784 <__multiply+0x92>
 80087b4:	9b06      	ldr	r3, [sp, #24]
 80087b6:	605e      	str	r6, [r3, #4]
 80087b8:	9b01      	ldr	r3, [sp, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	0c1d      	lsrs	r5, r3, #16
 80087be:	d01e      	beq.n	80087fe <__multiply+0x10c>
 80087c0:	0010      	movs	r0, r2
 80087c2:	2700      	movs	r7, #0
 80087c4:	6813      	ldr	r3, [r2, #0]
 80087c6:	9e03      	ldr	r6, [sp, #12]
 80087c8:	6831      	ldr	r1, [r6, #0]
 80087ca:	6804      	ldr	r4, [r0, #0]
 80087cc:	b289      	uxth	r1, r1
 80087ce:	4369      	muls	r1, r5
 80087d0:	0c24      	lsrs	r4, r4, #16
 80087d2:	1909      	adds	r1, r1, r4
 80087d4:	19c9      	adds	r1, r1, r7
 80087d6:	040f      	lsls	r7, r1, #16
 80087d8:	b29b      	uxth	r3, r3
 80087da:	433b      	orrs	r3, r7
 80087dc:	6003      	str	r3, [r0, #0]
 80087de:	ce80      	ldmia	r6!, {r7}
 80087e0:	6843      	ldr	r3, [r0, #4]
 80087e2:	0c3f      	lsrs	r7, r7, #16
 80087e4:	436f      	muls	r7, r5
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	18fb      	adds	r3, r7, r3
 80087ea:	0c09      	lsrs	r1, r1, #16
 80087ec:	185b      	adds	r3, r3, r1
 80087ee:	9905      	ldr	r1, [sp, #20]
 80087f0:	9006      	str	r0, [sp, #24]
 80087f2:	0c1f      	lsrs	r7, r3, #16
 80087f4:	3004      	adds	r0, #4
 80087f6:	42b1      	cmp	r1, r6
 80087f8:	d8e6      	bhi.n	80087c8 <__multiply+0xd6>
 80087fa:	9906      	ldr	r1, [sp, #24]
 80087fc:	604b      	str	r3, [r1, #4]
 80087fe:	9b01      	ldr	r3, [sp, #4]
 8008800:	3204      	adds	r2, #4
 8008802:	3304      	adds	r3, #4
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	e79f      	b.n	8008748 <__multiply+0x56>
 8008808:	9b02      	ldr	r3, [sp, #8]
 800880a:	3b01      	subs	r3, #1
 800880c:	9302      	str	r3, [sp, #8]
 800880e:	e79f      	b.n	8008750 <__multiply+0x5e>

08008810 <__pow5mult>:
 8008810:	2303      	movs	r3, #3
 8008812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008814:	4013      	ands	r3, r2
 8008816:	0005      	movs	r5, r0
 8008818:	000e      	movs	r6, r1
 800881a:	0014      	movs	r4, r2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d008      	beq.n	8008832 <__pow5mult+0x22>
 8008820:	4922      	ldr	r1, [pc, #136]	; (80088ac <__pow5mult+0x9c>)
 8008822:	3b01      	subs	r3, #1
 8008824:	009a      	lsls	r2, r3, #2
 8008826:	5852      	ldr	r2, [r2, r1]
 8008828:	2300      	movs	r3, #0
 800882a:	0031      	movs	r1, r6
 800882c:	f7ff fe93 	bl	8008556 <__multadd>
 8008830:	0006      	movs	r6, r0
 8008832:	10a3      	asrs	r3, r4, #2
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	d036      	beq.n	80088a6 <__pow5mult+0x96>
 8008838:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800883a:	2c00      	cmp	r4, #0
 800883c:	d107      	bne.n	800884e <__pow5mult+0x3e>
 800883e:	2010      	movs	r0, #16
 8008840:	f7ff fe08 	bl	8008454 <malloc>
 8008844:	6268      	str	r0, [r5, #36]	; 0x24
 8008846:	6044      	str	r4, [r0, #4]
 8008848:	6084      	str	r4, [r0, #8]
 800884a:	6004      	str	r4, [r0, #0]
 800884c:	60c4      	str	r4, [r0, #12]
 800884e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008850:	68bc      	ldr	r4, [r7, #8]
 8008852:	2c00      	cmp	r4, #0
 8008854:	d107      	bne.n	8008866 <__pow5mult+0x56>
 8008856:	4916      	ldr	r1, [pc, #88]	; (80088b0 <__pow5mult+0xa0>)
 8008858:	0028      	movs	r0, r5
 800885a:	f7ff ff41 	bl	80086e0 <__i2b>
 800885e:	2300      	movs	r3, #0
 8008860:	0004      	movs	r4, r0
 8008862:	60b8      	str	r0, [r7, #8]
 8008864:	6003      	str	r3, [r0, #0]
 8008866:	2201      	movs	r2, #1
 8008868:	9b01      	ldr	r3, [sp, #4]
 800886a:	4213      	tst	r3, r2
 800886c:	d00a      	beq.n	8008884 <__pow5mult+0x74>
 800886e:	0031      	movs	r1, r6
 8008870:	0022      	movs	r2, r4
 8008872:	0028      	movs	r0, r5
 8008874:	f7ff ff3d 	bl	80086f2 <__multiply>
 8008878:	0007      	movs	r7, r0
 800887a:	0031      	movs	r1, r6
 800887c:	0028      	movs	r0, r5
 800887e:	f7ff fe51 	bl	8008524 <_Bfree>
 8008882:	003e      	movs	r6, r7
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	105b      	asrs	r3, r3, #1
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	d00c      	beq.n	80088a6 <__pow5mult+0x96>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	2800      	cmp	r0, #0
 8008890:	d107      	bne.n	80088a2 <__pow5mult+0x92>
 8008892:	0022      	movs	r2, r4
 8008894:	0021      	movs	r1, r4
 8008896:	0028      	movs	r0, r5
 8008898:	f7ff ff2b 	bl	80086f2 <__multiply>
 800889c:	2300      	movs	r3, #0
 800889e:	6020      	str	r0, [r4, #0]
 80088a0:	6003      	str	r3, [r0, #0]
 80088a2:	0004      	movs	r4, r0
 80088a4:	e7df      	b.n	8008866 <__pow5mult+0x56>
 80088a6:	0030      	movs	r0, r6
 80088a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	08009460 	.word	0x08009460
 80088b0:	00000271 	.word	0x00000271

080088b4 <__lshift>:
 80088b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088b6:	000d      	movs	r5, r1
 80088b8:	0017      	movs	r7, r2
 80088ba:	692b      	ldr	r3, [r5, #16]
 80088bc:	1154      	asrs	r4, r2, #5
 80088be:	b085      	sub	sp, #20
 80088c0:	18e3      	adds	r3, r4, r3
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	3301      	adds	r3, #1
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	6849      	ldr	r1, [r1, #4]
 80088ca:	68ab      	ldr	r3, [r5, #8]
 80088cc:	9002      	str	r0, [sp, #8]
 80088ce:	9a00      	ldr	r2, [sp, #0]
 80088d0:	4293      	cmp	r3, r2
 80088d2:	db35      	blt.n	8008940 <__lshift+0x8c>
 80088d4:	9802      	ldr	r0, [sp, #8]
 80088d6:	f7ff fded 	bl	80084b4 <_Balloc>
 80088da:	2300      	movs	r3, #0
 80088dc:	0002      	movs	r2, r0
 80088de:	0006      	movs	r6, r0
 80088e0:	0019      	movs	r1, r3
 80088e2:	3214      	adds	r2, #20
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	db2e      	blt.n	8008946 <__lshift+0x92>
 80088e8:	43e3      	mvns	r3, r4
 80088ea:	17db      	asrs	r3, r3, #31
 80088ec:	401c      	ands	r4, r3
 80088ee:	002b      	movs	r3, r5
 80088f0:	00a4      	lsls	r4, r4, #2
 80088f2:	1914      	adds	r4, r2, r4
 80088f4:	692a      	ldr	r2, [r5, #16]
 80088f6:	3314      	adds	r3, #20
 80088f8:	0092      	lsls	r2, r2, #2
 80088fa:	189a      	adds	r2, r3, r2
 80088fc:	4694      	mov	ip, r2
 80088fe:	221f      	movs	r2, #31
 8008900:	4017      	ands	r7, r2
 8008902:	d024      	beq.n	800894e <__lshift+0x9a>
 8008904:	3201      	adds	r2, #1
 8008906:	1bd2      	subs	r2, r2, r7
 8008908:	9203      	str	r2, [sp, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	6819      	ldr	r1, [r3, #0]
 800890e:	0020      	movs	r0, r4
 8008910:	40b9      	lsls	r1, r7
 8008912:	430a      	orrs	r2, r1
 8008914:	c404      	stmia	r4!, {r2}
 8008916:	cb04      	ldmia	r3!, {r2}
 8008918:	9903      	ldr	r1, [sp, #12]
 800891a:	40ca      	lsrs	r2, r1
 800891c:	459c      	cmp	ip, r3
 800891e:	d8f5      	bhi.n	800890c <__lshift+0x58>
 8008920:	6042      	str	r2, [r0, #4]
 8008922:	2a00      	cmp	r2, #0
 8008924:	d002      	beq.n	800892c <__lshift+0x78>
 8008926:	9b01      	ldr	r3, [sp, #4]
 8008928:	3302      	adds	r3, #2
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	9b00      	ldr	r3, [sp, #0]
 800892e:	9802      	ldr	r0, [sp, #8]
 8008930:	3b01      	subs	r3, #1
 8008932:	6133      	str	r3, [r6, #16]
 8008934:	0029      	movs	r1, r5
 8008936:	f7ff fdf5 	bl	8008524 <_Bfree>
 800893a:	0030      	movs	r0, r6
 800893c:	b005      	add	sp, #20
 800893e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008940:	3101      	adds	r1, #1
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	e7c3      	b.n	80088ce <__lshift+0x1a>
 8008946:	0098      	lsls	r0, r3, #2
 8008948:	5011      	str	r1, [r2, r0]
 800894a:	3301      	adds	r3, #1
 800894c:	e7ca      	b.n	80088e4 <__lshift+0x30>
 800894e:	cb04      	ldmia	r3!, {r2}
 8008950:	c404      	stmia	r4!, {r2}
 8008952:	459c      	cmp	ip, r3
 8008954:	d8fb      	bhi.n	800894e <__lshift+0x9a>
 8008956:	e7e9      	b.n	800892c <__lshift+0x78>

08008958 <__mcmp>:
 8008958:	690a      	ldr	r2, [r1, #16]
 800895a:	6903      	ldr	r3, [r0, #16]
 800895c:	b530      	push	{r4, r5, lr}
 800895e:	1a9b      	subs	r3, r3, r2
 8008960:	d10d      	bne.n	800897e <__mcmp+0x26>
 8008962:	0092      	lsls	r2, r2, #2
 8008964:	3014      	adds	r0, #20
 8008966:	3114      	adds	r1, #20
 8008968:	1884      	adds	r4, r0, r2
 800896a:	1889      	adds	r1, r1, r2
 800896c:	3c04      	subs	r4, #4
 800896e:	3904      	subs	r1, #4
 8008970:	6825      	ldr	r5, [r4, #0]
 8008972:	680a      	ldr	r2, [r1, #0]
 8008974:	4295      	cmp	r5, r2
 8008976:	d004      	beq.n	8008982 <__mcmp+0x2a>
 8008978:	2301      	movs	r3, #1
 800897a:	4295      	cmp	r5, r2
 800897c:	d304      	bcc.n	8008988 <__mcmp+0x30>
 800897e:	0018      	movs	r0, r3
 8008980:	bd30      	pop	{r4, r5, pc}
 8008982:	42a0      	cmp	r0, r4
 8008984:	d3f2      	bcc.n	800896c <__mcmp+0x14>
 8008986:	e7fa      	b.n	800897e <__mcmp+0x26>
 8008988:	425b      	negs	r3, r3
 800898a:	e7f8      	b.n	800897e <__mcmp+0x26>

0800898c <__mdiff>:
 800898c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800898e:	000d      	movs	r5, r1
 8008990:	b085      	sub	sp, #20
 8008992:	0007      	movs	r7, r0
 8008994:	0011      	movs	r1, r2
 8008996:	0028      	movs	r0, r5
 8008998:	0014      	movs	r4, r2
 800899a:	f7ff ffdd 	bl	8008958 <__mcmp>
 800899e:	1e06      	subs	r6, r0, #0
 80089a0:	d108      	bne.n	80089b4 <__mdiff+0x28>
 80089a2:	0001      	movs	r1, r0
 80089a4:	0038      	movs	r0, r7
 80089a6:	f7ff fd85 	bl	80084b4 <_Balloc>
 80089aa:	2301      	movs	r3, #1
 80089ac:	6146      	str	r6, [r0, #20]
 80089ae:	6103      	str	r3, [r0, #16]
 80089b0:	b005      	add	sp, #20
 80089b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089b4:	2301      	movs	r3, #1
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	2800      	cmp	r0, #0
 80089ba:	db04      	blt.n	80089c6 <__mdiff+0x3a>
 80089bc:	0023      	movs	r3, r4
 80089be:	002c      	movs	r4, r5
 80089c0:	001d      	movs	r5, r3
 80089c2:	2300      	movs	r3, #0
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	6861      	ldr	r1, [r4, #4]
 80089c8:	0038      	movs	r0, r7
 80089ca:	f7ff fd73 	bl	80084b4 <_Balloc>
 80089ce:	002f      	movs	r7, r5
 80089d0:	2200      	movs	r2, #0
 80089d2:	9b01      	ldr	r3, [sp, #4]
 80089d4:	6926      	ldr	r6, [r4, #16]
 80089d6:	60c3      	str	r3, [r0, #12]
 80089d8:	3414      	adds	r4, #20
 80089da:	00b3      	lsls	r3, r6, #2
 80089dc:	18e3      	adds	r3, r4, r3
 80089de:	9302      	str	r3, [sp, #8]
 80089e0:	692b      	ldr	r3, [r5, #16]
 80089e2:	3714      	adds	r7, #20
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	18fb      	adds	r3, r7, r3
 80089e8:	9303      	str	r3, [sp, #12]
 80089ea:	0003      	movs	r3, r0
 80089ec:	4694      	mov	ip, r2
 80089ee:	3314      	adds	r3, #20
 80089f0:	cc20      	ldmia	r4!, {r5}
 80089f2:	cf04      	ldmia	r7!, {r2}
 80089f4:	9201      	str	r2, [sp, #4]
 80089f6:	b2aa      	uxth	r2, r5
 80089f8:	4494      	add	ip, r2
 80089fa:	466a      	mov	r2, sp
 80089fc:	4661      	mov	r1, ip
 80089fe:	8892      	ldrh	r2, [r2, #4]
 8008a00:	0c2d      	lsrs	r5, r5, #16
 8008a02:	1a8a      	subs	r2, r1, r2
 8008a04:	9901      	ldr	r1, [sp, #4]
 8008a06:	0c09      	lsrs	r1, r1, #16
 8008a08:	1a69      	subs	r1, r5, r1
 8008a0a:	1415      	asrs	r5, r2, #16
 8008a0c:	1949      	adds	r1, r1, r5
 8008a0e:	140d      	asrs	r5, r1, #16
 8008a10:	b292      	uxth	r2, r2
 8008a12:	0409      	lsls	r1, r1, #16
 8008a14:	430a      	orrs	r2, r1
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	9a03      	ldr	r2, [sp, #12]
 8008a1a:	46ac      	mov	ip, r5
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	42ba      	cmp	r2, r7
 8008a20:	d8e6      	bhi.n	80089f0 <__mdiff+0x64>
 8008a22:	9902      	ldr	r1, [sp, #8]
 8008a24:	001a      	movs	r2, r3
 8008a26:	428c      	cmp	r4, r1
 8008a28:	d305      	bcc.n	8008a36 <__mdiff+0xaa>
 8008a2a:	3a04      	subs	r2, #4
 8008a2c:	6813      	ldr	r3, [r2, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00e      	beq.n	8008a50 <__mdiff+0xc4>
 8008a32:	6106      	str	r6, [r0, #16]
 8008a34:	e7bc      	b.n	80089b0 <__mdiff+0x24>
 8008a36:	cc04      	ldmia	r4!, {r2}
 8008a38:	b291      	uxth	r1, r2
 8008a3a:	4461      	add	r1, ip
 8008a3c:	140d      	asrs	r5, r1, #16
 8008a3e:	0c12      	lsrs	r2, r2, #16
 8008a40:	1952      	adds	r2, r2, r5
 8008a42:	1415      	asrs	r5, r2, #16
 8008a44:	b289      	uxth	r1, r1
 8008a46:	0412      	lsls	r2, r2, #16
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	46ac      	mov	ip, r5
 8008a4c:	c304      	stmia	r3!, {r2}
 8008a4e:	e7e8      	b.n	8008a22 <__mdiff+0x96>
 8008a50:	3e01      	subs	r6, #1
 8008a52:	e7ea      	b.n	8008a2a <__mdiff+0x9e>

08008a54 <__ulp>:
 8008a54:	000b      	movs	r3, r1
 8008a56:	4910      	ldr	r1, [pc, #64]	; (8008a98 <__ulp+0x44>)
 8008a58:	b510      	push	{r4, lr}
 8008a5a:	4019      	ands	r1, r3
 8008a5c:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <__ulp+0x48>)
 8008a5e:	18c9      	adds	r1, r1, r3
 8008a60:	2900      	cmp	r1, #0
 8008a62:	dd04      	ble.n	8008a6e <__ulp+0x1a>
 8008a64:	2200      	movs	r2, #0
 8008a66:	000b      	movs	r3, r1
 8008a68:	0010      	movs	r0, r2
 8008a6a:	0019      	movs	r1, r3
 8008a6c:	bd10      	pop	{r4, pc}
 8008a6e:	4249      	negs	r1, r1
 8008a70:	1509      	asrs	r1, r1, #20
 8008a72:	2200      	movs	r2, #0
 8008a74:	2300      	movs	r3, #0
 8008a76:	2913      	cmp	r1, #19
 8008a78:	dc04      	bgt.n	8008a84 <__ulp+0x30>
 8008a7a:	2080      	movs	r0, #128	; 0x80
 8008a7c:	0300      	lsls	r0, r0, #12
 8008a7e:	4108      	asrs	r0, r1
 8008a80:	0003      	movs	r3, r0
 8008a82:	e7f1      	b.n	8008a68 <__ulp+0x14>
 8008a84:	3914      	subs	r1, #20
 8008a86:	2001      	movs	r0, #1
 8008a88:	291e      	cmp	r1, #30
 8008a8a:	dc02      	bgt.n	8008a92 <__ulp+0x3e>
 8008a8c:	241f      	movs	r4, #31
 8008a8e:	1a61      	subs	r1, r4, r1
 8008a90:	4088      	lsls	r0, r1
 8008a92:	0002      	movs	r2, r0
 8008a94:	e7e8      	b.n	8008a68 <__ulp+0x14>
 8008a96:	46c0      	nop			; (mov r8, r8)
 8008a98:	7ff00000 	.word	0x7ff00000
 8008a9c:	fcc00000 	.word	0xfcc00000

08008aa0 <__b2d>:
 8008aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aa2:	0006      	movs	r6, r0
 8008aa4:	6903      	ldr	r3, [r0, #16]
 8008aa6:	3614      	adds	r6, #20
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	18f3      	adds	r3, r6, r3
 8008aac:	1f1d      	subs	r5, r3, #4
 8008aae:	682c      	ldr	r4, [r5, #0]
 8008ab0:	000f      	movs	r7, r1
 8008ab2:	0020      	movs	r0, r4
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	f7ff fdca 	bl	800864e <__hi0bits>
 8008aba:	2320      	movs	r3, #32
 8008abc:	1a1b      	subs	r3, r3, r0
 8008abe:	603b      	str	r3, [r7, #0]
 8008ac0:	491c      	ldr	r1, [pc, #112]	; (8008b34 <__b2d+0x94>)
 8008ac2:	280a      	cmp	r0, #10
 8008ac4:	dc16      	bgt.n	8008af4 <__b2d+0x54>
 8008ac6:	230b      	movs	r3, #11
 8008ac8:	0027      	movs	r7, r4
 8008aca:	1a1b      	subs	r3, r3, r0
 8008acc:	40df      	lsrs	r7, r3
 8008ace:	4339      	orrs	r1, r7
 8008ad0:	469c      	mov	ip, r3
 8008ad2:	000b      	movs	r3, r1
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	42ae      	cmp	r6, r5
 8008ad8:	d202      	bcs.n	8008ae0 <__b2d+0x40>
 8008ada:	9901      	ldr	r1, [sp, #4]
 8008adc:	3908      	subs	r1, #8
 8008ade:	6809      	ldr	r1, [r1, #0]
 8008ae0:	3015      	adds	r0, #21
 8008ae2:	4084      	lsls	r4, r0
 8008ae4:	4660      	mov	r0, ip
 8008ae6:	40c1      	lsrs	r1, r0
 8008ae8:	430c      	orrs	r4, r1
 8008aea:	0022      	movs	r2, r4
 8008aec:	0010      	movs	r0, r2
 8008aee:	0019      	movs	r1, r3
 8008af0:	b003      	add	sp, #12
 8008af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af4:	2700      	movs	r7, #0
 8008af6:	42ae      	cmp	r6, r5
 8008af8:	d202      	bcs.n	8008b00 <__b2d+0x60>
 8008afa:	9d01      	ldr	r5, [sp, #4]
 8008afc:	3d08      	subs	r5, #8
 8008afe:	682f      	ldr	r7, [r5, #0]
 8008b00:	380b      	subs	r0, #11
 8008b02:	4684      	mov	ip, r0
 8008b04:	1e03      	subs	r3, r0, #0
 8008b06:	d012      	beq.n	8008b2e <__b2d+0x8e>
 8008b08:	409c      	lsls	r4, r3
 8008b0a:	2020      	movs	r0, #32
 8008b0c:	4321      	orrs	r1, r4
 8008b0e:	003c      	movs	r4, r7
 8008b10:	1ac0      	subs	r0, r0, r3
 8008b12:	40c4      	lsrs	r4, r0
 8008b14:	4321      	orrs	r1, r4
 8008b16:	000b      	movs	r3, r1
 8008b18:	2100      	movs	r1, #0
 8008b1a:	42b5      	cmp	r5, r6
 8008b1c:	d901      	bls.n	8008b22 <__b2d+0x82>
 8008b1e:	3d04      	subs	r5, #4
 8008b20:	6829      	ldr	r1, [r5, #0]
 8008b22:	4664      	mov	r4, ip
 8008b24:	40c1      	lsrs	r1, r0
 8008b26:	40a7      	lsls	r7, r4
 8008b28:	430f      	orrs	r7, r1
 8008b2a:	003a      	movs	r2, r7
 8008b2c:	e7de      	b.n	8008aec <__b2d+0x4c>
 8008b2e:	4321      	orrs	r1, r4
 8008b30:	000b      	movs	r3, r1
 8008b32:	e7fa      	b.n	8008b2a <__b2d+0x8a>
 8008b34:	3ff00000 	.word	0x3ff00000

08008b38 <__d2b>:
 8008b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b3a:	001d      	movs	r5, r3
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	0014      	movs	r4, r2
 8008b40:	9f08      	ldr	r7, [sp, #32]
 8008b42:	f7ff fcb7 	bl	80084b4 <_Balloc>
 8008b46:	032b      	lsls	r3, r5, #12
 8008b48:	006d      	lsls	r5, r5, #1
 8008b4a:	0006      	movs	r6, r0
 8008b4c:	0b1b      	lsrs	r3, r3, #12
 8008b4e:	0d6d      	lsrs	r5, r5, #21
 8008b50:	d124      	bne.n	8008b9c <__d2b+0x64>
 8008b52:	9301      	str	r3, [sp, #4]
 8008b54:	2c00      	cmp	r4, #0
 8008b56:	d027      	beq.n	8008ba8 <__d2b+0x70>
 8008b58:	4668      	mov	r0, sp
 8008b5a:	9400      	str	r4, [sp, #0]
 8008b5c:	f7ff fd91 	bl	8008682 <__lo0bits>
 8008b60:	9c00      	ldr	r4, [sp, #0]
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d01e      	beq.n	8008ba4 <__d2b+0x6c>
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	2120      	movs	r1, #32
 8008b6a:	001a      	movs	r2, r3
 8008b6c:	1a09      	subs	r1, r1, r0
 8008b6e:	408a      	lsls	r2, r1
 8008b70:	40c3      	lsrs	r3, r0
 8008b72:	4322      	orrs	r2, r4
 8008b74:	6172      	str	r2, [r6, #20]
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	9c01      	ldr	r4, [sp, #4]
 8008b7a:	61b4      	str	r4, [r6, #24]
 8008b7c:	1e63      	subs	r3, r4, #1
 8008b7e:	419c      	sbcs	r4, r3
 8008b80:	3401      	adds	r4, #1
 8008b82:	6134      	str	r4, [r6, #16]
 8008b84:	2d00      	cmp	r5, #0
 8008b86:	d018      	beq.n	8008bba <__d2b+0x82>
 8008b88:	4b12      	ldr	r3, [pc, #72]	; (8008bd4 <__d2b+0x9c>)
 8008b8a:	18ed      	adds	r5, r5, r3
 8008b8c:	2335      	movs	r3, #53	; 0x35
 8008b8e:	182d      	adds	r5, r5, r0
 8008b90:	603d      	str	r5, [r7, #0]
 8008b92:	1a18      	subs	r0, r3, r0
 8008b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b96:	6018      	str	r0, [r3, #0]
 8008b98:	0030      	movs	r0, r6
 8008b9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b9c:	2280      	movs	r2, #128	; 0x80
 8008b9e:	0352      	lsls	r2, r2, #13
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	e7d6      	b.n	8008b52 <__d2b+0x1a>
 8008ba4:	6174      	str	r4, [r6, #20]
 8008ba6:	e7e7      	b.n	8008b78 <__d2b+0x40>
 8008ba8:	a801      	add	r0, sp, #4
 8008baa:	f7ff fd6a 	bl	8008682 <__lo0bits>
 8008bae:	2401      	movs	r4, #1
 8008bb0:	9b01      	ldr	r3, [sp, #4]
 8008bb2:	6134      	str	r4, [r6, #16]
 8008bb4:	6173      	str	r3, [r6, #20]
 8008bb6:	3020      	adds	r0, #32
 8008bb8:	e7e4      	b.n	8008b84 <__d2b+0x4c>
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <__d2b+0xa0>)
 8008bbc:	18c0      	adds	r0, r0, r3
 8008bbe:	4b07      	ldr	r3, [pc, #28]	; (8008bdc <__d2b+0xa4>)
 8008bc0:	6038      	str	r0, [r7, #0]
 8008bc2:	18e3      	adds	r3, r4, r3
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	18f3      	adds	r3, r6, r3
 8008bc8:	6958      	ldr	r0, [r3, #20]
 8008bca:	f7ff fd40 	bl	800864e <__hi0bits>
 8008bce:	0164      	lsls	r4, r4, #5
 8008bd0:	1a20      	subs	r0, r4, r0
 8008bd2:	e7df      	b.n	8008b94 <__d2b+0x5c>
 8008bd4:	fffffbcd 	.word	0xfffffbcd
 8008bd8:	fffffbce 	.word	0xfffffbce
 8008bdc:	3fffffff 	.word	0x3fffffff

08008be0 <__ratio>:
 8008be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be2:	b085      	sub	sp, #20
 8008be4:	000f      	movs	r7, r1
 8008be6:	a902      	add	r1, sp, #8
 8008be8:	0006      	movs	r6, r0
 8008bea:	f7ff ff59 	bl	8008aa0 <__b2d>
 8008bee:	0004      	movs	r4, r0
 8008bf0:	000d      	movs	r5, r1
 8008bf2:	0038      	movs	r0, r7
 8008bf4:	a903      	add	r1, sp, #12
 8008bf6:	9400      	str	r4, [sp, #0]
 8008bf8:	9501      	str	r5, [sp, #4]
 8008bfa:	f7ff ff51 	bl	8008aa0 <__b2d>
 8008bfe:	6936      	ldr	r6, [r6, #16]
 8008c00:	693f      	ldr	r7, [r7, #16]
 8008c02:	0002      	movs	r2, r0
 8008c04:	1bf7      	subs	r7, r6, r7
 8008c06:	017e      	lsls	r6, r7, #5
 8008c08:	46b4      	mov	ip, r6
 8008c0a:	9f03      	ldr	r7, [sp, #12]
 8008c0c:	9e02      	ldr	r6, [sp, #8]
 8008c0e:	000b      	movs	r3, r1
 8008c10:	1bf6      	subs	r6, r6, r7
 8008c12:	4466      	add	r6, ip
 8008c14:	0537      	lsls	r7, r6, #20
 8008c16:	2e00      	cmp	r6, #0
 8008c18:	dd07      	ble.n	8008c2a <__ratio+0x4a>
 8008c1a:	1979      	adds	r1, r7, r5
 8008c1c:	9101      	str	r1, [sp, #4]
 8008c1e:	9800      	ldr	r0, [sp, #0]
 8008c20:	9901      	ldr	r1, [sp, #4]
 8008c22:	f7f8 f953 	bl	8000ecc <__aeabi_ddiv>
 8008c26:	b005      	add	sp, #20
 8008c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c2a:	1bcb      	subs	r3, r1, r7
 8008c2c:	e7f7      	b.n	8008c1e <__ratio+0x3e>

08008c2e <__copybits>:
 8008c2e:	0013      	movs	r3, r2
 8008c30:	3901      	subs	r1, #1
 8008c32:	b510      	push	{r4, lr}
 8008c34:	1149      	asrs	r1, r1, #5
 8008c36:	6912      	ldr	r2, [r2, #16]
 8008c38:	3101      	adds	r1, #1
 8008c3a:	0089      	lsls	r1, r1, #2
 8008c3c:	3314      	adds	r3, #20
 8008c3e:	0092      	lsls	r2, r2, #2
 8008c40:	1841      	adds	r1, r0, r1
 8008c42:	189a      	adds	r2, r3, r2
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d803      	bhi.n	8008c50 <__copybits+0x22>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4281      	cmp	r1, r0
 8008c4c:	d803      	bhi.n	8008c56 <__copybits+0x28>
 8008c4e:	bd10      	pop	{r4, pc}
 8008c50:	cb10      	ldmia	r3!, {r4}
 8008c52:	c010      	stmia	r0!, {r4}
 8008c54:	e7f6      	b.n	8008c44 <__copybits+0x16>
 8008c56:	c008      	stmia	r0!, {r3}
 8008c58:	e7f7      	b.n	8008c4a <__copybits+0x1c>

08008c5a <__any_on>:
 8008c5a:	0002      	movs	r2, r0
 8008c5c:	6900      	ldr	r0, [r0, #16]
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	3214      	adds	r2, #20
 8008c62:	114b      	asrs	r3, r1, #5
 8008c64:	4298      	cmp	r0, r3
 8008c66:	db12      	blt.n	8008c8e <__any_on+0x34>
 8008c68:	dd0b      	ble.n	8008c82 <__any_on+0x28>
 8008c6a:	201f      	movs	r0, #31
 8008c6c:	4001      	ands	r1, r0
 8008c6e:	d008      	beq.n	8008c82 <__any_on+0x28>
 8008c70:	0098      	lsls	r0, r3, #2
 8008c72:	5884      	ldr	r4, [r0, r2]
 8008c74:	0020      	movs	r0, r4
 8008c76:	40c8      	lsrs	r0, r1
 8008c78:	4088      	lsls	r0, r1
 8008c7a:	0001      	movs	r1, r0
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	428c      	cmp	r4, r1
 8008c80:	d104      	bne.n	8008c8c <__any_on+0x32>
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	18d3      	adds	r3, r2, r3
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d803      	bhi.n	8008c92 <__any_on+0x38>
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	bd10      	pop	{r4, pc}
 8008c8e:	0003      	movs	r3, r0
 8008c90:	e7f7      	b.n	8008c82 <__any_on+0x28>
 8008c92:	3b04      	subs	r3, #4
 8008c94:	6819      	ldr	r1, [r3, #0]
 8008c96:	2900      	cmp	r1, #0
 8008c98:	d0f5      	beq.n	8008c86 <__any_on+0x2c>
 8008c9a:	2001      	movs	r0, #1
 8008c9c:	e7f6      	b.n	8008c8c <__any_on+0x32>

08008c9e <_calloc_r>:
 8008c9e:	434a      	muls	r2, r1
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	0011      	movs	r1, r2
 8008ca4:	0014      	movs	r4, r2
 8008ca6:	f000 f853 	bl	8008d50 <_malloc_r>
 8008caa:	1e05      	subs	r5, r0, #0
 8008cac:	d003      	beq.n	8008cb6 <_calloc_r+0x18>
 8008cae:	0022      	movs	r2, r4
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	f7fc fcbf 	bl	8005634 <memset>
 8008cb6:	0028      	movs	r0, r5
 8008cb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cbc <_free_r>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	0005      	movs	r5, r0
 8008cc0:	2900      	cmp	r1, #0
 8008cc2:	d010      	beq.n	8008ce6 <_free_r+0x2a>
 8008cc4:	1f0c      	subs	r4, r1, #4
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	da00      	bge.n	8008cce <_free_r+0x12>
 8008ccc:	18e4      	adds	r4, r4, r3
 8008cce:	0028      	movs	r0, r5
 8008cd0:	f000 fa3e 	bl	8009150 <__malloc_lock>
 8008cd4:	4a1d      	ldr	r2, [pc, #116]	; (8008d4c <_free_r+0x90>)
 8008cd6:	6813      	ldr	r3, [r2, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d105      	bne.n	8008ce8 <_free_r+0x2c>
 8008cdc:	6063      	str	r3, [r4, #4]
 8008cde:	6014      	str	r4, [r2, #0]
 8008ce0:	0028      	movs	r0, r5
 8008ce2:	f000 fa36 	bl	8009152 <__malloc_unlock>
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	42a3      	cmp	r3, r4
 8008cea:	d909      	bls.n	8008d00 <_free_r+0x44>
 8008cec:	6821      	ldr	r1, [r4, #0]
 8008cee:	1860      	adds	r0, r4, r1
 8008cf0:	4283      	cmp	r3, r0
 8008cf2:	d1f3      	bne.n	8008cdc <_free_r+0x20>
 8008cf4:	6818      	ldr	r0, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	1841      	adds	r1, r0, r1
 8008cfa:	6021      	str	r1, [r4, #0]
 8008cfc:	e7ee      	b.n	8008cdc <_free_r+0x20>
 8008cfe:	0013      	movs	r3, r2
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	2a00      	cmp	r2, #0
 8008d04:	d001      	beq.n	8008d0a <_free_r+0x4e>
 8008d06:	42a2      	cmp	r2, r4
 8008d08:	d9f9      	bls.n	8008cfe <_free_r+0x42>
 8008d0a:	6819      	ldr	r1, [r3, #0]
 8008d0c:	1858      	adds	r0, r3, r1
 8008d0e:	42a0      	cmp	r0, r4
 8008d10:	d10b      	bne.n	8008d2a <_free_r+0x6e>
 8008d12:	6820      	ldr	r0, [r4, #0]
 8008d14:	1809      	adds	r1, r1, r0
 8008d16:	1858      	adds	r0, r3, r1
 8008d18:	6019      	str	r1, [r3, #0]
 8008d1a:	4282      	cmp	r2, r0
 8008d1c:	d1e0      	bne.n	8008ce0 <_free_r+0x24>
 8008d1e:	6810      	ldr	r0, [r2, #0]
 8008d20:	6852      	ldr	r2, [r2, #4]
 8008d22:	1841      	adds	r1, r0, r1
 8008d24:	6019      	str	r1, [r3, #0]
 8008d26:	605a      	str	r2, [r3, #4]
 8008d28:	e7da      	b.n	8008ce0 <_free_r+0x24>
 8008d2a:	42a0      	cmp	r0, r4
 8008d2c:	d902      	bls.n	8008d34 <_free_r+0x78>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	e7d5      	b.n	8008ce0 <_free_r+0x24>
 8008d34:	6821      	ldr	r1, [r4, #0]
 8008d36:	1860      	adds	r0, r4, r1
 8008d38:	4282      	cmp	r2, r0
 8008d3a:	d103      	bne.n	8008d44 <_free_r+0x88>
 8008d3c:	6810      	ldr	r0, [r2, #0]
 8008d3e:	6852      	ldr	r2, [r2, #4]
 8008d40:	1841      	adds	r1, r0, r1
 8008d42:	6021      	str	r1, [r4, #0]
 8008d44:	6062      	str	r2, [r4, #4]
 8008d46:	605c      	str	r4, [r3, #4]
 8008d48:	e7ca      	b.n	8008ce0 <_free_r+0x24>
 8008d4a:	46c0      	nop			; (mov r8, r8)
 8008d4c:	20000204 	.word	0x20000204

08008d50 <_malloc_r>:
 8008d50:	2303      	movs	r3, #3
 8008d52:	b570      	push	{r4, r5, r6, lr}
 8008d54:	1ccd      	adds	r5, r1, #3
 8008d56:	439d      	bics	r5, r3
 8008d58:	3508      	adds	r5, #8
 8008d5a:	0006      	movs	r6, r0
 8008d5c:	2d0c      	cmp	r5, #12
 8008d5e:	d21e      	bcs.n	8008d9e <_malloc_r+0x4e>
 8008d60:	250c      	movs	r5, #12
 8008d62:	42a9      	cmp	r1, r5
 8008d64:	d81d      	bhi.n	8008da2 <_malloc_r+0x52>
 8008d66:	0030      	movs	r0, r6
 8008d68:	f000 f9f2 	bl	8009150 <__malloc_lock>
 8008d6c:	4a25      	ldr	r2, [pc, #148]	; (8008e04 <_malloc_r+0xb4>)
 8008d6e:	6814      	ldr	r4, [r2, #0]
 8008d70:	0021      	movs	r1, r4
 8008d72:	2900      	cmp	r1, #0
 8008d74:	d119      	bne.n	8008daa <_malloc_r+0x5a>
 8008d76:	4c24      	ldr	r4, [pc, #144]	; (8008e08 <_malloc_r+0xb8>)
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d103      	bne.n	8008d86 <_malloc_r+0x36>
 8008d7e:	0030      	movs	r0, r6
 8008d80:	f000 f9a4 	bl	80090cc <_sbrk_r>
 8008d84:	6020      	str	r0, [r4, #0]
 8008d86:	0029      	movs	r1, r5
 8008d88:	0030      	movs	r0, r6
 8008d8a:	f000 f99f 	bl	80090cc <_sbrk_r>
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	d12b      	bne.n	8008dea <_malloc_r+0x9a>
 8008d92:	230c      	movs	r3, #12
 8008d94:	0030      	movs	r0, r6
 8008d96:	6033      	str	r3, [r6, #0]
 8008d98:	f000 f9db 	bl	8009152 <__malloc_unlock>
 8008d9c:	e003      	b.n	8008da6 <_malloc_r+0x56>
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	dadf      	bge.n	8008d62 <_malloc_r+0x12>
 8008da2:	230c      	movs	r3, #12
 8008da4:	6033      	str	r3, [r6, #0]
 8008da6:	2000      	movs	r0, #0
 8008da8:	bd70      	pop	{r4, r5, r6, pc}
 8008daa:	680b      	ldr	r3, [r1, #0]
 8008dac:	1b5b      	subs	r3, r3, r5
 8008dae:	d419      	bmi.n	8008de4 <_malloc_r+0x94>
 8008db0:	2b0b      	cmp	r3, #11
 8008db2:	d903      	bls.n	8008dbc <_malloc_r+0x6c>
 8008db4:	600b      	str	r3, [r1, #0]
 8008db6:	18cc      	adds	r4, r1, r3
 8008db8:	6025      	str	r5, [r4, #0]
 8008dba:	e003      	b.n	8008dc4 <_malloc_r+0x74>
 8008dbc:	684b      	ldr	r3, [r1, #4]
 8008dbe:	428c      	cmp	r4, r1
 8008dc0:	d10d      	bne.n	8008dde <_malloc_r+0x8e>
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	0030      	movs	r0, r6
 8008dc6:	f000 f9c4 	bl	8009152 <__malloc_unlock>
 8008dca:	0020      	movs	r0, r4
 8008dcc:	2207      	movs	r2, #7
 8008dce:	300b      	adds	r0, #11
 8008dd0:	1d23      	adds	r3, r4, #4
 8008dd2:	4390      	bics	r0, r2
 8008dd4:	1ac3      	subs	r3, r0, r3
 8008dd6:	d0e7      	beq.n	8008da8 <_malloc_r+0x58>
 8008dd8:	425a      	negs	r2, r3
 8008dda:	50e2      	str	r2, [r4, r3]
 8008ddc:	e7e4      	b.n	8008da8 <_malloc_r+0x58>
 8008dde:	6063      	str	r3, [r4, #4]
 8008de0:	000c      	movs	r4, r1
 8008de2:	e7ef      	b.n	8008dc4 <_malloc_r+0x74>
 8008de4:	000c      	movs	r4, r1
 8008de6:	6849      	ldr	r1, [r1, #4]
 8008de8:	e7c3      	b.n	8008d72 <_malloc_r+0x22>
 8008dea:	2303      	movs	r3, #3
 8008dec:	1cc4      	adds	r4, r0, #3
 8008dee:	439c      	bics	r4, r3
 8008df0:	42a0      	cmp	r0, r4
 8008df2:	d0e1      	beq.n	8008db8 <_malloc_r+0x68>
 8008df4:	1a21      	subs	r1, r4, r0
 8008df6:	0030      	movs	r0, r6
 8008df8:	f000 f968 	bl	80090cc <_sbrk_r>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d1db      	bne.n	8008db8 <_malloc_r+0x68>
 8008e00:	e7c7      	b.n	8008d92 <_malloc_r+0x42>
 8008e02:	46c0      	nop			; (mov r8, r8)
 8008e04:	20000204 	.word	0x20000204
 8008e08:	20000208 	.word	0x20000208

08008e0c <__ssputs_r>:
 8008e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e0e:	688e      	ldr	r6, [r1, #8]
 8008e10:	b085      	sub	sp, #20
 8008e12:	0007      	movs	r7, r0
 8008e14:	000c      	movs	r4, r1
 8008e16:	9203      	str	r2, [sp, #12]
 8008e18:	9301      	str	r3, [sp, #4]
 8008e1a:	429e      	cmp	r6, r3
 8008e1c:	d83c      	bhi.n	8008e98 <__ssputs_r+0x8c>
 8008e1e:	2390      	movs	r3, #144	; 0x90
 8008e20:	898a      	ldrh	r2, [r1, #12]
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	421a      	tst	r2, r3
 8008e26:	d034      	beq.n	8008e92 <__ssputs_r+0x86>
 8008e28:	2503      	movs	r5, #3
 8008e2a:	6909      	ldr	r1, [r1, #16]
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	1a5b      	subs	r3, r3, r1
 8008e30:	9302      	str	r3, [sp, #8]
 8008e32:	6963      	ldr	r3, [r4, #20]
 8008e34:	9802      	ldr	r0, [sp, #8]
 8008e36:	435d      	muls	r5, r3
 8008e38:	0feb      	lsrs	r3, r5, #31
 8008e3a:	195d      	adds	r5, r3, r5
 8008e3c:	9b01      	ldr	r3, [sp, #4]
 8008e3e:	106d      	asrs	r5, r5, #1
 8008e40:	3301      	adds	r3, #1
 8008e42:	181b      	adds	r3, r3, r0
 8008e44:	42ab      	cmp	r3, r5
 8008e46:	d900      	bls.n	8008e4a <__ssputs_r+0x3e>
 8008e48:	001d      	movs	r5, r3
 8008e4a:	0553      	lsls	r3, r2, #21
 8008e4c:	d532      	bpl.n	8008eb4 <__ssputs_r+0xa8>
 8008e4e:	0029      	movs	r1, r5
 8008e50:	0038      	movs	r0, r7
 8008e52:	f7ff ff7d 	bl	8008d50 <_malloc_r>
 8008e56:	1e06      	subs	r6, r0, #0
 8008e58:	d109      	bne.n	8008e6e <__ssputs_r+0x62>
 8008e5a:	230c      	movs	r3, #12
 8008e5c:	603b      	str	r3, [r7, #0]
 8008e5e:	2340      	movs	r3, #64	; 0x40
 8008e60:	2001      	movs	r0, #1
 8008e62:	89a2      	ldrh	r2, [r4, #12]
 8008e64:	4240      	negs	r0, r0
 8008e66:	4313      	orrs	r3, r2
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	b005      	add	sp, #20
 8008e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e6e:	9a02      	ldr	r2, [sp, #8]
 8008e70:	6921      	ldr	r1, [r4, #16]
 8008e72:	f7ff fb16 	bl	80084a2 <memcpy>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	4a14      	ldr	r2, [pc, #80]	; (8008ecc <__ssputs_r+0xc0>)
 8008e7a:	401a      	ands	r2, r3
 8008e7c:	2380      	movs	r3, #128	; 0x80
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	9b02      	ldr	r3, [sp, #8]
 8008e84:	6126      	str	r6, [r4, #16]
 8008e86:	18f6      	adds	r6, r6, r3
 8008e88:	6026      	str	r6, [r4, #0]
 8008e8a:	6165      	str	r5, [r4, #20]
 8008e8c:	9e01      	ldr	r6, [sp, #4]
 8008e8e:	1aed      	subs	r5, r5, r3
 8008e90:	60a5      	str	r5, [r4, #8]
 8008e92:	9b01      	ldr	r3, [sp, #4]
 8008e94:	429e      	cmp	r6, r3
 8008e96:	d900      	bls.n	8008e9a <__ssputs_r+0x8e>
 8008e98:	9e01      	ldr	r6, [sp, #4]
 8008e9a:	0032      	movs	r2, r6
 8008e9c:	9903      	ldr	r1, [sp, #12]
 8008e9e:	6820      	ldr	r0, [r4, #0]
 8008ea0:	f000 f943 	bl	800912a <memmove>
 8008ea4:	68a3      	ldr	r3, [r4, #8]
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	1b9b      	subs	r3, r3, r6
 8008eaa:	60a3      	str	r3, [r4, #8]
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	199e      	adds	r6, r3, r6
 8008eb0:	6026      	str	r6, [r4, #0]
 8008eb2:	e7da      	b.n	8008e6a <__ssputs_r+0x5e>
 8008eb4:	002a      	movs	r2, r5
 8008eb6:	0038      	movs	r0, r7
 8008eb8:	f000 f94c 	bl	8009154 <_realloc_r>
 8008ebc:	1e06      	subs	r6, r0, #0
 8008ebe:	d1e0      	bne.n	8008e82 <__ssputs_r+0x76>
 8008ec0:	6921      	ldr	r1, [r4, #16]
 8008ec2:	0038      	movs	r0, r7
 8008ec4:	f7ff fefa 	bl	8008cbc <_free_r>
 8008ec8:	e7c7      	b.n	8008e5a <__ssputs_r+0x4e>
 8008eca:	46c0      	nop			; (mov r8, r8)
 8008ecc:	fffffb7f 	.word	0xfffffb7f

08008ed0 <_svfiprintf_r>:
 8008ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ed2:	b0a1      	sub	sp, #132	; 0x84
 8008ed4:	9003      	str	r0, [sp, #12]
 8008ed6:	001d      	movs	r5, r3
 8008ed8:	898b      	ldrh	r3, [r1, #12]
 8008eda:	000f      	movs	r7, r1
 8008edc:	0016      	movs	r6, r2
 8008ede:	061b      	lsls	r3, r3, #24
 8008ee0:	d511      	bpl.n	8008f06 <_svfiprintf_r+0x36>
 8008ee2:	690b      	ldr	r3, [r1, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10e      	bne.n	8008f06 <_svfiprintf_r+0x36>
 8008ee8:	2140      	movs	r1, #64	; 0x40
 8008eea:	f7ff ff31 	bl	8008d50 <_malloc_r>
 8008eee:	6038      	str	r0, [r7, #0]
 8008ef0:	6138      	str	r0, [r7, #16]
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d105      	bne.n	8008f02 <_svfiprintf_r+0x32>
 8008ef6:	230c      	movs	r3, #12
 8008ef8:	9a03      	ldr	r2, [sp, #12]
 8008efa:	3801      	subs	r0, #1
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	b021      	add	sp, #132	; 0x84
 8008f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f02:	2340      	movs	r3, #64	; 0x40
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	2300      	movs	r3, #0
 8008f08:	ac08      	add	r4, sp, #32
 8008f0a:	6163      	str	r3, [r4, #20]
 8008f0c:	3320      	adds	r3, #32
 8008f0e:	7663      	strb	r3, [r4, #25]
 8008f10:	3310      	adds	r3, #16
 8008f12:	76a3      	strb	r3, [r4, #26]
 8008f14:	9507      	str	r5, [sp, #28]
 8008f16:	0035      	movs	r5, r6
 8008f18:	782b      	ldrb	r3, [r5, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <_svfiprintf_r+0x52>
 8008f1e:	2b25      	cmp	r3, #37	; 0x25
 8008f20:	d146      	bne.n	8008fb0 <_svfiprintf_r+0xe0>
 8008f22:	1bab      	subs	r3, r5, r6
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	d00c      	beq.n	8008f42 <_svfiprintf_r+0x72>
 8008f28:	0032      	movs	r2, r6
 8008f2a:	0039      	movs	r1, r7
 8008f2c:	9803      	ldr	r0, [sp, #12]
 8008f2e:	f7ff ff6d 	bl	8008e0c <__ssputs_r>
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	d100      	bne.n	8008f38 <_svfiprintf_r+0x68>
 8008f36:	e0ae      	b.n	8009096 <_svfiprintf_r+0x1c6>
 8008f38:	6962      	ldr	r2, [r4, #20]
 8008f3a:	9b05      	ldr	r3, [sp, #20]
 8008f3c:	4694      	mov	ip, r2
 8008f3e:	4463      	add	r3, ip
 8008f40:	6163      	str	r3, [r4, #20]
 8008f42:	782b      	ldrb	r3, [r5, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d100      	bne.n	8008f4a <_svfiprintf_r+0x7a>
 8008f48:	e0a5      	b.n	8009096 <_svfiprintf_r+0x1c6>
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4252      	negs	r2, r2
 8008f50:	6062      	str	r2, [r4, #4]
 8008f52:	a904      	add	r1, sp, #16
 8008f54:	3254      	adds	r2, #84	; 0x54
 8008f56:	1852      	adds	r2, r2, r1
 8008f58:	1c6e      	adds	r6, r5, #1
 8008f5a:	6023      	str	r3, [r4, #0]
 8008f5c:	60e3      	str	r3, [r4, #12]
 8008f5e:	60a3      	str	r3, [r4, #8]
 8008f60:	7013      	strb	r3, [r2, #0]
 8008f62:	65a3      	str	r3, [r4, #88]	; 0x58
 8008f64:	7831      	ldrb	r1, [r6, #0]
 8008f66:	2205      	movs	r2, #5
 8008f68:	4853      	ldr	r0, [pc, #332]	; (80090b8 <_svfiprintf_r+0x1e8>)
 8008f6a:	f7ff fa8f 	bl	800848c <memchr>
 8008f6e:	1c75      	adds	r5, r6, #1
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d11f      	bne.n	8008fb4 <_svfiprintf_r+0xe4>
 8008f74:	6822      	ldr	r2, [r4, #0]
 8008f76:	06d3      	lsls	r3, r2, #27
 8008f78:	d504      	bpl.n	8008f84 <_svfiprintf_r+0xb4>
 8008f7a:	2353      	movs	r3, #83	; 0x53
 8008f7c:	a904      	add	r1, sp, #16
 8008f7e:	185b      	adds	r3, r3, r1
 8008f80:	2120      	movs	r1, #32
 8008f82:	7019      	strb	r1, [r3, #0]
 8008f84:	0713      	lsls	r3, r2, #28
 8008f86:	d504      	bpl.n	8008f92 <_svfiprintf_r+0xc2>
 8008f88:	2353      	movs	r3, #83	; 0x53
 8008f8a:	a904      	add	r1, sp, #16
 8008f8c:	185b      	adds	r3, r3, r1
 8008f8e:	212b      	movs	r1, #43	; 0x2b
 8008f90:	7019      	strb	r1, [r3, #0]
 8008f92:	7833      	ldrb	r3, [r6, #0]
 8008f94:	2b2a      	cmp	r3, #42	; 0x2a
 8008f96:	d016      	beq.n	8008fc6 <_svfiprintf_r+0xf6>
 8008f98:	0035      	movs	r5, r6
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	200a      	movs	r0, #10
 8008f9e:	68e3      	ldr	r3, [r4, #12]
 8008fa0:	782a      	ldrb	r2, [r5, #0]
 8008fa2:	1c6e      	adds	r6, r5, #1
 8008fa4:	3a30      	subs	r2, #48	; 0x30
 8008fa6:	2a09      	cmp	r2, #9
 8008fa8:	d94e      	bls.n	8009048 <_svfiprintf_r+0x178>
 8008faa:	2900      	cmp	r1, #0
 8008fac:	d018      	beq.n	8008fe0 <_svfiprintf_r+0x110>
 8008fae:	e010      	b.n	8008fd2 <_svfiprintf_r+0x102>
 8008fb0:	3501      	adds	r5, #1
 8008fb2:	e7b1      	b.n	8008f18 <_svfiprintf_r+0x48>
 8008fb4:	4b40      	ldr	r3, [pc, #256]	; (80090b8 <_svfiprintf_r+0x1e8>)
 8008fb6:	6822      	ldr	r2, [r4, #0]
 8008fb8:	1ac0      	subs	r0, r0, r3
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4083      	lsls	r3, r0
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	002e      	movs	r6, r5
 8008fc4:	e7ce      	b.n	8008f64 <_svfiprintf_r+0x94>
 8008fc6:	9b07      	ldr	r3, [sp, #28]
 8008fc8:	1d19      	adds	r1, r3, #4
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	9107      	str	r1, [sp, #28]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	db01      	blt.n	8008fd6 <_svfiprintf_r+0x106>
 8008fd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fd4:	e004      	b.n	8008fe0 <_svfiprintf_r+0x110>
 8008fd6:	425b      	negs	r3, r3
 8008fd8:	60e3      	str	r3, [r4, #12]
 8008fda:	2302      	movs	r3, #2
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	6023      	str	r3, [r4, #0]
 8008fe0:	782b      	ldrb	r3, [r5, #0]
 8008fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8008fe4:	d10a      	bne.n	8008ffc <_svfiprintf_r+0x12c>
 8008fe6:	786b      	ldrb	r3, [r5, #1]
 8008fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8008fea:	d135      	bne.n	8009058 <_svfiprintf_r+0x188>
 8008fec:	9b07      	ldr	r3, [sp, #28]
 8008fee:	3502      	adds	r5, #2
 8008ff0:	1d1a      	adds	r2, r3, #4
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	9207      	str	r2, [sp, #28]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	db2b      	blt.n	8009052 <_svfiprintf_r+0x182>
 8008ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8008ffc:	4e2f      	ldr	r6, [pc, #188]	; (80090bc <_svfiprintf_r+0x1ec>)
 8008ffe:	7829      	ldrb	r1, [r5, #0]
 8009000:	2203      	movs	r2, #3
 8009002:	0030      	movs	r0, r6
 8009004:	f7ff fa42 	bl	800848c <memchr>
 8009008:	2800      	cmp	r0, #0
 800900a:	d006      	beq.n	800901a <_svfiprintf_r+0x14a>
 800900c:	2340      	movs	r3, #64	; 0x40
 800900e:	1b80      	subs	r0, r0, r6
 8009010:	4083      	lsls	r3, r0
 8009012:	6822      	ldr	r2, [r4, #0]
 8009014:	3501      	adds	r5, #1
 8009016:	4313      	orrs	r3, r2
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	7829      	ldrb	r1, [r5, #0]
 800901c:	2206      	movs	r2, #6
 800901e:	4828      	ldr	r0, [pc, #160]	; (80090c0 <_svfiprintf_r+0x1f0>)
 8009020:	1c6e      	adds	r6, r5, #1
 8009022:	7621      	strb	r1, [r4, #24]
 8009024:	f7ff fa32 	bl	800848c <memchr>
 8009028:	2800      	cmp	r0, #0
 800902a:	d03c      	beq.n	80090a6 <_svfiprintf_r+0x1d6>
 800902c:	4b25      	ldr	r3, [pc, #148]	; (80090c4 <_svfiprintf_r+0x1f4>)
 800902e:	2b00      	cmp	r3, #0
 8009030:	d125      	bne.n	800907e <_svfiprintf_r+0x1ae>
 8009032:	2207      	movs	r2, #7
 8009034:	9b07      	ldr	r3, [sp, #28]
 8009036:	3307      	adds	r3, #7
 8009038:	4393      	bics	r3, r2
 800903a:	3308      	adds	r3, #8
 800903c:	9307      	str	r3, [sp, #28]
 800903e:	6963      	ldr	r3, [r4, #20]
 8009040:	9a04      	ldr	r2, [sp, #16]
 8009042:	189b      	adds	r3, r3, r2
 8009044:	6163      	str	r3, [r4, #20]
 8009046:	e766      	b.n	8008f16 <_svfiprintf_r+0x46>
 8009048:	4343      	muls	r3, r0
 800904a:	2101      	movs	r1, #1
 800904c:	189b      	adds	r3, r3, r2
 800904e:	0035      	movs	r5, r6
 8009050:	e7a6      	b.n	8008fa0 <_svfiprintf_r+0xd0>
 8009052:	2301      	movs	r3, #1
 8009054:	425b      	negs	r3, r3
 8009056:	e7d0      	b.n	8008ffa <_svfiprintf_r+0x12a>
 8009058:	2300      	movs	r3, #0
 800905a:	200a      	movs	r0, #10
 800905c:	001a      	movs	r2, r3
 800905e:	3501      	adds	r5, #1
 8009060:	6063      	str	r3, [r4, #4]
 8009062:	7829      	ldrb	r1, [r5, #0]
 8009064:	1c6e      	adds	r6, r5, #1
 8009066:	3930      	subs	r1, #48	; 0x30
 8009068:	2909      	cmp	r1, #9
 800906a:	d903      	bls.n	8009074 <_svfiprintf_r+0x1a4>
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0c5      	beq.n	8008ffc <_svfiprintf_r+0x12c>
 8009070:	9209      	str	r2, [sp, #36]	; 0x24
 8009072:	e7c3      	b.n	8008ffc <_svfiprintf_r+0x12c>
 8009074:	4342      	muls	r2, r0
 8009076:	2301      	movs	r3, #1
 8009078:	1852      	adds	r2, r2, r1
 800907a:	0035      	movs	r5, r6
 800907c:	e7f1      	b.n	8009062 <_svfiprintf_r+0x192>
 800907e:	ab07      	add	r3, sp, #28
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	003a      	movs	r2, r7
 8009084:	4b10      	ldr	r3, [pc, #64]	; (80090c8 <_svfiprintf_r+0x1f8>)
 8009086:	0021      	movs	r1, r4
 8009088:	9803      	ldr	r0, [sp, #12]
 800908a:	f7fc fb77 	bl	800577c <_printf_float>
 800908e:	9004      	str	r0, [sp, #16]
 8009090:	9b04      	ldr	r3, [sp, #16]
 8009092:	3301      	adds	r3, #1
 8009094:	d1d3      	bne.n	800903e <_svfiprintf_r+0x16e>
 8009096:	89bb      	ldrh	r3, [r7, #12]
 8009098:	980d      	ldr	r0, [sp, #52]	; 0x34
 800909a:	065b      	lsls	r3, r3, #25
 800909c:	d400      	bmi.n	80090a0 <_svfiprintf_r+0x1d0>
 800909e:	e72e      	b.n	8008efe <_svfiprintf_r+0x2e>
 80090a0:	2001      	movs	r0, #1
 80090a2:	4240      	negs	r0, r0
 80090a4:	e72b      	b.n	8008efe <_svfiprintf_r+0x2e>
 80090a6:	ab07      	add	r3, sp, #28
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	003a      	movs	r2, r7
 80090ac:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <_svfiprintf_r+0x1f8>)
 80090ae:	0021      	movs	r1, r4
 80090b0:	9803      	ldr	r0, [sp, #12]
 80090b2:	f7fc fe1d 	bl	8005cf0 <_printf_i>
 80090b6:	e7ea      	b.n	800908e <_svfiprintf_r+0x1be>
 80090b8:	0800946c 	.word	0x0800946c
 80090bc:	08009472 	.word	0x08009472
 80090c0:	08009476 	.word	0x08009476
 80090c4:	0800577d 	.word	0x0800577d
 80090c8:	08008e0d 	.word	0x08008e0d

080090cc <_sbrk_r>:
 80090cc:	2300      	movs	r3, #0
 80090ce:	b570      	push	{r4, r5, r6, lr}
 80090d0:	4c06      	ldr	r4, [pc, #24]	; (80090ec <_sbrk_r+0x20>)
 80090d2:	0005      	movs	r5, r0
 80090d4:	0008      	movs	r0, r1
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	f7f9 fde6 	bl	8002ca8 <_sbrk>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d103      	bne.n	80090e8 <_sbrk_r+0x1c>
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d000      	beq.n	80090e8 <_sbrk_r+0x1c>
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	bd70      	pop	{r4, r5, r6, pc}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	2000039c 	.word	0x2000039c

080090f0 <strncmp>:
 80090f0:	2300      	movs	r3, #0
 80090f2:	b530      	push	{r4, r5, lr}
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d00a      	beq.n	800910e <strncmp+0x1e>
 80090f8:	3a01      	subs	r2, #1
 80090fa:	5cc4      	ldrb	r4, [r0, r3]
 80090fc:	5ccd      	ldrb	r5, [r1, r3]
 80090fe:	42ac      	cmp	r4, r5
 8009100:	d104      	bne.n	800910c <strncmp+0x1c>
 8009102:	4293      	cmp	r3, r2
 8009104:	d002      	beq.n	800910c <strncmp+0x1c>
 8009106:	3301      	adds	r3, #1
 8009108:	2c00      	cmp	r4, #0
 800910a:	d1f6      	bne.n	80090fa <strncmp+0xa>
 800910c:	1b63      	subs	r3, r4, r5
 800910e:	0018      	movs	r0, r3
 8009110:	bd30      	pop	{r4, r5, pc}

08009112 <__ascii_wctomb>:
 8009112:	1e0b      	subs	r3, r1, #0
 8009114:	d004      	beq.n	8009120 <__ascii_wctomb+0xe>
 8009116:	2aff      	cmp	r2, #255	; 0xff
 8009118:	d904      	bls.n	8009124 <__ascii_wctomb+0x12>
 800911a:	238a      	movs	r3, #138	; 0x8a
 800911c:	6003      	str	r3, [r0, #0]
 800911e:	3b8b      	subs	r3, #139	; 0x8b
 8009120:	0018      	movs	r0, r3
 8009122:	4770      	bx	lr
 8009124:	700a      	strb	r2, [r1, #0]
 8009126:	2301      	movs	r3, #1
 8009128:	e7fa      	b.n	8009120 <__ascii_wctomb+0xe>

0800912a <memmove>:
 800912a:	b510      	push	{r4, lr}
 800912c:	4288      	cmp	r0, r1
 800912e:	d902      	bls.n	8009136 <memmove+0xc>
 8009130:	188b      	adds	r3, r1, r2
 8009132:	4298      	cmp	r0, r3
 8009134:	d303      	bcc.n	800913e <memmove+0x14>
 8009136:	2300      	movs	r3, #0
 8009138:	e007      	b.n	800914a <memmove+0x20>
 800913a:	5c8b      	ldrb	r3, [r1, r2]
 800913c:	5483      	strb	r3, [r0, r2]
 800913e:	3a01      	subs	r2, #1
 8009140:	d2fb      	bcs.n	800913a <memmove+0x10>
 8009142:	bd10      	pop	{r4, pc}
 8009144:	5ccc      	ldrb	r4, [r1, r3]
 8009146:	54c4      	strb	r4, [r0, r3]
 8009148:	3301      	adds	r3, #1
 800914a:	429a      	cmp	r2, r3
 800914c:	d1fa      	bne.n	8009144 <memmove+0x1a>
 800914e:	e7f8      	b.n	8009142 <memmove+0x18>

08009150 <__malloc_lock>:
 8009150:	4770      	bx	lr

08009152 <__malloc_unlock>:
 8009152:	4770      	bx	lr

08009154 <_realloc_r>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	0007      	movs	r7, r0
 8009158:	000d      	movs	r5, r1
 800915a:	0016      	movs	r6, r2
 800915c:	2900      	cmp	r1, #0
 800915e:	d105      	bne.n	800916c <_realloc_r+0x18>
 8009160:	0011      	movs	r1, r2
 8009162:	f7ff fdf5 	bl	8008d50 <_malloc_r>
 8009166:	0004      	movs	r4, r0
 8009168:	0020      	movs	r0, r4
 800916a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800916c:	2a00      	cmp	r2, #0
 800916e:	d103      	bne.n	8009178 <_realloc_r+0x24>
 8009170:	f7ff fda4 	bl	8008cbc <_free_r>
 8009174:	0034      	movs	r4, r6
 8009176:	e7f7      	b.n	8009168 <_realloc_r+0x14>
 8009178:	f000 f812 	bl	80091a0 <_malloc_usable_size_r>
 800917c:	002c      	movs	r4, r5
 800917e:	42b0      	cmp	r0, r6
 8009180:	d2f2      	bcs.n	8009168 <_realloc_r+0x14>
 8009182:	0031      	movs	r1, r6
 8009184:	0038      	movs	r0, r7
 8009186:	f7ff fde3 	bl	8008d50 <_malloc_r>
 800918a:	1e04      	subs	r4, r0, #0
 800918c:	d0ec      	beq.n	8009168 <_realloc_r+0x14>
 800918e:	0029      	movs	r1, r5
 8009190:	0032      	movs	r2, r6
 8009192:	f7ff f986 	bl	80084a2 <memcpy>
 8009196:	0029      	movs	r1, r5
 8009198:	0038      	movs	r0, r7
 800919a:	f7ff fd8f 	bl	8008cbc <_free_r>
 800919e:	e7e3      	b.n	8009168 <_realloc_r+0x14>

080091a0 <_malloc_usable_size_r>:
 80091a0:	1f0b      	subs	r3, r1, #4
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	1f18      	subs	r0, r3, #4
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	da01      	bge.n	80091ae <_malloc_usable_size_r+0xe>
 80091aa:	580b      	ldr	r3, [r1, r0]
 80091ac:	18c0      	adds	r0, r0, r3
 80091ae:	4770      	bx	lr

080091b0 <_init>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	46c0      	nop			; (mov r8, r8)
 80091b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b6:	bc08      	pop	{r3}
 80091b8:	469e      	mov	lr, r3
 80091ba:	4770      	bx	lr

080091bc <_fini>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	46c0      	nop			; (mov r8, r8)
 80091c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c2:	bc08      	pop	{r3}
 80091c4:	469e      	mov	lr, r3
 80091c6:	4770      	bx	lr
